{
  "info": {
    "title": "API Documentation",
    "version": "1.0.0",
    "description": "Auto-generated API documentation",
    "baseUrl": "http://localhost:3000",
    "authentication": {
      "type": "bearer",
      "required": true,
      "endpoint": "/api/auth/login",
      "headerName": "Authorization",
      "description": "Bearer token authentication required"
    }
  },
  "endpoints": [
    {
      "method": "GET",
      "url": "/api/workspaces",
      "file": "src\\app\\api\\workspaces\\route.ts",
      "title": "List Workspaces",
      "description": "Retrieve a list of workspacess",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "ws_vzam587ts",
              "name": "My Personal Workspace",
              "description": "Personal workspace for development and testing",
              "ownerId": "user_hmueax95e",
              "createdAt": "2025-09-24T11:27:05.604Z",
              "slug": "my-personal-workspace",
              "members": [
                {
                  "id": "member_kaywoura9",
                  "userId": "user_hmueax95e",
                  "role": "owner",
                  "status": true
                }
              ]
            },
            {
              "id": "ws_uibulcwgj",
              "name": "Team Collaboration",
              "description": "Shared workspace for team projects",
              "ownerId": "user_g7eitnu8w",
              "createdAt": "2025-09-17T11:27:05.605Z",
              "slug": "team-collaboration",
              "members": [
                {
                  "id": "member_lqpiqvaqa",
                  "userId": "user_9zqpkxm7f",
                  "role": "owner",
                  "status": true
                },
                {
                  "id": "member_fuwuurp1m",
                  "userId": "user_hmueax95e",
                  "role": "member",
                  "status": true
                }
              ]
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve a list of workspacess",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "ownerId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "slug": {
                "type": "string"
              },
              "members": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "status": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET() {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const workspaces = await prisma.workspace.findMany({\r\n    return NextResponse.json(workspaces);\r\n    return NextResponse.json(\r\nexport async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const { name, description } = body;\r\n      return NextResponse.json(\r\n    const generateSlug = (name: string) => {\r\n      return name\r\n      const existingWorkspace = await prisma.workspace.findUnique({\r\n    const ownedWorkspacesCount = await prisma.workspace.count({\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.create({\r\n    return NextResponse.json(workspace, { status: <cvv> });\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces",
      "file": "src\\app\\api\\workspaces\\route.ts",
      "title": "Create Workspaces",
      "description": "Create a new workspaces",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "ws_s9p5x1l63",
              "name": "My Personal Workspace",
              "description": "Personal workspace for development and testing",
              "ownerId": "user_6kmubckq4",
              "createdAt": "2025-09-24T11:27:05.607Z",
              "slug": "my-personal-workspace",
              "members": [
                {
                  "id": "member_xutnt30ir",
                  "userId": "user_6kmubckq4",
                  "role": "owner",
                  "status": true
                }
              ]
            },
            {
              "id": "ws_4gnbnj3zy",
              "name": "Team Collaboration",
              "description": "Shared workspace for team projects",
              "ownerId": "user_pc3bpamki",
              "createdAt": "2025-09-17T11:27:05.607Z",
              "slug": "team-collaboration",
              "members": [
                {
                  "id": "member_6btdid8pv",
                  "userId": "user_tlpv1sr1y",
                  "role": "owner",
                  "status": true
                },
                {
                  "id": "member_qg10uy9xa",
                  "userId": "user_6kmubckq4",
                  "role": "member",
                  "status": true
                }
              ]
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "name": "string",
          "description": "string"
        },
        "required": [
          "name"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "ownerId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "slug": {
                "type": "string"
              },
              "members": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "status": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET() {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const workspaces = await prisma.workspace.findMany({\r\n    return NextResponse.json(workspaces);\r\n    return NextResponse.json(\r\nexport async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const { name, description } = body;\r\n      return NextResponse.json(\r\n    const generateSlug = (name: string) => {\r\n      return name\r\n      const existingWorkspace = await prisma.workspace.findUnique({\r\n    const ownedWorkspacesCount = await prisma.workspace.count({\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.create({\r\n    return NextResponse.json(workspace, { status: <cvv> });\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks",
      "file": "src\\app\\api\\tasks\\route.ts",
      "title": "List Tasks",
      "description": "Retrieve a list of taskss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve a list of taskss",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n      return NextResponse.json(\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n      const nextNum = board.nextIssueNumber;\r\n      const firstColumn = await prisma.taskColumn.findFirst({\r\n    const task = await prisma.task.create({\r\n    return NextResponse.json(task, { status: <cvv> });\r\n    return NextResponse.json(\r\nexport async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const url = new URL(request.url);\r\n    const boardId = url.searchParams.get('boardId');\r\n    const columnId = url.searchParams.get('columnId');\r\n    const assigneeId = url.searchParams.get('assigneeId');\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks",
      "file": "src\\app\\api\\tasks\\route.ts",
      "title": "Create Tasks",
      "description": "Create a new tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "title field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "priority": {
              "type": "string",
              "description": "priority field"
            },
            "type": {
              "type": "string",
              "description": "type field"
            },
            "status": {
              "type": "string",
              "description": "status field"
            },
            "storyPoints": {
              "type": "string",
              "description": "storyPoints field"
            },
            "dueDate": {
              "type": "string",
              "description": "dueDate field"
            },
            "columnId": {
              "type": "string",
              "description": "columnId field"
            },
            "taskBoardId": {
              "type": "string",
              "description": "taskBoardId field"
            },
            "workspaceId": {
              "type": "string",
              "description": "workspaceId field"
            },
            "assigneeId": {
              "type": "string",
              "description": "assigneeId field"
            },
            "parentTaskId": {
              "type": "string",
              "description": "parentTaskId field"
            },
            "storyId": {
              "type": "string",
              "description": "storyId field"
            },
            "epicId": {
              "type": "string",
              "description": "epicId field"
            },
            "milestoneId": {
              "type": "string",
              "description": "milestoneId field"
            },
            "postId": {
              "type": "string",
              "description": "postId field"
            },
            "labels": {
              "type": "string",
              "description": "labels field"
            },
            "": {
              "type": "string",
              "description": " field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "title": "string",
          "description": "string",
          "priority": "string",
          "type": "string",
          "status": "string",
          "storyPoints": "string",
          "dueDate": "string",
          "columnId": "string",
          "taskBoardId": "string",
          "workspaceId": "string",
          "assigneeId": "string",
          "parentTaskId": "string",
          "storyId": "string",
          "epicId": "string",
          "milestoneId": "string",
          "postId": "string",
          "labels": "string",
          "": "string"
        },
        "required": [
          "title",
          "priority",
          "type",
          "status",
          "storyPoints",
          "dueDate",
          "columnId",
          "taskBoardId",
          "workspaceId",
          "assigneeId",
          "parentTaskId",
          "storyId",
          "epicId",
          "milestoneId",
          "postId",
          "labels"
        ]
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n      return NextResponse.json(\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n      const nextNum = board.nextIssueNumber;\r\n      const firstColumn = await prisma.taskColumn.findFirst({\r\n    const task = await prisma.task.create({\r\n    return NextResponse.json(task, { status: <cvv> });\r\n    return NextResponse.json(\r\nexport async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const url = new URL(request.url);\r\n    const boardId = url.searchParams.get('boardId');\r\n    const columnId = url.searchParams.get('columnId');\r\n    const assigneeId = url.searchParams.get('assigneeId');\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/tasks",
      "file": "src\\app\\api\\tasks\\route.ts",
      "title": "Update Tasks",
      "description": "Partially update an existing tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "title field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "priority": {
              "type": "string",
              "description": "priority field"
            },
            "type": {
              "type": "string",
              "description": "type field"
            },
            "status": {
              "type": "string",
              "description": "status field"
            },
            "storyPoints": {
              "type": "string",
              "description": "storyPoints field"
            },
            "dueDate": {
              "type": "string",
              "description": "dueDate field"
            },
            "columnId": {
              "type": "string",
              "description": "columnId field"
            },
            "taskBoardId": {
              "type": "string",
              "description": "taskBoardId field"
            },
            "workspaceId": {
              "type": "string",
              "description": "workspaceId field"
            },
            "assigneeId": {
              "type": "string",
              "description": "assigneeId field"
            },
            "parentTaskId": {
              "type": "string",
              "description": "parentTaskId field"
            },
            "storyId": {
              "type": "string",
              "description": "storyId field"
            },
            "epicId": {
              "type": "string",
              "description": "epicId field"
            },
            "milestoneId": {
              "type": "string",
              "description": "milestoneId field"
            },
            "postId": {
              "type": "string",
              "description": "postId field"
            },
            "labels": {
              "type": "string",
              "description": "labels field"
            },
            "": {
              "type": "string",
              "description": " field"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "title": "string",
          "description": "string",
          "priority": "string",
          "type": "string",
          "status": "string",
          "storyPoints": "string",
          "dueDate": "string",
          "columnId": "string",
          "taskBoardId": "string",
          "workspaceId": "string",
          "assigneeId": "string",
          "parentTaskId": "string",
          "storyId": "string",
          "epicId": "string",
          "milestoneId": "string",
          "postId": "string",
          "labels": "string",
          "": "string"
        },
        "required": [
          "title",
          "priority",
          "type",
          "status",
          "storyPoints",
          "dueDate",
          "columnId",
          "taskBoardId",
          "workspaceId",
          "assigneeId",
          "parentTaskId",
          "storyId",
          "epicId",
          "milestoneId",
          "postId",
          "labels"
        ]
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n      return NextResponse.json(\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n      const nextNum = board.nextIssueNumber;\r\n      const firstColumn = await prisma.taskColumn.findFirst({\r\n    const task = await prisma.task.create({\r\n    return NextResponse.json(task, { status: <cvv> });\r\n    return NextResponse.json(\r\nexport async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const url = new URL(request.url);\r\n    const boardId = url.searchParams.get('boardId');\r\n    const columnId = url.searchParams.get('columnId');\r\n    const assigneeId = url.searchParams.get('assigneeId');\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/stories",
      "file": "src\\app\\api\\stories\\route.ts",
      "title": "List Stories",
      "description": "Retrieve a list of storiess",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "stories"
      ],
      "summary": "Retrieve a list of storiess",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n      return NextResponse.json(\r\n      const assignee = await prisma.user.findUnique({\r\n        return NextResponse.json(\r\n      const reporter = await prisma.user.findUnique({\r\n        return NextResponse.json(\r\n      const epic = await prisma.epic.findUnique({\r\n        return NextResponse.json(\r\n      const board = await prisma.taskBoard.findUnique({\r\n        return NextResponse.json<phone>const column = await prisma.taskColumn.findUnique({\r\n          return NextResponse.json<phone>const updatedBoard = await prisma.taskBoard.update({\r\n    const story = await prisma.story.create({\r\n          relatedItemType: 'EPIC' as const\r\n    return NextResponse.json(story, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/stories",
      "file": "src\\app\\api\\stories\\route.ts",
      "title": "Create Stories",
      "description": "Create a new stories",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "title field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "status": {
              "type": "string",
              "description": "status field"
            },
            "priority": {
              "type": "string",
              "description": "priority field"
            },
            "type": {
              "type": "string",
              "description": "type field"
            },
            "storyPoints": {
              "type": "string",
              "description": "storyPoints field"
            },
            "epicId": {
              "type": "string",
              "description": "epicId field"
            },
            "taskBoardId": {
              "type": "string",
              "description": "taskBoardId field"
            },
            "workspaceId": {
              "type": "string",
              "description": "workspaceId field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "columnId": {
              "type": "string",
              "description": "columnId field"
            },
            "assigneeId": {
              "type": "string",
              "description": "assigneeId field"
            },
            "reporterId": {
              "type": "string",
              "description": "reporterId field"
            },
            "labels": {
              "type": "string",
              "description": "labels field"
            },
            "": {
              "type": "string",
              "description": " field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "title": "string",
          "description": "string",
          "status": "string",
          "priority": "string",
          "type": "string",
          "storyPoints": "string",
          "epicId": "string",
          "taskBoardId": "string",
          "workspaceId": "string",
          "color": "string",
          "columnId": "string",
          "assigneeId": "string",
          "reporterId": "string",
          "labels": "string",
          "": "string"
        },
        "required": [
          "title",
          "status",
          "priority",
          "type",
          "storyPoints",
          "epicId",
          "taskBoardId",
          "workspaceId",
          "color",
          "columnId",
          "assigneeId",
          "reporterId",
          "labels"
        ]
      },
      "tags": [
        "stories"
      ],
      "summary": "Create a new stories",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n      return NextResponse.json(\r\n      const assignee = await prisma.user.findUnique({\r\n        return NextResponse.json(\r\n      const reporter = await prisma.user.findUnique({\r\n        return NextResponse.json(\r\n      const epic = await prisma.epic.findUnique({\r\n        return NextResponse.json(\r\n      const board = await prisma.taskBoard.findUnique({\r\n        return NextResponse.json<phone>const column = await prisma.taskColumn.findUnique({\r\n          return NextResponse.json<phone>const updatedBoard = await prisma.taskBoard.update({\r\n    const story = await prisma.story.create({\r\n          relatedItemType: 'EPIC' as const\r\n    return NextResponse.json(story, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/taskboards",
      "file": "src\\app\\api\\taskboards\\route.ts",
      "title": "List Taskboards",
      "description": "Retrieve a list of taskboardss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "taskboards"
      ],
      "summary": "Retrieve a list of taskboardss",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(req: Request) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { searchParams } = new URL(req.url);\r\n    const workspaceId = searchParams.get(\"workspaceId\");\r\n    const includeStats = searchParams.get(\"includeStats\") === \"true\";\r\n    const query: any = {};\r\n        return NextResponse.json(\r\n      const accessibleWorkspaces = await prisma.workspace.findMany({\r\n        return NextResponse.json([]);\r\n    const include: any = {};\r\n    const taskBoards = await prisma.taskBoard.findMany({\r\n    return NextResponse.json(taskBoards);\r\n    return NextResponse.json(\r\nexport async function POST(req: Request) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const body = await req.json();\r\n    const { name, slug, description, workspaceId, issuePrefix } = body;\r\n      return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/taskboards",
      "file": "src\\app\\api\\taskboards\\route.ts",
      "title": "Create Taskboards",
      "description": "Create a new taskboards",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "slug": {
              "type": "string",
              "description": "slug field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "workspaceId": {
              "type": "string",
              "description": "workspaceId field"
            },
            "issuePrefix": {
              "type": "string",
              "description": "issuePrefix field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "name": "string",
          "slug": "string",
          "description": "string",
          "workspaceId": "string",
          "issuePrefix": "string"
        },
        "required": [
          "name",
          "slug",
          "workspaceId",
          "issuePrefix"
        ]
      },
      "tags": [
        "taskboards"
      ],
      "summary": "Create a new taskboards",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(req: Request) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { searchParams } = new URL(req.url);\r\n    const workspaceId = searchParams.get(\"workspaceId\");\r\n    const includeStats = searchParams.get(\"includeStats\") === \"true\";\r\n    const query: any = {};\r\n        return NextResponse.json(\r\n      const accessibleWorkspaces = await prisma.workspace.findMany({\r\n        return NextResponse.json([]);\r\n    const include: any = {};\r\n    const taskBoards = await prisma.taskBoard.findMany({\r\n    return NextResponse.json(taskBoards);\r\n    return NextResponse.json(\r\nexport async function POST(req: Request) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const body = await req.json();\r\n    const { name, slug, description, workspaceId, issuePrefix } = body;\r\n      return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/search",
      "file": "src\\app\\api\\search\\route.ts",
      "title": "List Search",
      "description": "Retrieve a list of searchs",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description",
            "notes",
            "tags"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "search"
      ],
      "summary": "Retrieve a list of searchs",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export interface SearchResult {\r\nexport async function GET(req: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const query = url.searchParams.get(\"q\");\r\n    const workspaceId = url.searchParams.get(\"workspace\");\r\n    const limit = parseInt(url.searchParams.get(\"limit\") || \"50\");\r\n      return NextResponse.json([]);\r\n      return NextResponse.json({ error: \"Workspace ID required\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const results: SearchResult[] = [];\r\n    const workspaceSlug = hasAccess.slug || workspaceId;\r\n    const users = await prisma.user.findMany({\r\n    const issues = await prisma.issue.findMany({\r\n    const views = await prisma.view.findMany({\r\n    const projects = await prisma.project.findMany({\r\n    const notes = await prisma.note.findMany({\r\n    const posts = await prisma.post.findMany({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/resolve-issue-key",
      "file": "src\\app\\api\\resolve-issue-key\\route.ts",
      "title": "List Resolve-issue-key",
      "description": "Retrieve a list of resolve-issue-keys",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "tags": [
        "resolve-issue-key"
      ],
      "summary": "Retrieve a list of resolve-issue-keys",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": false,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Retrieve a list of resolve-issue-keys\nconst response = await fetch('http://localhost:3000/api/resolve-issue-key', {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nif (response.ok) {\n  const data = await response.json();\n  return data;\n} else {\n  throw new Error(`API Error: ${response.status}`);\n}"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/sidebar",
      "file": "src\\app\\api\\sidebar\\route.ts",
      "title": "Create Sidebar",
      "description": "Create a new sidebar",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "target": {
              "type": "string"
            },
            "state": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "target": "sample_target",
          "state": "sample_state"
        }
      },
      "tags": [
        "sidebar"
      ],
      "summary": "Create a new sidebar",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(req: NextRequest) {\r\n    const { target, state } = await req.json() as {\r\n    const res = NextResponse.json({ ok: true });\r\n    return res;\r\n    return NextResponse.json({ ok: false, error: \"Invalid request\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/resolve-slug",
      "file": "src\\app\\api\\resolve-slug\\route.ts",
      "title": "List Resolve-slug",
      "description": "Retrieve a list of resolve-slugs",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "tags": [
        "resolve-slug"
      ],
      "summary": "Retrieve a list of resolve-slugs",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": false,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "function isCUID(str: string): boolean {\r\n  return /^c[a-z0-9]{24}$/.test(str);\r\nfunction isDatabaseId(str: string): boolean {\r\n  return isUUID(str) || isCUID(str);\r\nexport async function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url);\r\n  const value = searchParams.get('value');\r\n  const type = searchParams.get('type'); // 'workspace-slug' or 'board-slug'\r\n  const workspaceSlugOrId = searchParams.get('workspaceSlugOrId'); // For board resolution\r\n    return NextResponse.json({ error: 'Missing value or type parameter' }, { status: <cvv> });\r\n    return NextResponse.json({ error: 'Invalid type parameter' }, { status: <cvv> });\r\n      // Get workspace slug from ID or return slug if already a slug<phone>const workspace = await prisma.workspace.findUnique({\r\n        // Already a slug, just return it<phone>return NextResponse.json({ error: 'workspaceSlugOrId required for board resolution' }, { status: <cvv> });\r\n        const workspace = await prisma.workspace.findUnique({\r\n      // Get board slug from ID or return slug if already a slug<phone>const board = await prisma.taskBoard.findFirst({\r\n        // Already a slug, just return it\r\n    return NextResponse.json({ result });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/posts",
      "file": "src\\app\\api\\posts\\route.ts",
      "title": "List Posts",
      "description": "Retrieve a list of postss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "tags"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve a list of postss",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(req: Request) {\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const body = await req.json();\r\n    const { message, html, type, tags, priority, workspaceId } = body;\r\n      return new NextResponse(\"Message is required\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid post type\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid priority\", { status: <cvv> });\r\n      return new NextResponse(\"Workspace is required\", { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return new NextResponse(\"Workspace not found or access denied\", { status: <cvv> });\r\n    const post = await prisma.post.create({\r\n    return NextResponse.json(post);\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function GET(req: Request) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { searchParams } = new URL(req.url);\r\n    const type = searchParams.get(\"type\");\r\n    const tag = searchParams.get(\"tag\");\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/posts",
      "file": "src\\app\\api\\posts\\route.ts",
      "title": "Create Posts",
      "description": "Create a new posts",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "message field"
            },
            "html": {
              "type": "string",
              "description": "html field"
            },
            "type": {
              "type": "string",
              "description": "type field"
            },
            "tags": {
              "type": "string",
              "description": "tags field"
            },
            "priority": {
              "type": "string",
              "description": "priority field"
            },
            "workspaceId": {
              "type": "string",
              "description": "workspaceId field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "message": "string",
          "html": "string",
          "type": "string",
          "tags": "string",
          "priority": "string",
          "workspaceId": "string"
        },
        "required": [
          "message",
          "html",
          "type",
          "priority",
          "workspaceId"
        ]
      },
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(req: Request) {\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const body = await req.json();\r\n    const { message, html, type, tags, priority, workspaceId } = body;\r\n      return new NextResponse(\"Message is required\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid post type\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid priority\", { status: <cvv> });\r\n      return new NextResponse(\"Workspace is required\", { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return new NextResponse(\"Workspace not found or access denied\", { status: <cvv> });\r\n    const post = await prisma.post.create({\r\n    return NextResponse.json(post);\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function GET(req: Request) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { searchParams } = new URL(req.url);\r\n    const type = searchParams.get(\"type\");\r\n    const tag = searchParams.get(\"tag\");\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/register",
      "file": "src\\app\\api\\register\\route.ts",
      "title": "Create Register",
      "description": "Create a new register",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "email": {
              "type": "string",
              "description": "email field"
            },
            "password": {
              "type": "string",
              "description": "password field"
            },
            "role": {
              "type": "string",
              "description": "role field"
            },
            "team": {
              "type": "string",
              "description": "team field"
            },
            "currentFocus": {
              "type": "string",
              "description": "currentFocus field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "name": "string",
          "email": "string",
          "password": "string",
          "role": "string",
          "team": "string",
          "currentFocus": "string"
        },
        "required": [
          "name",
          "email",
          "password",
          "role",
          "team",
          "currentFocus"
        ]
      },
      "tags": [
        "register"
      ],
      "summary": "Create a new register",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": false,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(req: Request) {\r\n    const body = await req.json();\r\n    const { name, email, password, role, team, currentFocus } = body;\r\n      return NextResponse.json(\r\n    const existingUser = await prisma.user.findUnique({\r\n      return NextResponse.json(\r\n    const hashedPassword = await hash(password, 12);\r\n    const randomAvatar = generateRandomAvatar();\r\n    const user = await prisma.user.create({\r\n    const { ...userWithoutPassword } = user;\r\n    return NextResponse.json(userWithoutPassword);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/notes",
      "file": "src\\app\\api\\notes\\route.ts",
      "title": "List Notes",
      "description": "Retrieve a list of notess",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "notes",
            "tags"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "notes"
      ],
      "summary": "Retrieve a list of notess",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const search = searchParams.get(\"search\");\r\n    const isFavorite = searchParams.get(\"favorite\") === \"true\";\r\n    const tagId = searchParams.get(\"tag\");\r\n    const workspaceId = searchParams.get(\"workspace\");\r\n    const isPublic = searchParams.get(\"public\");\r\n    const own = searchParams.get(\"own\");\r\n    const where: any = {\r\n          { title: { contains: search, mode: \"insensitive\" as const } },\r\n          { content: { contains: search, mode: \"insensitive\" as const } }\r\n    const notes = await prisma.note.findMany({\r\n    return NextResponse.json(notes);\r\n    return NextResponse.json(\r\nexport async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const body = await request.json();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/notes",
      "file": "src\\app\\api\\notes\\route.ts",
      "title": "Create Notes",
      "description": "Create a new notes",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "title field"
            },
            "content": {
              "type": "string",
              "description": "content field"
            },
            "isPublic": {
              "type": "string",
              "description": "isPublic field"
            },
            "isFavorite": {
              "type": "string",
              "description": "isFavorite field"
            },
            "workspaceId": {
              "type": "string",
              "description": "workspaceId field"
            },
            "tagIds": {
              "type": "string",
              "description": "tagIds field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "title": "string",
          "content": "string",
          "isPublic": "string",
          "isFavorite": "string",
          "workspaceId": "string",
          "tagIds": "string"
        },
        "required": [
          "title",
          "content",
          "isPublic",
          "isFavorite",
          "workspaceId"
        ]
      },
      "tags": [
        "notes"
      ],
      "summary": "Create a new notes",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const search = searchParams.get(\"search\");\r\n    const isFavorite = searchParams.get(\"favorite\") === \"true\";\r\n    const tagId = searchParams.get(\"tag\");\r\n    const workspaceId = searchParams.get(\"workspace\");\r\n    const isPublic = searchParams.get(\"public\");\r\n    const own = searchParams.get(\"own\");\r\n    const where: any = {\r\n          { title: { contains: search, mode: \"insensitive\" as const } },\r\n          { content: { contains: search, mode: \"insensitive\" as const } }\r\n    const notes = await prisma.note.findMany({\r\n    return NextResponse.json(notes);\r\n    return NextResponse.json(\r\nexport async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const body = await request.json();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/notifications",
      "file": "src\\app\\api\\notifications\\route.ts",
      "title": "List Notifications",
      "description": "Retrieve a list of notificationss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "notifications"
      ],
      "summary": "Retrieve a list of notificationss",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(req: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const limit = parseInt(url.searchParams.get(\"limit\") || \"20\");\r\n    const page = parseInt(url.searchParams.get(\"page\") || \"1\");\r\n    const skip = (page - 1) * limit;\r\n    const notifications = await prisma.notification.findMany({\r\n    return NextResponse.json(notifications);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/milestones",
      "file": "src\\app\\api\\milestones\\route.ts",
      "title": "List Milestones",
      "description": "Retrieve a list of milestoness",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "milestones"
      ],
      "summary": "Retrieve a list of milestoness",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n      return NextResponse.json(\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n      const column = await prisma.taskColumn.findUnique({\r\n        return NextResponse.json(\r\n      const updatedBoard = await prisma.taskBoard.update({\r\n    const milestone = await prisma.milestone.create({\r\n    return NextResponse.json(milestone, { status: <cvv> });\r\n    return NextResponse.json(\r\nexport async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const url = new URL(request.url);\r\n    const boardId = url.searchParams.get('boardId');\r\n    const workspaceId = url.searchParams.get('workspaceId');\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/milestones",
      "file": "src\\app\\api\\milestones\\route.ts",
      "title": "Create Milestones",
      "description": "Create a new milestones",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "title field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "status": {
              "type": "string",
              "description": "status field"
            },
            "startDate": {
              "type": "string",
              "description": "startDate field"
            },
            "dueDate": {
              "type": "string",
              "description": "dueDate field"
            },
            "assigneeId": {
              "type": "string",
              "description": "assigneeId field"
            },
            "reporterId": {
              "type": "string",
              "description": "reporterId field"
            },
            "taskBoardId": {
              "type": "string",
              "description": "taskBoardId field"
            },
            "workspaceId": {
              "type": "string",
              "description": "workspaceId field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "columnId": {
              "type": "string",
              "description": "columnId field"
            },
            "issueKey": {
              "type": "string",
              "description": "issueKey field"
            },
            "labels": {
              "type": "string",
              "description": "labels field"
            },
            "": {
              "type": "string",
              "description": " field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "title": "string",
          "description": "string",
          "status": "string",
          "startDate": "string",
          "dueDate": "string",
          "assigneeId": "string",
          "reporterId": "string",
          "taskBoardId": "string",
          "workspaceId": "string",
          "color": "string",
          "columnId": "string",
          "issueKey": "string",
          "labels": "string",
          "": "string"
        },
        "required": [
          "title",
          "status",
          "startDate",
          "dueDate",
          "assigneeId",
          "reporterId",
          "taskBoardId",
          "workspaceId",
          "color",
          "columnId",
          "issueKey",
          "labels"
        ]
      },
      "tags": [
        "milestones"
      ],
      "summary": "Create a new milestones",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n      return NextResponse.json(\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n      const column = await prisma.taskColumn.findUnique({\r\n        return NextResponse.json(\r\n      const updatedBoard = await prisma.taskBoard.update({\r\n    const milestone = await prisma.milestone.create({\r\n    return NextResponse.json(milestone, { status: <cvv> });\r\n    return NextResponse.json(\r\nexport async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const url = new URL(request.url);\r\n    const boardId = url.searchParams.get('boardId');\r\n    const workspaceId = url.searchParams.get('workspaceId');\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/mentions",
      "file": "src\\app\\api\\mentions\\route.ts",
      "title": "Create Mentions",
      "description": "Create a new mentions",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "mentions"
      ],
      "summary": "Create a new mentions",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Validation schema for mention requests\r\nconst mentionSchema = z.object({\r\nexport async function POST(req: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    // Validate request body\r\n    const body = await req.json();\r\n    const validationResult = mentionSchema.safeParse(body);\r\n      return NextResponse.json(\r\n        { error: \"Invalid request data\", details: validationResult.error.format() },\r\n    const { userIds, sourceType, sourceId, content } = validationResult.data;\r\n    const sanitizedContent = sanitizeHtmlToPlainText(content);\r\n    const recipientIds = userIds.filter((id) => id !== currentUser.id);\r\n      const taskComment = await prisma.taskComment.findUnique({\r\n    const notificationCount = await NotificationService.notifyUsers(\r\n    return NextResponse.json({\r\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/issues",
      "file": "src\\app\\api\\issues\\route.ts",
      "title": "List Issues",
      "description": "Retrieve a list of issuess",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_21dax70k9",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.624Z",
              "taskBoardId": "board_9ap40w2gc",
              "columnId": "column_gzf0rm5n8",
              "workspaceId": "ws_i2lljnn1k",
              "storyId": "story_h1cmnis6t",
              "reporterId": "user_yrm44qj7a",
              "assigneeId": "user_e04zare39",
              "createdAt": "2025-09-24T11:27:05.624Z",
              "updatedAt": "2025-09-24T11:27:05.624Z"
            },
            {
              "id": "issue_p71rafq7f",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.624Z",
              "taskBoardId": "board_5mr9yydwf",
              "columnId": "column_zpzmg2l81",
              "workspaceId": "ws_3klf4sest",
              "storyId": "story_80lmtvlp1",
              "reporterId": "user_ofxzy7rtf",
              "assigneeId": "user_c1phpq5cf",
              "createdAt": "2025-09-23T11:27:05.624Z",
              "updatedAt": "2025-09-24T11:27:05.624Z"
            }
          ],
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve a list of issuess",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const LIST_INCLUDE = {\r\n} as const;\r\nexport async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get('workspaceId');\r\n    const projectIds = searchParams.get('projectIds')?.split(',').filter(Boolean);\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const whereClause: any = {\r\n    const issues = await prisma.issue.findMany({\r\n    return NextResponse.json({ issues }, { status: <cvv> });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const body = await request.json();\r\n    const {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/issues",
      "file": "src\\app\\api\\issues\\route.ts",
      "title": "Create Issues",
      "description": "Create a new issues",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_w4d7bdlhq",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.625Z",
              "taskBoardId": "board_51mt0gum3",
              "columnId": "column_tm9qtbqmw",
              "workspaceId": "ws_xdmhvd3rl",
              "storyId": "story_gonxgrxlc",
              "reporterId": "user_uwqcrfts7",
              "assigneeId": "user_wlbmc5ign",
              "createdAt": "2025-09-24T11:27:05.625Z",
              "updatedAt": "2025-09-24T11:27:05.625Z"
            },
            {
              "id": "issue_ba63e68yb",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.625Z",
              "taskBoardId": "board_rt8qfmgxs",
              "columnId": "column_ji8ypzewl",
              "workspaceId": "ws_4grcum2yf",
              "storyId": "story_uytd7qqot",
              "reporterId": "user_1pt2iagpm",
              "assigneeId": "user_er3q2n73y",
              "createdAt": "2025-09-23T11:27:05.625Z",
              "updatedAt": "2025-09-24T11:27:05.625Z"
            }
          ],
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "title field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "type = 'TASK'": {
              "type": "string",
              "description": "type = 'TASK' field"
            },
            "status": {
              "type": "string",
              "description": "status field"
            },
            "priority = 'MEDIUM'": {
              "type": "string",
              "description": "priority = 'MEDIUM' field"
            },
            "projectId": {
              "type": "string",
              "description": "projectId field"
            },
            "workspaceId": {
              "type": "string",
              "description": "workspaceId field"
            },
            "assigneeId": {
              "type": "string",
              "description": "assigneeId field"
            },
            "reporterId": {
              "type": "string",
              "description": "reporterId field"
            },
            "labels = []": {
              "type": "string",
              "description": "labels = [] field"
            },
            "dueDate": {
              "type": "string",
              "description": "dueDate field"
            },
            "parentId": {
              "type": "string",
              "description": "parentId field"
            },
            "": {
              "type": "string",
              "description": " field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "title": "string",
          "description": "string",
          "type = 'TASK'": "string",
          "status": "string",
          "priority = 'MEDIUM'": "string",
          "projectId": "string",
          "workspaceId": "string",
          "assigneeId": "string",
          "reporterId": "string",
          "labels = []": "string",
          "dueDate": "string",
          "parentId": "string",
          "": "string"
        },
        "required": [
          "title",
          "type = 'TASK'",
          "status",
          "priority = 'MEDIUM'",
          "projectId",
          "workspaceId",
          "assigneeId",
          "reporterId",
          "labels = []",
          "dueDate",
          "parentId"
        ]
      },
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const LIST_INCLUDE = {\r\n} as const;\r\nexport async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get('workspaceId');\r\n    const projectIds = searchParams.get('projectIds')?.split(',').filter(Boolean);\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const whereClause: any = {\r\n    const issues = await prisma.issue.findMany({\r\n    return NextResponse.json({ issues }, { status: <cvv> });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const body = await request.json();\r\n    const {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/features",
      "file": "src\\app\\api\\features\\route.ts",
      "title": "List Features",
      "description": "Retrieve a list of featuress",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "features"
      ],
      "summary": "Retrieve a list of featuress",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const featureRequestSchema = z.object({\r\nconst getFeatureRequestsParamsSchema = z.object({\r\n// GET handler for fetching feature requests\r\nexport async function GET(req: NextRequest) {\r\n    const url = new URL(req.url);\r\n    const status = url.searchParams.get(\"status\");\r\n    const orderBy = url.searchParams.get(\"orderBy\");\r\n    const pageParam = url.searchParams.get(\"page\");\r\n    const limitParam = url.searchParams.get(\"limit\");\r\n    const validated = getFeatureRequestsParamsSchema.safeParse({\r\n      return NextResponse.json({ \r\n    const { status: validatedStatus, orderBy: validatedOrderBy, page = 1, limit = 10 } = validated.data;\r\n    const where = validatedStatus && validatedStatus !== \"all\"\r\n    // Fetch all feature requests that match the filter\r\n    const allFeatureRequests = await prisma.featureRequest.findMany({\r\n    // Calculate vote score for each request from included votes\r\n    const formattedFeatureRequests = allFeatureRequests.map((request) => {\r\n      request.votes.forEach(vote => {\r\n      const { ...rest } = request;\r\n      return {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/features",
      "file": "src\\app\\api\\features\\route.ts",
      "title": "Create Features",
      "description": "Create a new features",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "features"
      ],
      "summary": "Create a new features",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const featureRequestSchema = z.object({\r\nconst getFeatureRequestsParamsSchema = z.object({\r\n// GET handler for fetching feature requests\r\nexport async function GET(req: NextRequest) {\r\n    const url = new URL(req.url);\r\n    const status = url.searchParams.get(\"status\");\r\n    const orderBy = url.searchParams.get(\"orderBy\");\r\n    const pageParam = url.searchParams.get(\"page\");\r\n    const limitParam = url.searchParams.get(\"limit\");\r\n    const validated = getFeatureRequestsParamsSchema.safeParse({\r\n      return NextResponse.json({ \r\n    const { status: validatedStatus, orderBy: validatedOrderBy, page = 1, limit = 10 } = validated.data;\r\n    const where = validatedStatus && validatedStatus !== \"all\"\r\n    // Fetch all feature requests that match the filter\r\n    const allFeatureRequests = await prisma.featureRequest.findMany({\r\n    // Calculate vote score for each request from included votes\r\n    const formattedFeatureRequests = allFeatureRequests.map((request) => {\r\n      request.votes.forEach(vote => {\r\n      const { ...rest } = request;\r\n      return {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/epics",
      "file": "src\\app\\api\\epics\\route.ts",
      "title": "List Epics",
      "description": "Retrieve a list of epicss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "epics"
      ],
      "summary": "Retrieve a list of epicss",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n      return NextResponse.json(\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n      const column = await prisma.taskColumn.findUnique({\r\n        return NextResponse.json(\r\n      const updatedBoard = await prisma.taskBoard.update({\r\n    const epic = await prisma.epic.create({\r\n          relatedItemType: 'MILESTONE' as const\r\n    return NextResponse.json(epic, { status: <cvv> });\r\n    return NextResponse.json(\r\nexport async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const url = new URL(request.url);\r\n    const boardId = url.searchParams.get('boardId');\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/epics",
      "file": "src\\app\\api\\epics\\route.ts",
      "title": "Create Epics",
      "description": "Create a new epics",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "title field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "status": {
              "type": "string",
              "description": "status field"
            },
            "priority": {
              "type": "string",
              "description": "priority field"
            },
            "startDate": {
              "type": "string",
              "description": "startDate field"
            },
            "dueDate": {
              "type": "string",
              "description": "dueDate field"
            },
            "milestoneId": {
              "type": "string",
              "description": "milestoneId field"
            },
            "assigneeId": {
              "type": "string",
              "description": "assigneeId field"
            },
            "reporterId": {
              "type": "string",
              "description": "reporterId field"
            },
            "taskBoardId": {
              "type": "string",
              "description": "taskBoardId field"
            },
            "workspaceId": {
              "type": "string",
              "description": "workspaceId field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "columnId": {
              "type": "string",
              "description": "columnId field"
            },
            "labels": {
              "type": "string",
              "description": "labels field"
            },
            "": {
              "type": "string",
              "description": " field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "title": "string",
          "description": "string",
          "status": "string",
          "priority": "string",
          "startDate": "string",
          "dueDate": "string",
          "milestoneId": "string",
          "assigneeId": "string",
          "reporterId": "string",
          "taskBoardId": "string",
          "workspaceId": "string",
          "color": "string",
          "columnId": "string",
          "labels": "string",
          "": "string"
        },
        "required": [
          "title",
          "status",
          "priority",
          "startDate",
          "dueDate",
          "milestoneId",
          "assigneeId",
          "reporterId",
          "taskBoardId",
          "workspaceId",
          "color",
          "columnId",
          "labels"
        ]
      },
      "tags": [
        "epics"
      ],
      "summary": "Create a new epics",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n      return NextResponse.json(\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n      const column = await prisma.taskColumn.findUnique({\r\n        return NextResponse.json(\r\n      const updatedBoard = await prisma.taskBoard.update({\r\n    const epic = await prisma.epic.create({\r\n          relatedItemType: 'MILESTONE' as const\r\n    return NextResponse.json(epic, { status: <cvv> });\r\n    return NextResponse.json(\r\nexport async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const url = new URL(request.url);\r\n    const boardId = url.searchParams.get('boardId');\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/create-personal-workspace",
      "file": "src\\app\\api\\create-personal-workspace\\route.ts",
      "title": "Create Create-personal-workspace",
      "description": "Create a new create-personal-workspace",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "userId field"
            },
            "userName": {
              "type": "string",
              "description": "userName field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "userId": "string",
          "userName": "string"
        },
        "required": [
          "userId",
          "userName"
        ]
      },
      "tags": [
        "create-personal-workspace"
      ],
      "summary": "Create a new create-personal-workspace",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport async function POST(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const { userId, userName } = body;\r\n      return NextResponse.json(\r\n    const hasExistingWorkspace = await userHasWorkspace(userId);\r\n      return NextResponse.json(\r\n    const result = await createPersonalWorkspaceForUser(userId, userName || 'User');\r\n    const cookieStore = await cookies();\r\n    return NextResponse.json({\r\n        return NextResponse.json<phone>return NextResponse.json(\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/chat-token",
      "file": "src\\app\\api\\chat-token\\route.ts",
      "title": "Create Chat-token",
      "description": "Create a new chat-token",
      "parameters": [
        {
          "name": "body",
          "type": "object",
          "required": true,
          "location": "body",
          "description": "Request body"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "externalUserId": {
              "type": "string",
              "description": "externalUserId field"
            },
            "name": {
              "type": "string",
              "description": "name field"
            },
            "email": {
              "type": "string",
              "description": "email field"
            },
            "avatar": {
              "type": "string",
              "description": "avatar field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "externalUserId": "string",
          "name": "string",
          "email": "string",
          "avatar": "string"
        },
        "required": [
          "externalUserId",
          "name",
          "email"
        ]
      },
      "tags": [
        "chat-token"
      ],
      "summary": "Create a new chat-token",
      "authentication": {
        "type": "api-key",
        "required": true,
        "description": "API key authentication required. Include X-API-Key header with your request.",
        "headerName": "X-API-Key",
        "headerFormat": "<your-api-key>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Create a new chat-token\nconst response = await fetch('http://localhost:3000/api/chat-token', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer <token>'\n  },\n  body: JSON.stringify(data)\n});\n\nif (response.ok) {\n  const data = await response.json();\n  return data;\n} else {\n  throw new Error(`API Error: ${response.status}`);\n}"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/conversations",
      "file": "src\\app\\api\\conversations\\route.ts",
      "title": "List Conversations",
      "description": "Retrieve a list of conversationss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "conversations"
      ],
      "summary": "Retrieve a list of conversationss",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET() {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const conversations = await prisma.conversation.findMany({\r\n    const conversationsWithUnreadCount = await Promise.all(\r\n      conversations.map(async (conversation) => {\r\n        const unreadCount = await prisma.message.count({\r\n        return {\r\n    return NextResponse.json(conversationsWithUnreadCount);\r\n    return NextResponse.json({ error: 'Failed to fetch conversations' }, { status: <cvv> });\r\n// Create a new conversation or return existing one\r\nexport async function POST(request: Request) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const body = await request.json();\r\n    const { userId } = body;\r\n      return NextResponse.json({ error: 'User ID is required' }, { status: <cvv> });\r\n    const recipient = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const existingConversation = await prisma.conversation.findFirst({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/conversations",
      "file": "src\\app\\api\\conversations\\route.ts",
      "title": "Create Conversations",
      "description": "Create a new conversations",
      "parameters": [
        {
          "name": "body",
          "type": "object",
          "required": true,
          "location": "body",
          "description": "Request body"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "userId field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "userId": "string"
        },
        "required": [
          "userId"
        ]
      },
      "tags": [
        "conversations"
      ],
      "summary": "Create a new conversations",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET() {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const conversations = await prisma.conversation.findMany({\r\n    const conversationsWithUnreadCount = await Promise.all(\r\n      conversations.map(async (conversation) => {\r\n        const unreadCount = await prisma.message.count({\r\n        return {\r\n    return NextResponse.json(conversationsWithUnreadCount);\r\n    return NextResponse.json({ error: 'Failed to fetch conversations' }, { status: <cvv> });\r\n// Create a new conversation or return existing one\r\nexport async function POST(request: Request) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const body = await request.json();\r\n    const { userId } = body;\r\n      return NextResponse.json({ error: 'User ID is required' }, { status: <cvv> });\r\n    const recipient = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const existingConversation = await prisma.conversation.findFirst({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/views/{viewId}",
      "file": "src\\app\\api\\views\\[viewId]\\route.ts",
      "title": "Get Views {viewId}",
      "description": "Retrieve views {viewid} information",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "views"
      ],
      "summary": "Retrieve views {viewid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { viewId: viewSlug } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get('workspaceId');\r\n      return NextResponse.json({ error: 'Workspace ID is required' }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: 'View not found' }, { status: <cvv> });\r\n    const transformedView = {\r\n    return NextResponse.json({ view: transformedView });\r\n    return NextResponse.json(\r\nexport async function PUT(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { viewId: viewSlug } = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PUT",
      "url": "/api/views/{viewId}",
      "file": "src\\app\\api\\views\\[viewId]\\route.ts",
      "title": "Update Views {viewId}",
      "description": "Update an existing views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "displayType": {
              "type": "string",
              "description": "displayType field"
            },
            "visibility": {
              "type": "string",
              "description": "visibility field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "filters": {
              "type": "string",
              "description": "filters field"
            },
            "sorting": {
              "type": "string",
              "description": "sorting field"
            },
            "grouping": {
              "type": "string",
              "description": "grouping field"
            },
            "fields": {
              "type": "string",
              "description": "fields field"
            },
            "layout": {
              "type": "string",
              "description": "layout field"
            },
            "projectIds": {
              "type": "string",
              "description": "projectIds field"
            },
            "workspaceIds": {
              "type": "string",
              "description": "workspaceIds field"
            },
            "sharedWith": {
              "type": "string",
              "description": "sharedWith field"
            }
          },
          "required": []
        },
        "description": "Request body for PUT updating resource",
        "example": {
          "name": "string",
          "description": "string",
          "displayType": "string",
          "visibility": "string",
          "color": "string",
          "filters": "string",
          "sorting": "string",
          "grouping": "string",
          "fields": "string",
          "layout": "string",
          "projectIds": "string",
          "workspaceIds": "string",
          "sharedWith": "string"
        },
        "required": [
          "name",
          "displayType",
          "visibility",
          "color",
          "filters",
          "sorting",
          "grouping",
          "fields",
          "layout",
          "projectIds",
          "workspaceIds",
          "sharedWith"
        ]
      },
      "tags": [
        "views"
      ],
      "summary": "Update an existing views {viewid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { viewId: viewSlug } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get('workspaceId');\r\n      return NextResponse.json({ error: 'Workspace ID is required' }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: 'View not found' }, { status: <cvv> });\r\n    const transformedView = {\r\n    return NextResponse.json({ view: transformedView });\r\n    return NextResponse.json(\r\nexport async function PUT(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { viewId: viewSlug } = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/views/{viewId}",
      "file": "src\\app\\api\\views\\[viewId]\\route.ts",
      "title": "Delete Views {viewId}",
      "description": "Remove a views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "displayType": {
              "type": "string",
              "description": "displayType field"
            },
            "visibility": {
              "type": "string",
              "description": "visibility field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "filters": {
              "type": "string",
              "description": "filters field"
            },
            "sorting": {
              "type": "string",
              "description": "sorting field"
            },
            "grouping": {
              "type": "string",
              "description": "grouping field"
            },
            "fields": {
              "type": "string",
              "description": "fields field"
            },
            "layout": {
              "type": "string",
              "description": "layout field"
            },
            "projectIds": {
              "type": "string",
              "description": "projectIds field"
            },
            "workspaceIds": {
              "type": "string",
              "description": "workspaceIds field"
            },
            "sharedWith": {
              "type": "string",
              "description": "sharedWith field"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "name": "string",
          "description": "string",
          "displayType": "string",
          "visibility": "string",
          "color": "string",
          "filters": "string",
          "sorting": "string",
          "grouping": "string",
          "fields": "string",
          "layout": "string",
          "projectIds": "string",
          "workspaceIds": "string",
          "sharedWith": "string"
        },
        "required": [
          "name",
          "displayType",
          "visibility",
          "color",
          "filters",
          "sorting",
          "grouping",
          "fields",
          "layout",
          "projectIds",
          "workspaceIds",
          "sharedWith"
        ]
      },
      "tags": [
        "views"
      ],
      "summary": "Remove a views {viewid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { viewId: viewSlug } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get('workspaceId');\r\n      return NextResponse.json({ error: 'Workspace ID is required' }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: 'View not found' }, { status: <cvv> });\r\n    const transformedView = {\r\n    return NextResponse.json({ view: transformedView });\r\n    return NextResponse.json(\r\nexport async function PUT(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { viewId: viewSlug } = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\route.ts",
      "title": "Get Workspaces {workspaceId}",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n      return NextResponse.json(\r\n    const isMember = workspace.ownerId === session.user.id ||\r\n      return NextResponse.json(\r\n    return NextResponse.json(workspace);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const body = await request.json();\r\n    const { name, description, logoUrl } = body;\r\n    const workspace = await prisma.workspace.findUnique({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\route.ts",
      "title": "Delete Workspaces {workspaceId}",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "logoUrl": {
              "type": "string",
              "description": "logoUrl field"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "name": "string",
          "description": "string",
          "logoUrl": "string"
        },
        "required": [
          "name",
          "logoUrl"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n      return NextResponse.json(\r\n    const isMember = workspace.ownerId === session.user.id ||\r\n      return NextResponse.json(\r\n    return NextResponse.json(workspace);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const body = await request.json();\r\n    const { name, description, logoUrl } = body;\r\n    const workspace = await prisma.workspace.findUnique({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/workspaces/{workspaceId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\route.ts",
      "title": "Update Workspaces {workspaceId}",
      "description": "Partially update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "logoUrl": {
              "type": "string",
              "description": "logoUrl field"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "name": "string",
          "description": "string",
          "logoUrl": "string"
        },
        "required": [
          "name",
          "logoUrl"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Partially update an existing workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n      return NextResponse.json(\r\n    const isMember = workspace.ownerId === session.user.id ||\r\n      return NextResponse.json(\r\n    return NextResponse.json(workspace);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const body = await request.json();\r\n    const { name, description, logoUrl } = body;\r\n    const workspace = await prisma.workspace.findUnique({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/invitations",
      "file": "src\\app\\api\\workspaces\\invitations\\route.ts",
      "title": "Get Workspaces Invitations",
      "description": "Retrieve workspaces invitations information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces invitations information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET() {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const pendingInvitations = await prisma.workspaceInvitation.findMany({\r\n    return NextResponse.json(pendingInvitations);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/users/search",
      "file": "src\\app\\api\\users\\search\\route.ts",
      "title": "Get Users Search",
      "description": "Retrieve users search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "users"
      ],
      "summary": "Retrieve users search information",
      "authentication": {
        "type": "basic",
        "required": true,
        "description": "Basic authentication required.",
        "headerName": "Authorization",
        "headerFormat": "Basic <base64-encoded-credentials>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(req: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const query = url.searchParams.get(\"q\");\r\n    // If no query provided, we'll return all users (with limit)\r\n    const searchQuery = query?.trim() || \"\";\r\n    const workspaceId = url.searchParams.get(\"workspace\");\r\n      const workspace = await prisma.workspace.findFirst({\r\n        return NextResponse.json([], { status: <cvv> }); // Return empty array if workspace not found or no access\r\n      const whereCondition: any = {\r\n      const whereCondition: any = {\r\n    return NextResponse.json(users);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/users/me",
      "file": "src\\app\\api\\users\\me\\route.ts",
      "title": "Get Users Me",
      "description": "Retrieve users me information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "users"
      ],
      "summary": "Retrieve users me information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET() {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const user = await prisma.user.findUnique({\r\n    return NextResponse.json(user);\r\n    return NextResponse.json(\r\nexport async function PATCH(request: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n    const validFields: any = {};\r\n    const updatedUser = await prisma.user.update({\r\n    return NextResponse.json(updatedUser);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/users/me",
      "file": "src\\app\\api\\users\\me\\route.ts",
      "title": "Update Users Me",
      "description": "Partially update an existing users me",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "team": {
              "type": "string",
              "description": "team field"
            },
            "currentFocus": {
              "type": "string",
              "description": "currentFocus field"
            },
            "expertise": {
              "type": "string",
              "description": "expertise field"
            },
            "": {
              "type": "string",
              "description": " field"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "name": "string",
          "team": "string",
          "currentFocus": "string",
          "expertise": "string",
          "": "string"
        },
        "required": [
          "name",
          "team",
          "currentFocus",
          "expertise"
        ]
      },
      "tags": [
        "users"
      ],
      "summary": "Partially update an existing users me",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET() {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const user = await prisma.user.findUnique({\r\n    return NextResponse.json(user);\r\n    return NextResponse.json(\r\nexport async function PATCH(request: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const body = await request.json();\r\n    const {\r\n    const validFields: any = {};\r\n    const updatedUser = await prisma.user.update({\r\n    return NextResponse.json(updatedUser);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/users/lookup",
      "file": "src\\app\\api\\users\\lookup\\route.ts",
      "title": "Create Users Lookup",
      "description": "Create a new users lookup",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "users"
      ],
      "summary": "Create a new users lookup",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const userLookupSchema = z.object({\r\nexport async function POST(req: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    // Validate request body\r\n    const body = await req.json();\r\n    const validationResult = userLookupSchema.safeParse(body);\r\n      return NextResponse.json(\r\n        { error: \"Invalid request data\", details: validationResult.error.format() },\r\n    const { usernames, workspaceId } = validationResult.data;\r\n    const users = await prisma.user.findMany({\r\n    return NextResponse.json(users);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/user/profile",
      "file": "src\\app\\api\\user\\profile\\route.ts",
      "title": "Update User Profile",
      "description": "Partially update an existing user profile",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "team": {
              "type": "string",
              "description": "team field"
            },
            "currentFocus": {
              "type": "string",
              "description": "currentFocus field"
            },
            "expertise": {
              "type": "string",
              "description": "expertise field"
            },
            "slackId": {
              "type": "string",
              "description": "slackId field"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "name": "string",
          "team": "string",
          "currentFocus": "string",
          "expertise": "string",
          "slackId": "string"
        },
        "required": [
          "name",
          "team",
          "currentFocus",
          "expertise",
          "slackId"
        ]
      },
      "tags": [
        "user"
      ],
      "summary": "Partially update an existing user profile",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(req: Request) {\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const body = await req.json();\r\n    const { name, team, currentFocus, expertise, slackId } = body;\r\n      return new NextResponse(\"Invalid name\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid team\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid currentFocus\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid expertise\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid slackId\", { status: <cvv> });\r\n    const updatedUser = await prisma.user.upsert({\r\n    return NextResponse.json({\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/user/notification-preferences",
      "file": "src\\app\\api\\user\\notification-preferences\\route.ts",
      "title": "Get User Notification-preferences",
      "description": "Retrieve user notification-preferences information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "user"
      ],
      "summary": "Retrieve user notification-preferences information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const DEFAULT_PREFERENCES = {\r\nexport async function GET() {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n        // If creation fails, return default preferences without saving<phone>return NextResponse.json({\r\n    return NextResponse.json(preferences);\r\n    return NextResponse.json(\r\nexport async function PATCH(req: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const body = await req.json();\r\n    const allowedFields = [\r\n    const updateData: any = {};\r\n    for (const field of allowedFields) {\r\n      return NextResponse.json(\r\n    const preferences = await prisma.notificationPreferences.upsert({\r\n    return NextResponse.json(preferences);\r\n    return NextResponse.json(\r\nexport async function POST(req: NextRequest) {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/user/notification-preferences",
      "file": "src\\app\\api\\user\\notification-preferences\\route.ts",
      "title": "Create User Notification-preferences",
      "description": "Create a new user notification-preferences",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "user"
      ],
      "summary": "Create a new user notification-preferences",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const DEFAULT_PREFERENCES = {\r\nexport async function GET() {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n        // If creation fails, return default preferences without saving<phone>return NextResponse.json({\r\n    return NextResponse.json(preferences);\r\n    return NextResponse.json(\r\nexport async function PATCH(req: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const body = await req.json();\r\n    const allowedFields = [\r\n    const updateData: any = {};\r\n    for (const field of allowedFields) {\r\n      return NextResponse.json(\r\n    const preferences = await prisma.notificationPreferences.upsert({\r\n    return NextResponse.json(preferences);\r\n    return NextResponse.json(\r\nexport async function POST(req: NextRequest) {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/user/notification-preferences",
      "file": "src\\app\\api\\user\\notification-preferences\\route.ts",
      "title": "Update User Notification-preferences",
      "description": "Partially update an existing user notification-preferences",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "user"
      ],
      "summary": "Partially update an existing user notification-preferences",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const DEFAULT_PREFERENCES = {\r\nexport async function GET() {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n        // If creation fails, return default preferences without saving<phone>return NextResponse.json({\r\n    return NextResponse.json(preferences);\r\n    return NextResponse.json(\r\nexport async function PATCH(req: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const body = await req.json();\r\n    const allowedFields = [\r\n    const updateData: any = {};\r\n    for (const field of allowedFields) {\r\n      return NextResponse.json(\r\n    const preferences = await prisma.notificationPreferences.upsert({\r\n    return NextResponse.json(preferences);\r\n    return NextResponse.json(\r\nexport async function POST(req: NextRequest) {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/user/me",
      "file": "src\\app\\api\\user\\me\\route.ts",
      "title": "Get User Me",
      "description": "Retrieve user me information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "user"
      ],
      "summary": "Retrieve user me information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET() {\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    return NextResponse.json({\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/user/avatar",
      "file": "src\\app\\api\\user\\avatar\\route.ts",
      "title": "Update User Avatar",
      "description": "Partially update an existing user avatar",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "avatarSkinTone": {
              "type": "string",
              "description": "avatarSkinTone field"
            },
            "avatarEyes": {
              "type": "string",
              "description": "avatarEyes field"
            },
            "avatarBrows": {
              "type": "string",
              "description": "avatarBrows field"
            },
            "avatarMouth": {
              "type": "string",
              "description": "avatarMouth field"
            },
            "avatarNose": {
              "type": "string",
              "description": "avatarNose field"
            },
            "avatarHair": {
              "type": "string",
              "description": "avatarHair field"
            },
            "avatarEyewear": {
              "type": "string",
              "description": "avatarEyewear field"
            },
            "avatarAccessory": {
              "type": "string",
              "description": "avatarAccessory field"
            },
            "useCustomAvatar": {
              "type": "string",
              "description": "useCustomAvatar field"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "avatarSkinTone": "string",
          "avatarEyes": "string",
          "avatarBrows": "string",
          "avatarMouth": "string",
          "avatarNose": "string",
          "avatarHair": "string",
          "avatarEyewear": "string",
          "avatarAccessory": "string",
          "useCustomAvatar": "string"
        },
        "required": [
          "avatarSkinTone",
          "avatarEyes",
          "avatarBrows",
          "avatarMouth",
          "avatarNose",
          "avatarHair",
          "avatarEyewear",
          "avatarAccessory",
          "useCustomAvatar"
        ]
      },
      "tags": [
        "user"
      ],
      "summary": "Partially update an existing user avatar",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(req: Request) {\r\n    const session = await getServerSession(authOptions);\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const body = await req.json();\r\n    const { \r\n    const currentUser = await prisma.user.findUnique({\r\n      return new NextResponse(\"User not found\", { status: <cvv> });\r\n    const updatedUser = await prisma.user.update({\r\n    return NextResponse.json({\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/upload/profile-image",
      "file": "src\\app\\api\\upload\\profile-image\\route.ts",
      "title": "Create Upload Profile-image",
      "description": "API route handler for uploading profile images from URLs to Cloudinary",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "imageUrl": {
              "type": "string"
            },
            "filename": {
              "type": "string"
            },
            "userId": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "imageUrl": "sample_imageUrl",
          "filename": "John Doe",
          "userId": "123"
        }
      },
      "tags": [
        "upload"
      ],
      "summary": "API route handler for uploading profile images from URLs to Cloudinary",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": " * @returns Response with the uploaded image URL or an error\r\nexport async function POST(req: NextRequest) {\r\n    const { imageUrl, filename, userId } = await req.json();\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r\n    const result = await cloudinary.uploader.upload(imageUrl, {\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r\nexport const config = {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/upload/image",
      "file": "src\\app\\api\\upload\\image\\route.ts",
      "title": "Create Upload Image",
      "description": "API route handler for uploading images to Cloudinary",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "image": {
              "type": "string"
            },
            "filename": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "image": "sample_image",
          "filename": "John Doe"
        }
      },
      "tags": [
        "upload"
      ],
      "summary": "API route handler for uploading images to Cloudinary",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": " * @returns Response with the uploaded image URL or an error\r\nexport async function POST(req: NextRequest) {\r\n    const { image, filename } = await req.json();\r\n      return NextResponse.json(\r\n    const result = await cloudinary.uploader.upload(\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r\nexport const config = {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/timeline/posts",
      "file": "src\\app\\api\\timeline\\posts\\route.ts",
      "title": "Create Timeline Posts",
      "description": "Create a new timeline posts",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            },
            "workspaceId": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "content": "sample_content",
          "workspaceId": "123"
        }
      },
      "tags": [
        "timeline"
      ],
      "summary": "Create a new timeline posts",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(req: Request) {\r\n  const session = await getServerSession(authConfig);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const { content, workspaceId } = await req.json();\r\n    const sanitizedContent = sanitizeHtmlToPlainText(content || \"\");\r\n      return new NextResponse(\"Content is required\", { status: <cvv> });\r\n    const post = await prisma.post.create({\r\n    const mentionedUserIds = extractMentionUserIds((content || \"\").trim());\r\n    return NextResponse.json(post);\r\n    return new NextResponse(\"Internal Server Error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/search",
      "file": "src\\app\\api\\tasks\\search\\route.ts",
      "title": "Get Tasks Search",
      "description": "Retrieve tasks search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks search information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(req: NextRequest) {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const query = url.searchParams.get(\"q\");\r\n    // If no query provided, we'll return all tasks (with limit)\r\n    const searchQuery = query?.trim() || \"\";\r\n    const workspaceId = url.searchParams.get(\"workspace\");\r\n    const tasks = await prisma.task.findMany({\r\n    return NextResponse.json(tasks);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}",
      "file": "src\\app\\api\\tasks\\[taskId]\\route.ts",
      "title": "Get Tasks {taskId}",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const resolvedParams = await params;\r\n    const { taskId } = resolvedParams;\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(taskId);\r\n    const task = isIssueKey\r\n      return NextResponse.json(\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      const ownedWorkspaces = await prisma.workspace.findMany({\r\n      const memberWorkspaces = await prisma.workspaceMember.findMany({\r\n      const allUserWorkspaces = [\r\n      return NextResponse.json(\r\n    const transformedTask = {\r\n    return NextResponse.json(transformedTask);\r\n    return NextResponse.json(\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n    const session = await getAuthSession();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/tasks/{taskId}",
      "file": "src\\app\\api\\tasks\\[taskId]\\route.ts",
      "title": "Delete Tasks {taskId}",
      "description": "Remove a tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Remove a tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const resolvedParams = await params;\r\n    const { taskId } = resolvedParams;\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(taskId);\r\n    const task = isIssueKey\r\n      return NextResponse.json(\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      const ownedWorkspaces = await prisma.workspace.findMany({\r\n      const memberWorkspaces = await prisma.workspaceMember.findMany({\r\n      const allUserWorkspaces = [\r\n      return NextResponse.json(\r\n    const transformedTask = {\r\n    return NextResponse.json(transformedTask);\r\n    return NextResponse.json(\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n    const session = await getAuthSession();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/stories/{storyId}",
      "file": "src\\app\\api\\stories\\[storyId]\\route.ts",
      "title": "Get Stories {storyId}",
      "description": "Retrieve stories {storyid} information",
      "parameters": [
        {
          "name": "storyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: storyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "stories"
      ],
      "summary": "Retrieve stories {storyid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const storyPatchSchema = z.object({\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n// Helper function to resolve story ID from issue key or database ID\r\nasync function resolveStoryId(storyIdOrKey: string): Promise<string | null> {\r\n    return await resolveIssueKeyToId(storyIdOrKey, 'story');\r\n  return storyIdOrKey; // Already a database ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { storyId: storyIdParam } = _params;\r\n      return NextResponse.json({ error: \"Story ID is required\" }, { status: <cvv> });\r\n    const storyId = await resolveStoryId(storyIdParam);\r\n      return NextResponse.json({ error: \"Story not found\" }, { status: <cvv> });\r\n    const story = await prisma.story.findUnique({\r\n      return NextResponse.json({ error: \"Story not found\" }, { status: <cvv> });\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/stories/{storyId}",
      "file": "src\\app\\api\\stories\\[storyId]\\route.ts",
      "title": "Delete Stories {storyId}",
      "description": "Remove a stories {storyid}",
      "parameters": [
        {
          "name": "storyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: storyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for DELETE deleting resource",
        "example": {}
      },
      "tags": [
        "stories"
      ],
      "summary": "Remove a stories {storyid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const storyPatchSchema = z.object({\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n// Helper function to resolve story ID from issue key or database ID\r\nasync function resolveStoryId(storyIdOrKey: string): Promise<string | null> {\r\n    return await resolveIssueKeyToId(storyIdOrKey, 'story');\r\n  return storyIdOrKey; // Already a database ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { storyId: storyIdParam } = _params;\r\n      return NextResponse.json({ error: \"Story ID is required\" }, { status: <cvv> });\r\n    const storyId = await resolveStoryId(storyIdParam);\r\n      return NextResponse.json({ error: \"Story not found\" }, { status: <cvv> });\r\n    const story = await prisma.story.findUnique({\r\n      return NextResponse.json({ error: \"Story not found\" }, { status: <cvv> });\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/stories/{storyId}",
      "file": "src\\app\\api\\stories\\[storyId]\\route.ts",
      "title": "Update Stories {storyId}",
      "description": "Partially update an existing stories {storyid}",
      "parameters": [
        {
          "name": "storyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: storyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "stories"
      ],
      "summary": "Partially update an existing stories {storyid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const storyPatchSchema = z.object({\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n// Helper function to resolve story ID from issue key or database ID\r\nasync function resolveStoryId(storyIdOrKey: string): Promise<string | null> {\r\n    return await resolveIssueKeyToId(storyIdOrKey, 'story');\r\n  return storyIdOrKey; // Already a database ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { storyId: storyIdParam } = _params;\r\n      return NextResponse.json({ error: \"Story ID is required\" }, { status: <cvv> });\r\n    const storyId = await resolveStoryId(storyIdParam);\r\n      return NextResponse.json({ error: \"Story not found\" }, { status: <cvv> });\r\n    const story = await prisma.story.findUnique({\r\n      return NextResponse.json({ error: \"Story not found\" }, { status: <cvv> });\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/stories/search",
      "file": "src\\app\\api\\stories\\search\\route.ts",
      "title": "Get Stories Search",
      "description": "Retrieve stories search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "stories"
      ],
      "summary": "Retrieve stories search information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(req: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const query = url.searchParams.get('q') || '';\r\n    const workspace = url.searchParams.get('workspace');\r\n      return NextResponse.json({ error: 'Workspace parameter is required' }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Access denied' }, { status: <cvv> });\r\n    const stories = await prisma.story.findMany({\r\n    return NextResponse.json(stories);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/taskboards/{taskBoardId}",
      "file": "src\\app\\api\\taskboards\\[taskBoardId]\\route.ts",
      "title": "Get Taskboards {taskBoardId}",
      "description": "Retrieve taskboards {taskboardid} information",
      "parameters": [
        {
          "name": "taskBoardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskBoardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "taskboards"
      ],
      "summary": "Retrieve taskboards {taskboardid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const taskBoardId = params.taskBoardId;\r\n      return NextResponse.json(\r\n    const taskBoard = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json(\r\n    return NextResponse.json(taskBoard);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const taskBoardId = params.taskBoardId;\r\n      return NextResponse.json(\r\n    const body = await req.json();\r\n    const { name, description } = body;\r\n    const taskBoard = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/taskboards/{taskBoardId}",
      "file": "src\\app\\api\\taskboards\\[taskBoardId]\\route.ts",
      "title": "Delete Taskboards {taskBoardId}",
      "description": "Remove a taskboards {taskboardid}",
      "parameters": [
        {
          "name": "taskBoardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskBoardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "name": "string",
          "description": "string"
        },
        "required": [
          "name"
        ]
      },
      "tags": [
        "taskboards"
      ],
      "summary": "Remove a taskboards {taskboardid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const taskBoardId = params.taskBoardId;\r\n      return NextResponse.json(\r\n    const taskBoard = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json(\r\n    return NextResponse.json(taskBoard);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const taskBoardId = params.taskBoardId;\r\n      return NextResponse.json(\r\n    const body = await req.json();\r\n    const { name, description } = body;\r\n    const taskBoard = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/taskboards/{taskBoardId}",
      "file": "src\\app\\api\\taskboards\\[taskBoardId]\\route.ts",
      "title": "Update Taskboards {taskBoardId}",
      "description": "Partially update an existing taskboards {taskboardid}",
      "parameters": [
        {
          "name": "taskBoardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskBoardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "name": "string",
          "description": "string"
        },
        "required": [
          "name"
        ]
      },
      "tags": [
        "taskboards"
      ],
      "summary": "Partially update an existing taskboards {taskboardid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const taskBoardId = params.taskBoardId;\r\n      return NextResponse.json(\r\n    const taskBoard = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json(\r\n    return NextResponse.json(taskBoard);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const taskBoardId = params.taskBoardId;\r\n      return NextResponse.json(\r\n    const body = await req.json();\r\n    const { name, description } = body;\r\n    const taskBoard = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}",
      "file": "src\\app\\api\\posts\\[postId]\\route.ts",
      "title": "Get Posts {postId}",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "tags"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n    const post = await prisma.post.findUnique({\r\n      return new NextResponse(\"Post not found\", { status: <cvv> });\r\n    return NextResponse.json(post);\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function PATCH(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const _params = await params;\r\n    const { postId } = _params;\r\n    const body = await req.json();\r\n    const { message, type, tags, priority } = body;\r\n      return new NextResponse(\"Message is required\", { status: <cvv> });\r\n      return new NextResponse(\"Message is too long\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid post type\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid priority\", { status: <cvv> });\r\n    const existingPost = await prisma.post.findUnique({\r\n      return new NextResponse(\"Post not found\", { status: <cvv> });\r\n      return new NextResponse(\"Unauthorized to edit this post\", { status: <cvv> });\r\n    const tagsArray = Array.isArray(tags) ? tags : [];\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/posts/{postId}",
      "file": "src\\app\\api\\posts\\[postId]\\route.ts",
      "title": "Delete Posts {postId}",
      "description": "Remove a posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "message field"
            },
            "type": {
              "type": "string",
              "description": "type field"
            },
            "tags": {
              "type": "string",
              "description": "tags field"
            },
            "priority": {
              "type": "string",
              "description": "priority field"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "message": "string",
          "type": "string",
          "tags": "string",
          "priority": "string"
        },
        "required": [
          "message",
          "type",
          "priority"
        ]
      },
      "tags": [
        "posts"
      ],
      "summary": "Remove a posts {postid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n    const post = await prisma.post.findUnique({\r\n      return new NextResponse(\"Post not found\", { status: <cvv> });\r\n    return NextResponse.json(post);\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function PATCH(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const _params = await params;\r\n    const { postId } = _params;\r\n    const body = await req.json();\r\n    const { message, type, tags, priority } = body;\r\n      return new NextResponse(\"Message is required\", { status: <cvv> });\r\n      return new NextResponse(\"Message is too long\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid post type\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid priority\", { status: <cvv> });\r\n    const existingPost = await prisma.post.findUnique({\r\n      return new NextResponse(\"Post not found\", { status: <cvv> });\r\n      return new NextResponse(\"Unauthorized to edit this post\", { status: <cvv> });\r\n    const tagsArray = Array.isArray(tags) ? tags : [];\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/posts/{postId}",
      "file": "src\\app\\api\\posts\\[postId]\\route.ts",
      "title": "Update Posts {postId}",
      "description": "Partially update an existing posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "message field"
            },
            "type": {
              "type": "string",
              "description": "type field"
            },
            "tags": {
              "type": "string",
              "description": "tags field"
            },
            "priority": {
              "type": "string",
              "description": "priority field"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "message": "string",
          "type": "string",
          "tags": "string",
          "priority": "string"
        },
        "required": [
          "message",
          "type",
          "priority"
        ]
      },
      "tags": [
        "posts"
      ],
      "summary": "Partially update an existing posts {postid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n    const post = await prisma.post.findUnique({\r\n      return new NextResponse(\"Post not found\", { status: <cvv> });\r\n    return NextResponse.json(post);\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function PATCH(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const _params = await params;\r\n    const { postId } = _params;\r\n    const body = await req.json();\r\n    const { message, type, tags, priority } = body;\r\n      return new NextResponse(\"Message is required\", { status: <cvv> });\r\n      return new NextResponse(\"Message is too long\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid post type\", { status: <cvv> });\r\n      return new NextResponse(\"Invalid priority\", { status: <cvv> });\r\n    const existingPost = await prisma.post.findUnique({\r\n      return new NextResponse(\"Post not found\", { status: <cvv> });\r\n      return new NextResponse(\"Unauthorized to edit this post\", { status: <cvv> });\r\n    const tagsArray = Array.isArray(tags) ? tags : [];\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/notifications/{id}",
      "file": "src\\app\\api\\notifications\\[id]\\route.ts",
      "title": "Update Notifications {id}",
      "description": "Partially update an existing notifications {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "read": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "read": "sample_read"
        }
      },
      "tags": [
        "notifications"
      ],
      "summary": "Partially update an existing notifications {id}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n  const _params = await params;\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { id } = _params;\r\n    const { read } = await req.json();\r\n    const notification = await prisma.notification.findUnique({\r\n      return NextResponse.json(\r\n    const updatedNotification = await prisma.notification.update({\r\n    return NextResponse.json(updatedNotification);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/notes/{id}",
      "file": "src\\app\\api\\notes\\[id]\\route.ts",
      "title": "Get Notes {id}",
      "description": "Retrieve notes {id} information",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "tags"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "notes"
      ],
      "summary": "Retrieve notes {id} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { id } = await params;\r\n    const note = await prisma.note.findFirst({\r\n      return NextResponse.json({ error: \"Note not found\" }, { status: <cvv> });\r\n    return NextResponse.json(note);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { id } = await params;\r\n    const body = await request.json();\r\n    const { title, content, isPublic, isFavorite, tagIds } = body;\r\n    const existingNote = await prisma.note.findFirst({\r\n      return NextResponse.json({ error: \"Note not found\" }, { status: <cvv> });\r\n    const note = await prisma.note.update({\r\n    return NextResponse.json(note);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/notes/{id}",
      "file": "src\\app\\api\\notes\\[id]\\route.ts",
      "title": "Delete Notes {id}",
      "description": "Remove a notes {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "tags"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "title field"
            },
            "content": {
              "type": "string",
              "description": "content field"
            },
            "isPublic": {
              "type": "string",
              "description": "isPublic field"
            },
            "isFavorite": {
              "type": "string",
              "description": "isFavorite field"
            },
            "tagIds": {
              "type": "string",
              "description": "tagIds field"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "title": "string",
          "content": "string",
          "isPublic": "string",
          "isFavorite": "string",
          "tagIds": "string"
        },
        "required": [
          "title",
          "content",
          "isPublic",
          "isFavorite"
        ]
      },
      "tags": [
        "notes"
      ],
      "summary": "Remove a notes {id}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { id } = await params;\r\n    const note = await prisma.note.findFirst({\r\n      return NextResponse.json({ error: \"Note not found\" }, { status: <cvv> });\r\n    return NextResponse.json(note);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { id } = await params;\r\n    const body = await request.json();\r\n    const { title, content, isPublic, isFavorite, tagIds } = body;\r\n    const existingNote = await prisma.note.findFirst({\r\n      return NextResponse.json({ error: \"Note not found\" }, { status: <cvv> });\r\n    const note = await prisma.note.update({\r\n    return NextResponse.json(note);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/notes/{id}",
      "file": "src\\app\\api\\notes\\[id]\\route.ts",
      "title": "Update Notes {id}",
      "description": "Partially update an existing notes {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "tags"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "title field"
            },
            "content": {
              "type": "string",
              "description": "content field"
            },
            "isPublic": {
              "type": "string",
              "description": "isPublic field"
            },
            "isFavorite": {
              "type": "string",
              "description": "isFavorite field"
            },
            "tagIds": {
              "type": "string",
              "description": "tagIds field"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "title": "string",
          "content": "string",
          "isPublic": "string",
          "isFavorite": "string",
          "tagIds": "string"
        },
        "required": [
          "title",
          "content",
          "isPublic",
          "isFavorite"
        ]
      },
      "tags": [
        "notes"
      ],
      "summary": "Partially update an existing notes {id}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { id } = await params;\r\n    const note = await prisma.note.findFirst({\r\n      return NextResponse.json({ error: \"Note not found\" }, { status: <cvv> });\r\n    return NextResponse.json(note);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { id } = await params;\r\n    const body = await request.json();\r\n    const { title, content, isPublic, isFavorite, tagIds } = body;\r\n    const existingNote = await prisma.note.findFirst({\r\n      return NextResponse.json({ error: \"Note not found\" }, { status: <cvv> });\r\n    const note = await prisma.note.update({\r\n    return NextResponse.json(note);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/notifications/read-all",
      "file": "src\\app\\api\\notifications\\read-all\\route.ts",
      "title": "Create Notifications Read-all",
      "description": "Create a new notifications read-all",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "notifications"
      ],
      "summary": "Create a new notifications read-all",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST() {\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const result = await prisma.notification.updateMany({\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/notes/tags",
      "file": "src\\app\\api\\notes\\tags\\route.ts",
      "title": "Get Notes Tags",
      "description": "Retrieve notes tags information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "notes",
            "tags"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "notes"
      ],
      "summary": "Retrieve notes tags information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get(\"workspace\");\r\n    const where: any = {};\r\n    const tags = await prisma.noteTag.findMany({\r\n    return NextResponse.json(tags);\r\n    return NextResponse.json(\r\nexport async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const body = await request.json();\r\n    const { name, color, workspaceId } = body;\r\n      return NextResponse.json(\r\n    const tag = await prisma.noteTag.create({\r\n    return NextResponse.json(tag, { status: <cvv> });\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/notes/tags",
      "file": "src\\app\\api\\notes\\tags\\route.ts",
      "title": "Create Notes Tags",
      "description": "Create a new notes tags",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "workspaceId": {
              "type": "string",
              "description": "workspaceId field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "name": "string",
          "color": "string",
          "workspaceId": "string"
        },
        "required": [
          "name",
          "color",
          "workspaceId"
        ]
      },
      "tags": [
        "notes"
      ],
      "summary": "Create a new notes tags",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get(\"workspace\");\r\n    const where: any = {};\r\n    const tags = await prisma.noteTag.findMany({\r\n    return NextResponse.json(tags);\r\n    return NextResponse.json(\r\nexport async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const body = await request.json();\r\n    const { name, color, workspaceId } = body;\r\n      return NextResponse.json(\r\n    const tag = await prisma.noteTag.create({\r\n    return NextResponse.json(tag, { status: <cvv> });\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/milestones/{milestoneId}",
      "file": "src\\app\\api\\milestones\\[milestoneId]\\route.ts",
      "title": "Get Milestones {milestoneId}",
      "description": "Retrieve milestones {milestoneid} information",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: milestoneId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "milestones"
      ],
      "summary": "Retrieve milestones {milestoneid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const milestonePatchSchema = z.object({\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n// Helper function to resolve milestone ID from issue key or database ID\r\nasync function resolveMilestoneId(milestoneIdOrKey: string): Promise<string | null> {\r\n    return await resolveIssueKeyToId(milestoneIdOrKey, 'milestone');\r\n  return milestoneIdOrKey; // Already a database ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n  const _params = await params;\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { milestoneId: milestoneIdParam } = _params;\r\n      return NextResponse.json({ error: \"Milestone ID is required\" }, { status: <cvv> });\r\n    const milestoneId = await resolveMilestoneId(milestoneIdParam);\r\n      return NextResponse.json({ error: \"Milestone not found\" }, { status: <cvv> });\r\n    const milestone = await prisma.milestone.findUnique({\r\n      return NextResponse.json({ error: \"Milestone not found\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/milestones/{milestoneId}",
      "file": "src\\app\\api\\milestones\\[milestoneId]\\route.ts",
      "title": "Delete Milestones {milestoneId}",
      "description": "Remove a milestones {milestoneid}",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: milestoneId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for DELETE deleting resource",
        "example": {}
      },
      "tags": [
        "milestones"
      ],
      "summary": "Remove a milestones {milestoneid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const milestonePatchSchema = z.object({\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n// Helper function to resolve milestone ID from issue key or database ID\r\nasync function resolveMilestoneId(milestoneIdOrKey: string): Promise<string | null> {\r\n    return await resolveIssueKeyToId(milestoneIdOrKey, 'milestone');\r\n  return milestoneIdOrKey; // Already a database ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n  const _params = await params;\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { milestoneId: milestoneIdParam } = _params;\r\n      return NextResponse.json({ error: \"Milestone ID is required\" }, { status: <cvv> });\r\n    const milestoneId = await resolveMilestoneId(milestoneIdParam);\r\n      return NextResponse.json({ error: \"Milestone not found\" }, { status: <cvv> });\r\n    const milestone = await prisma.milestone.findUnique({\r\n      return NextResponse.json({ error: \"Milestone not found\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/milestones/{milestoneId}",
      "file": "src\\app\\api\\milestones\\[milestoneId]\\route.ts",
      "title": "Update Milestones {milestoneId}",
      "description": "Partially update an existing milestones {milestoneid}",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: milestoneId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "milestones"
      ],
      "summary": "Partially update an existing milestones {milestoneid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const milestonePatchSchema = z.object({\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n// Helper function to resolve milestone ID from issue key or database ID\r\nasync function resolveMilestoneId(milestoneIdOrKey: string): Promise<string | null> {\r\n    return await resolveIssueKeyToId(milestoneIdOrKey, 'milestone');\r\n  return milestoneIdOrKey; // Already a database ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n  const _params = await params;\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { milestoneId: milestoneIdParam } = _params;\r\n      return NextResponse.json({ error: \"Milestone ID is required\" }, { status: <cvv> });\r\n    const milestoneId = await resolveMilestoneId(milestoneIdParam);\r\n      return NextResponse.json({ error: \"Milestone not found\" }, { status: <cvv> });\r\n    const milestone = await prisma.milestone.findUnique({\r\n      return NextResponse.json({ error: \"Milestone not found\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/milestones/search",
      "file": "src\\app\\api\\milestones\\search\\route.ts",
      "title": "Get Milestones Search",
      "description": "Retrieve milestones search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "milestones"
      ],
      "summary": "Retrieve milestones search information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(req: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const query = url.searchParams.get('q') || '';\r\n    const workspace = url.searchParams.get('workspace');\r\n      return NextResponse.json({ error: 'Workspace parameter is required' }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Access denied' }, { status: <cvv> });\r\n    const milestones = await prisma.milestone.findMany({\r\n    return NextResponse.json(milestones);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/issues/{issueId}",
      "file": "src\\app\\api\\issues\\[issueId]\\route.ts",
      "title": "Get Issues {issueId}",
      "description": "Retrieve issues {issueid} information",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_w6d1wtctf",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.639Z",
              "taskBoardId": "board_aqskqjzlb",
              "columnId": "column_jolt0lmwn",
              "workspaceId": "ws_cdo1kitel",
              "storyId": "story_ha3q2tkmu",
              "reporterId": "user_f4qp4dnm3",
              "assigneeId": "user_a00obf0rg",
              "createdAt": "2025-09-24T11:27:05.639Z",
              "updatedAt": "2025-09-24T11:27:05.639Z"
            },
            {
              "id": "issue_y4gs99tpf",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.639Z",
              "taskBoardId": "board_rg27yxs1v",
              "columnId": "column_p1w9fhdgv",
              "workspaceId": "ws_k8wwh1ia8",
              "storyId": "story_jno25suh6",
              "reporterId": "user_8jfkfd8e7",
              "assigneeId": "user_7ghjr9z1n",
              "createdAt": "2025-09-23T11:27:05.639Z",
              "updatedAt": "2025-09-24T11:27:05.639Z"
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues {issueid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport const runtime = 'nodejs';\r\n// Shared helpers and constants to reduce duplication\r\nconst ISSUE_ID_REGEX = /^[A-Z]+[0-9]*-[A-Z]*\\d+$/;\r\nconst isIssueKeyFormat = (value: string) => ISSUE_ID_REGEX.test(value);\r\nconst ISSUE_INCLUDE = {\r\n    orderBy: { createdAt: 'asc' as const }\r\n} as const;\r\nasync function userHasWorkspaceAccess(userId: string, workspaceId: string) {\r\n  return prisma.workspace.findFirst({\r\nasync function findIssueByIdOrKey(idOrKey: string, workspaceId?: string) {\r\n    const whereClause: any = { issueKey: idOrKey };\r\n    return prisma.issue.findFirst({ where: whereClause });\r\n    return prisma.issue.findUnique({ where: { id: idOrKey } });\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { issueId } = await params;\r\n    const url = new URL(req.url);\r\n    const workspaceId = url.searchParams.get('workspaceId');\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PUT",
      "url": "/api/issues/{issueId}",
      "file": "src\\app\\api\\issues\\[issueId]\\route.ts",
      "title": "Update Issues {issueId}",
      "description": "Update an existing issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_san7xktvp",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.639Z",
              "taskBoardId": "board_xbnvdp769",
              "columnId": "column_owde75kjt",
              "workspaceId": "ws_1uwf94rrf",
              "storyId": "story_3odo16m5k",
              "reporterId": "user_z5rcs5xwb",
              "assigneeId": "user_5asznr6gt",
              "createdAt": "2025-09-24T11:27:05.639Z",
              "updatedAt": "2025-09-24T11:27:05.639Z"
            },
            {
              "id": "issue_syd4gurfc",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.639Z",
              "taskBoardId": "board_jb56dxyjs",
              "columnId": "column_281u2kzy5",
              "workspaceId": "ws_j4cadag5d",
              "storyId": "story_7if917t28",
              "reporterId": "user_oos3ktot8",
              "assigneeId": "user_0lgjw4nwb",
              "createdAt": "2025-09-23T11:27:05.639Z",
              "updatedAt": "2025-09-24T11:27:05.639Z"
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "issues"
      ],
      "summary": "Update an existing issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport const runtime = 'nodejs';\r\n// Shared helpers and constants to reduce duplication\r\nconst ISSUE_ID_REGEX = /^[A-Z]+[0-9]*-[A-Z]*\\d+$/;\r\nconst isIssueKeyFormat = (value: string) => ISSUE_ID_REGEX.test(value);\r\nconst ISSUE_INCLUDE = {\r\n    orderBy: { createdAt: 'asc' as const }\r\n} as const;\r\nasync function userHasWorkspaceAccess(userId: string, workspaceId: string) {\r\n  return prisma.workspace.findFirst({\r\nasync function findIssueByIdOrKey(idOrKey: string, workspaceId?: string) {\r\n    const whereClause: any = { issueKey: idOrKey };\r\n    return prisma.issue.findFirst({ where: whereClause });\r\n    return prisma.issue.findUnique({ where: { id: idOrKey } });\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { issueId } = await params;\r\n    const url = new URL(req.url);\r\n    const workspaceId = url.searchParams.get('workspaceId');\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/issues/{issueId}",
      "file": "src\\app\\api\\issues\\[issueId]\\route.ts",
      "title": "Delete Issues {issueId}",
      "description": "Remove a issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_hpqzzg5dr",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.640Z",
              "taskBoardId": "board_8rk4bf7v8",
              "columnId": "column_tdzdzymfr",
              "workspaceId": "ws_z8cosw4k3",
              "storyId": "story_css913wlm",
              "reporterId": "user_df0s1n2m3",
              "assigneeId": "user_wavpzqrah",
              "createdAt": "2025-09-24T11:27:05.640Z",
              "updatedAt": "2025-09-24T11:27:05.640Z"
            },
            {
              "id": "issue_ws4f31c7x",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.640Z",
              "taskBoardId": "board_36b9bbtp2",
              "columnId": "column_jq2rfgzda",
              "workspaceId": "ws_49sep9aay",
              "storyId": "story_ufrlkkdkf",
              "reporterId": "user_cg0u7myy5",
              "assigneeId": "user_6gw15o8ej",
              "createdAt": "2025-09-23T11:27:05.640Z",
              "updatedAt": "2025-09-24T11:27:05.640Z"
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for DELETE deleting resource",
        "example": {}
      },
      "tags": [
        "issues"
      ],
      "summary": "Remove a issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport const runtime = 'nodejs';\r\n// Shared helpers and constants to reduce duplication\r\nconst ISSUE_ID_REGEX = /^[A-Z]+[0-9]*-[A-Z]*\\d+$/;\r\nconst isIssueKeyFormat = (value: string) => ISSUE_ID_REGEX.test(value);\r\nconst ISSUE_INCLUDE = {\r\n    orderBy: { createdAt: 'asc' as const }\r\n} as const;\r\nasync function userHasWorkspaceAccess(userId: string, workspaceId: string) {\r\n  return prisma.workspace.findFirst({\r\nasync function findIssueByIdOrKey(idOrKey: string, workspaceId?: string) {\r\n    const whereClause: any = { issueKey: idOrKey };\r\n    return prisma.issue.findFirst({ where: whereClause });\r\n    return prisma.issue.findUnique({ where: { id: idOrKey } });\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { issueId } = await params;\r\n    const url = new URL(req.url);\r\n    const workspaceId = url.searchParams.get('workspaceId');\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/issues/search",
      "file": "src\\app\\api\\issues\\search\\route.ts",
      "title": "Get Issues Search",
      "description": "Retrieve issues search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues search information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const query = searchParams.get('q') || '';\r\n    const workspaceId = searchParams.get('workspace');\r\n    const types = searchParams.getAll('type'); // Can have multiple type filters\r\n    const projects = searchParams.getAll('project'); // Can have multiple project filters\r\n    const whereClause: any = {};\r\n      const workspace = await prisma.workspace.findFirst({\r\n        return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n      const accessibleWorkspaces = await prisma.workspace.findMany({\r\n      const includeClause = {\r\n      const exactIssueKeyMatches = await prisma.issue.findMany({\r\n      const currentCount = exactIssueKeyMatches.length + partialIssueKeyMatches.length;\r\n        const existingIds = [...exactIssueKeyMatches, ...partialIssueKeyMatches].map(issue => issue.id);\r\n      const finalCount = exactIssueKeyMatches.length + partialIssueKeyMatches.length + titleMatches.length;\r\n        const existingIds = [...exactIssueKeyMatches, ...partialIssueKeyMatches, ...titleMatches].map(issue => issue.id);\r\n    const transformedIssues = allIssues.map(issue => ({\r\n    return NextResponse.json(transformedIssues, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/slack/my-tasks",
      "file": "src\\app\\api\\slack\\my-tasks\\route.ts",
      "title": "Create Slack My-tasks",
      "description": "Create a new slack my-tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "tags": [
        "slack"
      ],
      "summary": "Create a new slack my-tasks",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "async function parseFormData(req: NextRequest): Promise<Record<string, string>> {\r\n    const text = await req.text();\r\n    const params = new URLSearchParams(text);\r\n    const result: Record<string, string> = {};\r\n    for (const [key, value] of params.entries()) {\r\n    return result;\r\nexport async function POST(req: NextRequest) {\r\n        const body = await parseFormData(req);\r\n        const slackUserId = body.user_id;\r\n        const userName = body.user_name;\r\n        const user = await prisma.user.findFirst({\r\n            return NextResponse.json({\r\n                response_type: 'ephemeral',\r\n        const tasks = await prisma.task.findMany({\r\n            return NextResponse.json({\r\n                response_type: 'ephemeral',\r\n        const inProgressTasks = tasks.filter(task =>\r\n        const taskList = tasks.map(task => {\r\n            const boardName = task.taskBoard?.name || 'Unknown Board';\r\n            const taskKey = task.issueKey || `#${task.id.slice(-6)}`;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/leave/requests",
      "file": "src\\app\\api\\leave\\requests\\route.ts",
      "title": "Get Leave Requests",
      "description": "GET /api/leave/requests?workspaceId=xxx - Get user's leave requests for a workspace",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "notes"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "leave"
      ],
      "summary": "GET /api/leave/requests?workspaceId=xxx - Get user's leave requests for a workspace",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Validation schema for creating a leave request\r\nconst createLeaveRequestSchema = z.object({\r\n * GET /api/leave/requests?workspaceId=xxx - Get user's leave requests for a workspace\r\nexport async function GET(req: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const workspaceId = url.searchParams.get(\"workspaceId\");\r\n      return NextResponse.json(\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json(\r\n    const isOwner = workspace.ownerId === user.id;\r\n    const isMember = workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    const leaveRequests = await prisma.leaveRequest.findMany({\r\n    return NextResponse.json(leaveRequests);\r\n    console.error(\"Error fetching leave requests:\", error);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/leave/requests",
      "file": "src\\app\\api\\leave\\requests\\route.ts",
      "title": "Create Leave Requests",
      "description": "POST /api/leave/requests - Create a new leave request",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "notes"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "POST /api/leave/requests - Create a new leave request",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Validation schema for creating a leave request\r\nconst createLeaveRequestSchema = z.object({\r\n * GET /api/leave/requests?workspaceId=xxx - Get user's leave requests for a workspace\r\nexport async function GET(req: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const workspaceId = url.searchParams.get(\"workspaceId\");\r\n      return NextResponse.json(\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json(\r\n    const isOwner = workspace.ownerId === user.id;\r\n    const isMember = workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    const leaveRequests = await prisma.leaveRequest.findMany({\r\n    return NextResponse.json(leaveRequests);\r\n    console.error(\"Error fetching leave requests:\", error);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/issues/resolve",
      "file": "src\\app\\api\\issues\\resolve\\route.ts",
      "title": "Get Issues Resolve",
      "description": "Retrieve issues resolve information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_1w9dh2nhf",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.641Z",
              "taskBoardId": "board_lqq8vrsfv",
              "columnId": "column_oxaq8ib0p",
              "workspaceId": "ws_8gqxh6kml",
              "storyId": "story_ggw5ucf3p",
              "reporterId": "user_dfre57l9e",
              "assigneeId": "user_bdg4earir",
              "createdAt": "2025-09-24T11:27:05.641Z",
              "updatedAt": "2025-09-24T11:27:05.641Z"
            },
            {
              "id": "issue_soe7u1ipn",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.641Z",
              "taskBoardId": "board_1sm2kcqo6",
              "columnId": "column_4il6u9y3w",
              "workspaceId": "ws_1awj6u1o3",
              "storyId": "story_i3bhs8xw8",
              "reporterId": "user_z7o72z1m7",
              "assigneeId": "user_mo3sp2iok",
              "createdAt": "2025-09-23T11:27:05.641Z",
              "updatedAt": "2025-09-24T11:27:05.641Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues resolve information",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": false,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const { searchParams } = new URL(request.url);\r\n    const issueKey = searchParams.get('issueKey');\r\n      return NextResponse.json({ error: 'Issue key is required' }, { status: <cvv> });\r\n    const issue = await prisma.issue.findFirst({\r\n      return NextResponse.json({ error: 'Issue not found' }, { status: <cvv> });\r\n      return NextResponse.json({ error: 'Issue workspace not found' }, { status: <cvv> });\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/leave/policies",
      "file": "src\\app\\api\\leave\\policies\\route.ts",
      "title": "Get Leave Policies",
      "description": "GET /api/leave/policies?workspaceId=xxx&includeHidden=true - Get leave policies for a workspace",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "leave"
      ],
      "summary": "GET /api/leave/policies?workspaceId=xxx&includeHidden=true - Get leave policies for a workspace",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const leavePolicySchema = z.object({\r\n  exportMode: z.enum([\r\n  exportCode: z.string().nullable(),\r\nexport async function GET(req: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const workspaceId = url.searchParams.get(\"workspaceId\");\r\n    const includeHidden = url.searchParams.get(\"includeHidden\") === \"true\";\r\n      return NextResponse.json(\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json(\r\n    const isOwner = workspace.ownerId === user.id;\r\n    const isMember = workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    const canManageLeave = await checkUserPermission(\r\n    const policies = await prisma.leavePolicy.findMany({\r\n            exportMode: true,\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/leave/policies",
      "file": "src\\app\\api\\leave\\policies\\route.ts",
      "title": "Create Leave Policies",
      "description": "POST /api/leave/policies - Create a new leave policy",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "POST /api/leave/policies - Create a new leave policy",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const leavePolicySchema = z.object({\r\n  exportMode: z.enum([\r\n  exportCode: z.string().nullable(),\r\nexport async function GET(req: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const workspaceId = url.searchParams.get(\"workspaceId\");\r\n    const includeHidden = url.searchParams.get(\"includeHidden\") === \"true\";\r\n      return NextResponse.json(\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json(\r\n    const isOwner = workspace.ownerId === user.id;\r\n    const isMember = workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    const canManageLeave = await checkUserPermission(\r\n    const policies = await prisma.leavePolicy.findMany({\r\n            exportMode: true,\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/features/{id}",
      "file": "src\\app\\api\\features\\[id]\\route.ts",
      "title": "Get Features {id}",
      "description": "Retrieve features {id} information",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "features"
      ],
      "summary": "Retrieve features {id} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const updateFeatureRequestSchema = z.object({\r\n// GET /api/features/:id - Get a specific feature request\r\nexport async function GET(\r\n    const _params = await params;\r\n    const { id } = _params;\r\n    const featureRequest = await prisma.featureRequest.findUnique({\r\n      return NextResponse.json({ error: \"Feature request not found\" }, { status: <cvv> });\r\n    const upvotes = await prisma.featureVote.count({\r\n    const downvotes = await prisma.featureVote.count({\r\n    const voteScore = upvotes - downvotes;\r\n    return NextResponse.json({\r\n    console.error(\"Error fetching feature request:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch feature request\" },\r\n// PATCH /api/features/:id - Update a feature request\r\nexport async function PATCH(\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { id } = _params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/features/{id}",
      "file": "src\\app\\api\\features\\[id]\\route.ts",
      "title": "Delete Features {id}",
      "description": "Remove a features {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for DELETE deleting resource",
        "example": {}
      },
      "tags": [
        "features"
      ],
      "summary": "Remove a features {id}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const updateFeatureRequestSchema = z.object({\r\n// GET /api/features/:id - Get a specific feature request\r\nexport async function GET(\r\n    const _params = await params;\r\n    const { id } = _params;\r\n    const featureRequest = await prisma.featureRequest.findUnique({\r\n      return NextResponse.json({ error: \"Feature request not found\" }, { status: <cvv> });\r\n    const upvotes = await prisma.featureVote.count({\r\n    const downvotes = await prisma.featureVote.count({\r\n    const voteScore = upvotes - downvotes;\r\n    return NextResponse.json({\r\n    console.error(\"Error fetching feature request:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch feature request\" },\r\n// PATCH /api/features/:id - Update a feature request\r\nexport async function PATCH(\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { id } = _params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/features/{id}",
      "file": "src\\app\\api\\features\\[id]\\route.ts",
      "title": "Update Features {id}",
      "description": "Partially update an existing features {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "features"
      ],
      "summary": "Partially update an existing features {id}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const updateFeatureRequestSchema = z.object({\r\n// GET /api/features/:id - Get a specific feature request\r\nexport async function GET(\r\n    const _params = await params;\r\n    const { id } = _params;\r\n    const featureRequest = await prisma.featureRequest.findUnique({\r\n      return NextResponse.json({ error: \"Feature request not found\" }, { status: <cvv> });\r\n    const upvotes = await prisma.featureVote.count({\r\n    const downvotes = await prisma.featureVote.count({\r\n    const voteScore = upvotes - downvotes;\r\n    return NextResponse.json({\r\n    console.error(\"Error fetching feature request:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch feature request\" },\r\n// PATCH /api/features/:id - Update a feature request\r\nexport async function PATCH(\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { id } = _params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/leave/balances",
      "file": "src\\app\\api\\leave\\balances\\route.ts",
      "title": "Get Leave Balances",
      "description": "GET /api/leave/balances?workspaceId=xxx&year=2024 - Get user's leave balances for a workspace",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "leave"
      ],
      "summary": "GET /api/leave/balances?workspaceId=xxx&year=2024 - Get user's leave balances for a workspace",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(req: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const workspaceId = url.searchParams.get(\"workspaceId\");\r\n    const year = url.searchParams.get(\"year\");\r\n    const currentYear = year ? parseInt(year, 10) : new Date().getFullYear();\r\n      return NextResponse.json(\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json(\r\n    const isOwner = workspace.ownerId === user.id;\r\n    const isMember = workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    const leaveBalances = await prisma.leaveBalance.findMany({\r\n    const transformedBalances = leaveBalances.map((balance) => ({\r\n    return NextResponse.json(transformedBalances);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/epics/{epicId}",
      "file": "src\\app\\api\\epics\\[epicId]\\route.ts",
      "title": "Get Epics {epicId}",
      "description": "Retrieve epics {epicid} information",
      "parameters": [
        {
          "name": "epicId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: epicId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "epics"
      ],
      "summary": "Retrieve epics {epicid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const epicPatchSchema = z.object({\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n// Helper function to resolve epic ID from issue key or database ID\r\nasync function resolveEpicId(epicIdOrKey: string): Promise<string | null> {\r\n    return await resolveIssueKeyToId(epicIdOrKey, 'epic');\r\n  return epicIdOrKey; // Already a database ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { epicId: epicIdParam } = _params;\r\n      return NextResponse.json({ error: \"Epic ID is required\" }, { status: <cvv> });\r\n    const epicId = await resolveEpicId(epicIdParam);\r\n      return NextResponse.json({ error: \"Epic not found\" }, { status: <cvv> });\r\n    const epic = await prisma.epic.findUnique({\r\n      return NextResponse.json({ error: \"Epic not found\" }, { status: <cvv> });\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/epics/{epicId}",
      "file": "src\\app\\api\\epics\\[epicId]\\route.ts",
      "title": "Delete Epics {epicId}",
      "description": "Remove a epics {epicid}",
      "parameters": [
        {
          "name": "epicId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: epicId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for DELETE deleting resource",
        "example": {}
      },
      "tags": [
        "epics"
      ],
      "summary": "Remove a epics {epicid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const epicPatchSchema = z.object({\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n// Helper function to resolve epic ID from issue key or database ID\r\nasync function resolveEpicId(epicIdOrKey: string): Promise<string | null> {\r\n    return await resolveIssueKeyToId(epicIdOrKey, 'epic');\r\n  return epicIdOrKey; // Already a database ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { epicId: epicIdParam } = _params;\r\n      return NextResponse.json({ error: \"Epic ID is required\" }, { status: <cvv> });\r\n    const epicId = await resolveEpicId(epicIdParam);\r\n      return NextResponse.json({ error: \"Epic not found\" }, { status: <cvv> });\r\n    const epic = await prisma.epic.findUnique({\r\n      return NextResponse.json({ error: \"Epic not found\" }, { status: <cvv> });\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/epics/{epicId}",
      "file": "src\\app\\api\\epics\\[epicId]\\route.ts",
      "title": "Update Epics {epicId}",
      "description": "Partially update an existing epics {epicid}",
      "parameters": [
        {
          "name": "epicId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: epicId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "epics"
      ],
      "summary": "Partially update an existing epics {epicid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const epicPatchSchema = z.object({\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n    if (typeof arg == \"string\" || arg instanceof Date) return new Date(arg);\r\n// Helper function to resolve epic ID from issue key or database ID\r\nasync function resolveEpicId(epicIdOrKey: string): Promise<string | null> {\r\n    return await resolveIssueKeyToId(epicIdOrKey, 'epic');\r\n  return epicIdOrKey; // Already a database ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { epicId: epicIdParam } = _params;\r\n      return NextResponse.json({ error: \"Epic ID is required\" }, { status: <cvv> });\r\n    const epicId = await resolveEpicId(epicIdParam);\r\n      return NextResponse.json({ error: \"Epic not found\" }, { status: <cvv> });\r\n    const epic = await prisma.epic.findUnique({\r\n      return NextResponse.json({ error: \"Epic not found\" }, { status: <cvv> });\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/epics/search",
      "file": "src\\app\\api\\epics\\search\\route.ts",
      "title": "Get Epics Search",
      "description": "Retrieve epics search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "epics"
      ],
      "summary": "Retrieve epics search information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(req: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const query = url.searchParams.get('q') || '';\r\n    const workspace = url.searchParams.get('workspace');\r\n      return NextResponse.json({ error: 'Workspace parameter is required' }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const workspaceAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Access denied' }, { status: <cvv> });\r\n    const epics = await prisma.epic.findMany({\r\n    return NextResponse.json(epics);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/face-layers/counts",
      "file": "src\\app\\api\\face-layers\\counts\\route.ts",
      "title": "Get Face-layers Counts",
      "description": "Retrieve face-layers counts information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "tags": [
        "face-layers"
      ],
      "summary": "Retrieve face-layers counts information",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": false,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET() {\r\n    const basePath = path.join(process.cwd(), 'public', 'face-layers');\r\n    const layerCounts = {\r\n    return NextResponse.json({\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\n// Helper function to count files in a directory\r\nfunction countFiles(directoryPath: string): number {\r\n    const files = fs.readdirSync(directoryPath);\r\n    const pngFiles = files.filter(file => \r\n    const highestNumber = pngFiles.reduce((max, file) => {\r\n      const num = parseInt(file.split('.')[0], 10);\r\n      return isNaN(num) ? max : Math.max(max, num);\r\n    return highestNumber;\r\n    return 0;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/boards/import",
      "file": "src\\app\\api\\boards\\import\\route.ts",
      "title": "Create Boards Import",
      "description": "Create a new boards import",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "boards"
      ],
      "summary": "Create a new boards import",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const { importData, workspaceId }: { importData: BoardImportData; workspaceId: string } = await request.json();\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json(\r\n    const result: ImportResult = {\r\n    await prisma.$transaction(async (tx) => {\r\n      const board = await tx.taskBoard.create({\r\n      const columnsToCreate = importData.columns || [\r\n      const createdColumns = await Promise.all(\r\n      const columnMap = new Map<string, string>();\r\n      // Helper function to find user by email\r\n      const findUserByEmail = async (email?: string) => {\r\n        if (!email) return null;\r\n        return await tx.user.findUnique({\r\n      // Helper function to create or find labels\r\n      const createOrFindLabels = async (labelNames: string[]) => {\r\n        if (!labelNames || labelNames.length === 0) return [];\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/ai/shorten",
      "file": "src\\app\\api\\ai\\shorten\\route.ts",
      "title": "Create Ai Shorten",
      "description": "Create a new ai shorten",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "description": "text field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "text": "string"
        },
        "required": [
          "text"
        ]
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai shorten",
      "authentication": {
        "type": "api-key",
        "required": true,
        "description": "API key authentication required. Include X-API-Key header with your request.",
        "headerName": "X-API-Key",
        "headerFormat": "<your-api-key>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "async function improveEnglishText(userInput: string) {\r\n    const apiKey = process.env.OPENAPI_KEY;\r\n        return null;\r\n    const endpoint = 'https://api.openai.com/v1/chat/completions';\r\n    const messages = [\r\n        const response = await axios.post<phone>if (!response.data?.choices?.[0]?.message?.content) {\r\n            console.error('Unexpected API response format:', response.data);\r\n            return null;\r\n        const json = JSON.parse(response.data.choices[0].message.content<phone>return json;\r\n        console.error('Error improving text:', error.response?.data || error.message);\r\n        return null;\r\n// function normalizeText(text: string | null): string {\r\n//         return \"Failed to improve text. Please try again.\";\r\n//     return text;\r\nexport async function POST(req: Request) {\r\n        const currentUser = await getCurrentUser();\r\n            return NextResponse.json<phone>const body = await req.json();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/ai/jobs",
      "file": "src\\app\\api\\ai\\jobs\\route.ts",
      "title": "Get Ai Jobs",
      "description": "Retrieve ai jobs information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai jobs information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceSlugOrId = searchParams.get('workspaceId');\r\n      return NextResponse.json(\r\n    const actualWorkspaceId = await resolveWorkspaceSlug(workspaceSlugOrId);\r\n      return NextResponse.json(\r\n    const allJobs = await jobStorage.getAll();\r\n    const userJobs = allJobs.filter(job => \r\n    const cleanJobData = (jobs: any[]) => jobs.map(job => ({\r\n    const storyJobs = cleanJobData(userJobs.filter(job => job.id.startsWith('story_job_')).slice(0, 10));\r\n    const taskJobs = cleanJobData(userJobs.filter(job => job.id.startsWith('ta<api-key>')).slice(0, 10));\r\n    const boardJobs = cleanJobData(userJobs.filter(job => job.id.startsWith('job_') && !job.id.startsWith('ta<api-key>') && !job.id.startsWith('story_job_')).slice(0, 10));\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/ai/improve",
      "file": "src\\app\\api\\ai\\improve\\route.ts",
      "title": "Create Ai Improve",
      "description": "Create a new ai improve",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "description": "text field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "text": "string"
        },
        "required": [
          "text"
        ]
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai improve",
      "authentication": {
        "type": "api-key",
        "required": true,
        "description": "API key authentication required. Include X-API-Key header with your request.",
        "headerName": "X-API-Key",
        "headerFormat": "<your-api-key>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "async function improveEnglishText(userInput: string) {\r\n    const apiKey = process.env.OPENAPI_KEY;\r\n        return null;\r\n    const endpoint = 'https://api.openai.com/v1/chat/completions';\r\n    const messages = [\r\n- If the input contains markdown formatting (headers, bold, italic, lists, etc.), preserve and enhance the formatting in your response<phone>console.log('improveEnglishText: Making OpenAI API request...');\r\n        const response = await axios.post<phone>console.log('improveEnglishText: OpenAI API response received:', {\r\n            status: response.status,\r\n            hasChoices: !!response.data?.choices,\r\n            choicesLength: response.data?.choices?.length,\r\n            hasContent: !!response.data?.choices?.[0]?.message?.content<phone>if (!response.data?.choices?.[0]?.message?.content) {\r\n            console.error('improveEnglishText: Unexpected API response format:', response.data);\r\n            return null;\r\n        const improvedText = response.data.choices[0].message.content.trim();\r\n        return improvedText;\r\n            status: error.response?.status,\r\n            data: error.response?.data\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/ai/generate-stories",
      "file": "src\\app\\api\\ai\\generate-stories\\route.ts",
      "title": "Create Ai Generate-stories",
      "description": "Create a new ai generate-stories",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "epicContext": {
              "type": "string"
            },
            "userEmail": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "epicContext": "sample_epicContext",
          "userEmail": "user@example.com"
        }
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai generate-stories",
      "authentication": {
        "type": "api-key",
        "required": true,
        "description": "API key authentication required. Include X-API-Key header with your request.",
        "headerName": "X-API-Key",
        "headerFormat": "<your-api-key>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "async function generateWithAI(\r\n  const conversation = [...userMessages];\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      const data = await response.json();\r\n        throw new Error('Invalid API response structure');\r\n      const choice = data.choices[0];\r\n      const content = choice.message?.content || '';\r\n      const finishReason = choice.finish_reason;\r\n        // For continuation requests, append content\r\n      // If response was completed successfully, return<phone>return fullContent;\r\n      // If response was truncated due to length, continue the conversation\r\n        // Add the truncated response to conversation and ask for continuation\r\n      // For any other finish reason, return what we have\r\n      return fullContent;\r\nasync function _parseAIResponse<T>(\r\n  const jsonBlocks: string[] = [];\r\n  const arrayMatches = cleanedContent.match(/\\[\\s*\\{[\\s\\S]*\\}\\s*\\]/g);\r\n  const objectMatches = cleanedContent.match(/\\{\\s*[\\s\\S]*\\}/g);\r\n    const jsonStr = jsonBlocks[i].trim();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/ai/generate-and-create-tasks",
      "file": "src\\app\\api\\ai\\generate-and-create-tasks\\route.ts",
      "title": "Create Ai Generate-and-create-tasks",
      "description": "Create a new ai generate-and-create-tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "storyId": {
              "type": "string"
            },
            "boardId": {
              "type": "string"
            },
            "workspaceId": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "storyId": "123",
          "boardId": "123",
          "workspaceId": "123"
        }
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai generate-and-create-tasks",
      "authentication": {
        "type": "api-key",
        "required": true,
        "description": "API key authentication required. Include X-API-Key header with your request.",
        "headerName": "X-API-Key",
        "headerFormat": "<your-api-key>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { storyId, boardId, workspaceId } = await request.json();\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found or access denied' }, { status: <cvv> });\r\n    const story = await prisma.story.findFirst({\r\n      return NextResponse.json({ error: 'Story not found' }, { status: <cvv> });\r\n    const jobId = `ta<api-key>${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    const job: JobStatus = {\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r\n// Background AI task generation and creation function\r\nasync function startBackgroundAITaskGeneration(jobId: string) {\r\n  setTimeout(async () => {\r\n      const job = await jobStorage.get(jobId);\r\n        return;\r\n      const { storyId, boardId, storyTitle, storyDescription, epicTitle, milestoneTitle } = job.boardData;\r\n      const prompt = `${AI_PROMPTS.TASKS}\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/ai/generate-tasks",
      "file": "src\\app\\api\\ai\\generate-tasks\\route.ts",
      "title": "Create Ai Generate-tasks",
      "description": "Create a new ai generate-tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "storyContext": {
              "type": "string"
            },
            "userEmail": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "storyContext": "sample_storyContext",
          "userEmail": "user@example.com"
        }
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai generate-tasks",
      "authentication": {
        "type": "api-key",
        "required": true,
        "description": "API key authentication required. Include X-API-Key header with your request.",
        "headerName": "X-API-Key",
        "headerFormat": "<your-api-key>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "async function generateWithAI(\r\n  const conversation = [...userMessages];\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      const data = await response.json();\r\n        throw new Error('Invalid API response structure');\r\n      const choice = data.choices[0];\r\n      const content = choice.message?.content || '';\r\n      const finishReason = choice.finish_reason;\r\n        // For continuation requests, append content\r\n      // If response was completed successfully, return<phone>return fullContent;\r\n      // If response was truncated due to length, continue the conversation\r\n        // Add the truncated response to conversation and ask for continuation\r\n      // For any other finish reason, return what we have\r\n      return fullContent;\r\nasync function _parseAIResponse<T>(\r\n  const jsonBlocks: string[] = [];\r\n  const arrayMatches = cleanedContent.match(/\\[\\s*\\{[\\s\\S]*\\}\\s*\\]/g);\r\n  const objectMatches = cleanedContent.match(/\\{\\s*[\\s\\S]*\\}/g);\r\n    const jsonStr = jsonBlocks[i].trim();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/ai/generate-and-create-stories",
      "file": "src\\app\\api\\ai\\generate-and-create-stories\\route.ts",
      "title": "Create Ai Generate-and-create-stories",
      "description": "Create a new ai generate-and-create-stories",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "epicId": {
              "type": "string"
            },
            "boardId": {
              "type": "string"
            },
            "workspaceId": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "epicId": "123",
          "boardId": "123",
          "workspaceId": "123"
        }
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai generate-and-create-stories",
      "authentication": {
        "type": "api-key",
        "required": true,
        "description": "API key authentication required. Include X-API-Key header with your request.",
        "headerName": "X-API-Key",
        "headerFormat": "<your-api-key>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { epicId, boardId, workspaceId } = await request.json();\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found or access denied' }, { status: <cvv> });\r\n    const epic = await prisma.epic.findFirst({\r\n      return NextResponse.json({ error: 'Epic not found' }, { status: <cvv> });\r\n    const jobId = `story_job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    const job: JobStatus = {\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r\n// Helper function to update job status\r\nasync function updateJobStatus(jobId: string, status: JobStatus['status'], progress: number, currentStep: string) {\r\n    const job = await jobStorage.get(jobId);\r\nasync function _generateWithAI(\r\n  const conversation = [...userMessages];\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      const data = await response.json();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/activities/timesheet",
      "file": "src\\app\\api\\activities\\timesheet\\route.ts",
      "title": "Get Activities Timesheet",
      "description": "Retrieve activities timesheet information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "activities"
      ],
      "summary": "Retrieve activities timesheet information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export interface TimesheetEntry {\r\nexport interface TimesheetSession {\r\nexport interface TimesheetSummary {\r\nexport interface TimesheetData {\r\nfunction getActivityType(eventType: EventType): string {\r\n  const typeMap: Record<EventType, string> = {\r\n  return typeMap[eventType] || 'other';\r\nfunction getSessionDescription(startEventType: EventType, endEventType?: EventType, activityNote?: string): string {\r\n    const baseDescription = (() => {\r\n          return 'Working on task';\r\n          return 'On lunch break';\r\n          return 'Taking a break';\r\n          return 'In a meeting';\r\n          return 'Traveling';\r\n          return 'Reviewing work';\r\n          return 'Researching';\r\n          return 'Active';\r\n    return activityNote ? `${baseDescription}: ${activityNote}` : baseDescription;\r\n  const baseDescription = (() => {\r\n          return 'Work session (paused)';\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/ai/assistant",
      "file": "src\\app\\api\\ai\\assistant\\route.ts",
      "title": "Create Ai Assistant",
      "description": "Create a new ai assistant",
      "parameters": [
        {
          "name": "query",
          "type": "object",
          "required": false,
          "location": "query",
          "description": "Query parameters"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "message field"
            },
            "context = []": {
              "type": "string",
              "description": "context = [] field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "message": "string",
          "context = []": "string"
        },
        "required": [
          "message",
          "context = []"
        ]
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai assistant",
      "authentication": {
        "type": "api-key",
        "required": true,
        "description": "API key authentication required. Include X-API-Key header with your request.",
        "headerName": "X-API-Key",
        "headerFormat": "<your-api-key>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Define the function specs for AI to use\r\nconst functionSpecs = [\r\n          description: \"Maximum number of tasks to return (default 10)\" \r\n// Function to handle the AI request with function calling\r\nasync function callAssistantAPI(userId: string, message: string, contextMessages: any[]) {\r\n  const apiKey = process.env.OPENAPI_KEY;\r\n    return null;\r\n  const endpoint = 'https://api.openai.com/v1/chat/completions';\r\n  const messages = [\r\n      Always be concise and helpful. If you need more information to complete a request, ask the user.\r\n      IMPORTANT: Always format your responses using markdown:\r\n    const response = await axios.post<phone>functions: functionSpecs,\r\n        function_call: 'auto',\r\n    return response.data;\r\n    console.error('Error calling AI assistant:', error.response?.data || error.message);\r\n    return null;\r\n// Implement the functions that the AI can call\r\nasync function handleFunctionCall(userId: string, functionName: string, args: any) {\r\n  switch (functionName) {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/activities/status",
      "file": "src\\app\\api\\activities\\status\\route.ts",
      "title": "Get Activities Status",
      "description": "Retrieve activities status information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "activities"
      ],
      "summary": "Retrieve activities status information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET() {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const status = await ActivityService.getCurrentStatus(session.user.id);\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/activities/end",
      "file": "src\\app\\api\\activities\\end\\route.ts",
      "title": "Create Activities End",
      "description": "Create a new activities end",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "description": "Sample description"
        }
      },
      "tags": [
        "activities"
      ],
      "summary": "Create a new activities end",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { description } = await request.json();\r\n    const userEvent = await ActivityService.endCurrentActivity(\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/activities/start",
      "file": "src\\app\\api\\activities\\start\\route.ts",
      "title": "Create Activities Start",
      "description": "Create a new activities start",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "eventType": {
              "type": "string"
            },
            "taskId": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "autoEndAt": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "eventType": "sample_eventType",
          "taskId": "123",
          "description": "Sample description",
          "metadata": "sample_metadata",
          "autoEndAt": "sample_autoEndAt"
        }
      },
      "tags": [
        "activities"
      ],
      "summary": "Create a new activities start",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { eventType, taskId, description, metadata, autoEndAt } = await request.json();\r\n      return NextResponse.json(\r\n    const userEvent = await ActivityService.startActivity({\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/activities/history",
      "file": "src\\app\\api\\activities\\history\\route.ts",
      "title": "Get Activities History",
      "description": "Retrieve activities history information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "activities"
      ],
      "summary": "Retrieve activities history information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const limit = parseInt(searchParams.get(\"limit\") || \"50\");\r\n    const startDate = searchParams.get(\"startDate\") \r\n    const endDate = searchParams.get(\"endDate\") \r\n    const eventTypesParam = searchParams.get(\"eventTypes\");\r\n    const eventTypes = eventTypesParam \r\n    const history = await ActivityService.getActivityHistory(session.user.id, {\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/activities/daily-breakdown",
      "file": "src\\app\\api\\activities\\daily-breakdown\\route.ts",
      "title": "Get Activities Daily-breakdown",
      "description": "Retrieve activities daily-breakdown information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "activities"
      ],
      "summary": "Retrieve activities daily-breakdown information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const dateParam = searchParams.get(\"date\");\r\n    const date = dateParam ? new Date(dateParam) : new Date();\r\n    const breakdown = await ActivityService.getDailyTimeBreakdown(\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/views/{viewId}/follow",
      "file": "src\\app\\api\\views\\[viewId]\\follow\\route.ts",
      "title": "Get Views {viewId} by ID",
      "description": "Retrieve views {viewid} information",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "views"
      ],
      "summary": "Retrieve views {viewid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { viewId } = resolvedParams;\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: \"View not found or access denied\" }, { status: <cvv> });\r\n    const existingFollower = await prisma.viewFollower.findUnique({\r\n      return NextResponse.json({ error: \"Already following this view\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following view\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const DELETE = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { viewId } = resolvedParams;\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: \"View not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed view\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/views/{viewId}/follow",
      "file": "src\\app\\api\\views\\[viewId]\\follow\\route.ts",
      "title": "Create Views {viewId} by ID",
      "description": "Create a new views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "views"
      ],
      "summary": "Create a new views {viewid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { viewId } = resolvedParams;\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: \"View not found or access denied\" }, { status: <cvv> });\r\n    const existingFollower = await prisma.viewFollower.findUnique({\r\n      return NextResponse.json({ error: \"Already following this view\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following view\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const DELETE = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { viewId } = resolvedParams;\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: \"View not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed view\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/views/{viewId}/follow",
      "file": "src\\app\\api\\views\\[viewId]\\follow\\route.ts",
      "title": "Delete Views {viewId} by ID",
      "description": "Remove a views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "views"
      ],
      "summary": "Remove a views {viewid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { viewId } = resolvedParams;\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: \"View not found or access denied\" }, { status: <cvv> });\r\n    const existingFollower = await prisma.viewFollower.findUnique({\r\n      return NextResponse.json({ error: \"Already following this view\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following view\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const DELETE = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { viewId } = resolvedParams;\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: \"View not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed view\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/views/{viewId}/issue-positions",
      "file": "src\\app\\api\\views\\[viewId]\\issue-positions\\route.ts",
      "title": "Get Views {viewId} by ID",
      "description": "Retrieve views {viewid} information",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_yjr7rq4u3",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.651Z",
              "taskBoardId": "board_4kn7k1bv3",
              "columnId": "column_g6itmblrx",
              "workspaceId": "ws_g5yi3a72d",
              "storyId": "story_gsysl7u2p",
              "reporterId": "user_g9m63q8m3",
              "assigneeId": "user_mwjvsufnm",
              "createdAt": "2025-09-24T11:27:05.651Z",
              "updatedAt": "2025-09-24T11:27:05.651Z"
            },
            {
              "id": "issue_qnen2ry82",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.651Z",
              "taskBoardId": "board_282k1zbiy",
              "columnId": "column_ke6l7c3k4",
              "workspaceId": "ws_c0c74cwwe",
              "storyId": "story_90zjy3b4n",
              "reporterId": "user_pr5gyysu5",
              "assigneeId": "user_p9261w9ms",
              "createdAt": "2025-09-23T11:27:05.651Z",
              "updatedAt": "2025-09-24T11:27:05.651Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "views"
      ],
      "summary": "Retrieve views {viewid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport const runtime = 'nodejs';\r\nexport async function PUT(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { viewId } = resolvedParams;\r\n    const body = await request.json();\r\n    const { issueId, columnId, position } = body;\r\n      return NextResponse.json(\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: 'View not found or access denied' }, { status: <cvv> });\r\n    const issue = await prisma.issue.findFirst({\r\n      return NextResponse.json({ error: 'Issue not found or access denied' }, { status: <cvv> });\r\n    const viewPosition = await prisma.viewIssuePosition.upsert({\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r\nexport async function GET(\r\n  request: NextRequest,\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PUT",
      "url": "/api/views/{viewId}/issue-positions",
      "file": "src\\app\\api\\views\\[viewId]\\issue-positions\\route.ts",
      "title": "Update Views {viewId} by ID",
      "description": "Update an existing views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_wk3s2rcjh",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.651Z",
              "taskBoardId": "board_xrt43z5j2",
              "columnId": "column_gsx73vcy8",
              "workspaceId": "ws_sppoo0r2v",
              "storyId": "story_1uiuky7r4",
              "reporterId": "user_7jcctk7dw",
              "assigneeId": "user_wnx7fxewd",
              "createdAt": "2025-09-24T11:27:05.651Z",
              "updatedAt": "2025-09-24T11:27:05.651Z"
            },
            {
              "id": "issue_1pxupcbo9",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.651Z",
              "taskBoardId": "board_cnfs9wzh7",
              "columnId": "column_b3p263382",
              "workspaceId": "ws_cwh22cpcv",
              "storyId": "story_8qwb4mm8r",
              "reporterId": "user_myj6pzpua",
              "assigneeId": "user_t46wfp239",
              "createdAt": "2025-09-23T11:27:05.651Z",
              "updatedAt": "2025-09-24T11:27:05.651Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "issueId": {
              "type": "string",
              "description": "issueId field"
            },
            "columnId": {
              "type": "string",
              "description": "columnId field"
            },
            "position": {
              "type": "string",
              "description": "position field"
            }
          },
          "required": []
        },
        "description": "Request body for PUT updating resource",
        "example": {
          "issueId": "string",
          "columnId": "string",
          "position": "string"
        },
        "required": [
          "issueId",
          "columnId",
          "position"
        ]
      },
      "tags": [
        "views"
      ],
      "summary": "Update an existing views {viewid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport const runtime = 'nodejs';\r\nexport async function PUT(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { viewId } = resolvedParams;\r\n    const body = await request.json();\r\n    const { issueId, columnId, position } = body;\r\n      return NextResponse.json(\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: 'View not found or access denied' }, { status: <cvv> });\r\n    const issue = await prisma.issue.findFirst({\r\n      return NextResponse.json({ error: 'Issue not found or access denied' }, { status: <cvv> });\r\n    const viewPosition = await prisma.viewIssuePosition.upsert({\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r\nexport async function GET(\r\n  request: NextRequest,\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/views/{viewId}/favorite",
      "file": "src\\app\\api\\views\\[viewId]\\favorite\\route.ts",
      "title": "Create Views {viewId} by ID",
      "description": "Create a new views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "views"
      ],
      "summary": "Create a new views {viewid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { viewId: viewSlug } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get('workspaceId');\r\n      return NextResponse.json({ error: 'Workspace ID is required' }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const view = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: 'View not found' }, { status: <cvv> });\r\n    const updatedView = await prisma.view.update({\r\n    const transformedView = {\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/views",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\views\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const views = await prisma.view.findMany({\r\n    const transformedViews = views.map(view => ({\r\n    return NextResponse.json({ views: transformedViews });\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const body = await request.json();\r\n    const workspace = await prisma.workspace.findFirst({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/views",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\views\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const views = await prisma.view.findMany({\r\n    const transformedViews = views.map(view => ({\r\n    return NextResponse.json({ views: transformedViews });\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const body = await request.json();\r\n    const workspace = await prisma.workspace.findFirst({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/team-activity",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\team-activity\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { workspaceId } = params;\r\n    const membership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json(\r\n    const teamActivity = await ActivityService.getTeamActivity(workspaceId);\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/stories",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\stories\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const search = searchParams.get('search');\r\n    const membership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found or access denied' }, { status: <cvv> });\r\n    const whereClause: any = {\r\n    const stories = await prisma.story.findMany({\r\n    return NextResponse.json(stories);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/search-tasks",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\search-tasks\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { workspaceId } = _params;\r\n  const userId = session.user.id;\r\n  const { searchParams } = new URL(req.url);\r\n  const query = searchParams.get('q') || '';\r\n    return new NextResponse(\"Workspace ID is required\", { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return new NextResponse(\"No access to this workspace\", { status: <cvv> });\r\n    const tasks = await prisma.task.findMany({\r\n    const formattedTasks = tasks.map(task => {\r\n      const userActivities = task.activities.filter(act => act.user.id === userId);\r\n        const lastActivity = userActivities[0]; // Already sorted by createdAt desc\r\n      return {\r\n    return NextResponse.json({ tasks: formattedTasks });\r\n    return new NextResponse(\"Internal Server Error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/projects",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_cwup4qwer",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.652Z",
              "taskBoardId": "board_tapok38qu",
              "columnId": "column_zhpu649cw",
              "workspaceId": "ws_jjl7l48vu",
              "storyId": "story_jjo4666va",
              "reporterId": "user_bviw6vrxc",
              "assigneeId": "user_oxmz6v38q",
              "createdAt": "2025-09-24T11:27:05.652Z",
              "updatedAt": "2025-09-24T11:27:05.652Z"
            },
            {
              "id": "issue_oububzfkv",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.652Z",
              "taskBoardId": "board_179c1gqp4",
              "columnId": "column_9siivmo93",
              "workspaceId": "ws_0ecu1pzjq",
              "storyId": "story_3s7sdu84p",
              "reporterId": "user_kutqevnm9",
              "assigneeId": "user_xyg5sdhjy",
              "createdAt": "2025-09-23T11:27:05.652Z",
              "updatedAt": "2025-09-24T11:27:05.652Z"
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "async function generateUniqueIssuePrefix(workspaceId: string, requestedPrefix?: string, projectName?: string): Promise<string> {\r\n  // If a specific prefix is requested, validate its uniqueness\r\n  if (requestedPrefix && requestedPrefix.trim()) {\r\n    const cleanPrefix = requestedPrefix.trim().toUpperCase();\r\n    const existingProject = await prisma.project.findFirst({\r\n      return cleanPrefix; // Requested prefix is available\r\n    const baseName = projectName.trim().toUpperCase();\r\n    const strategies = [\r\n    for (const basePrefix of strategies) {\r\n        const existingProject = await prisma.project.findFirst({\r\n          return basePrefix;\r\n          const numberedPrefix = `${basePrefix}${i}`;\r\n          const existingNumberedProject = await prisma.project.findFirst({\r\n            return numberedPrefix;\r\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    const existingProject = await prisma.project.findFirst({\r\n      return randomPrefix;\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/projects",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_mfm0i5uis",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.652Z",
              "taskBoardId": "board_5y5t3ksu1",
              "columnId": "column_8j4eu4vbs",
              "workspaceId": "ws_3wunp3ha6",
              "storyId": "story_5zj5gkamz",
              "reporterId": "user_7g1r0oacb",
              "assigneeId": "user_nhq4d6b8d",
              "createdAt": "2025-09-24T11:27:05.652Z",
              "updatedAt": "2025-09-24T11:27:05.652Z"
            },
            {
              "id": "issue_e2pa1yv9h",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.652Z",
              "taskBoardId": "board_32s9wmd6i",
              "columnId": "column_i0idj9j8v",
              "workspaceId": "ws_mijj8gw2f",
              "storyId": "story_1peadokh7",
              "reporterId": "user_yrggd0fvr",
              "assigneeId": "user_ajwi93ajd",
              "createdAt": "2025-09-23T11:27:05.652Z",
              "updatedAt": "2025-09-24T11:27:05.652Z"
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "issuePrefix": {
              "type": "string",
              "description": "issuePrefix field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "name": "string",
          "description": "string",
          "color": "string",
          "issuePrefix": "string"
        },
        "required": [
          "name",
          "color",
          "issuePrefix"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "async function generateUniqueIssuePrefix(workspaceId: string, requestedPrefix?: string, projectName?: string): Promise<string> {\r\n  // If a specific prefix is requested, validate its uniqueness\r\n  if (requestedPrefix && requestedPrefix.trim()) {\r\n    const cleanPrefix = requestedPrefix.trim().toUpperCase();\r\n    const existingProject = await prisma.project.findFirst({\r\n      return cleanPrefix; // Requested prefix is available\r\n    const baseName = projectName.trim().toUpperCase();\r\n    const strategies = [\r\n    for (const basePrefix of strategies) {\r\n        const existingProject = await prisma.project.findFirst({\r\n          return basePrefix;\r\n          const numberedPrefix = `${basePrefix}${i}`;\r\n          const existingNumberedProject = await prisma.project.findFirst({\r\n            return numberedPrefix;\r\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    const existingProject = await prisma.project.findFirst({\r\n      return randomPrefix;\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/task",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\task\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const search = searchParams.get('search');\r\n    const membership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found or access denied' }, { status: <cvv> });\r\n    const whereClause: any = {\r\n    const tasks = await prisma.task.findMany({\r\n    return NextResponse.json(tasks);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const body = await request.json();\r\n    const {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/task",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\task\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "title field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "status = 'TODO'": {
              "type": "string",
              "description": "status = 'TODO' field"
            },
            "priority": {
              "type": "string",
              "description": "priority field"
            },
            "dueDate": {
              "type": "string",
              "description": "dueDate field"
            },
            "assigneeId": {
              "type": "string",
              "description": "assigneeId field"
            },
            "// Relations from creation form\r\n      epicIds = []": {
              "type": "string",
              "description": "// Relations from creation form\r\n      epicIds = [] field"
            },
            "storyIds = []": {
              "type": "string",
              "description": "storyIds = [] field"
            },
            "milestoneIds = []": {
              "type": "string",
              "description": "milestoneIds = [] field"
            },
            "parentTaskIds = []": {
              "type": "string",
              "description": "parentTaskIds = [] field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "title": "string",
          "description": "string",
          "status = 'TODO'": "string",
          "priority": "string",
          "dueDate": "string",
          "assigneeId": "string",
          "// Relations from creation form\r\n      epicIds = []": "string",
          "storyIds = []": "string",
          "milestoneIds = []": "string",
          "parentTaskIds = []": "string"
        },
        "required": [
          "status = 'TODO'",
          "priority",
          "dueDate",
          "assigneeId",
          "// Relations from creation form\r\n      epicIds = []",
          "storyIds = []",
          "milestoneIds = []",
          "parentTaskIds = []"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const search = searchParams.get('search');\r\n    const membership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found or access denied' }, { status: <cvv> });\r\n    const whereClause: any = {\r\n    const tasks = await prisma.task.findMany({\r\n    return NextResponse.json(tasks);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const body = await request.json();\r\n    const {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/settings",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\settings\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const workspaceSettingsSchema = z.object({\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    return NextResponse.json(workspace);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const body = await request.json();\r\n    // Validate the request body\r\n    const validatedData = workspaceSettingsSchema.parse(body);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/workspaces/{workspaceId}/settings",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\settings\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Partially update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Partially update an existing workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const workspaceSettingsSchema = z.object({\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    return NextResponse.json(workspace);\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const body = await request.json();\r\n    // Validate the request body\r\n    const validatedData = workspaceSettingsSchema.parse(body);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/permissions",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\permissions\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const { searchParams } = new URL(request.url);\r\n    const userId = searchParams.get('userId');\r\n    // If requesting specific user permissions (for permission hook)\r\n      const { getUserPermissions, getUserWorkspaceRole } = await import('@/lib/permissions');\r\n      const userPermissions = await getUserPermissions(userId, workspaceId);\r\n      const userRole = await getUserWorkspaceRole(userId, workspaceId);\r\n        return NextResponse.json(\r\n      return NextResponse.json(\r\n    const hasPermission = await checkUserPermission(\r\n      return NextResponse.json(\r\n    const rolePermissions = await (prisma as any).rolePermission.findMany({\r\n    const permissionsByRole: Record<string, any[]> = {};\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/permissions",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\permissions\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "role field"
            },
            "permission": {
              "type": "string",
              "description": "permission field"
            },
            "enabled": {
              "type": "string",
              "description": "enabled field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "role": "string",
          "permission": "string",
          "enabled": "string"
        },
        "required": [
          "role",
          "permission",
          "enabled"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const { searchParams } = new URL(request.url);\r\n    const userId = searchParams.get('userId');\r\n    // If requesting specific user permissions (for permission hook)\r\n      const { getUserPermissions, getUserWorkspaceRole } = await import('@/lib/permissions');\r\n      const userPermissions = await getUserPermissions(userId, workspaceId);\r\n      const userRole = await getUserWorkspaceRole(userId, workspaceId);\r\n        return NextResponse.json(\r\n      return NextResponse.json(\r\n    const hasPermission = await checkUserPermission(\r\n      return NextResponse.json(\r\n    const rolePermissions = await (prisma as any).rolePermission.findMany({\r\n    const permissionsByRole: Record<string, any[]> = {};\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PUT",
      "url": "/api/workspaces/{workspaceId}/permissions",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\permissions\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "role field"
            },
            "permission": {
              "type": "string",
              "description": "permission field"
            },
            "enabled": {
              "type": "string",
              "description": "enabled field"
            }
          },
          "required": []
        },
        "description": "Request body for PUT updating resource",
        "example": {
          "role": "string",
          "permission": "string",
          "enabled": "string"
        },
        "required": [
          "role",
          "permission",
          "enabled"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Update an existing workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const { searchParams } = new URL(request.url);\r\n    const userId = searchParams.get('userId');\r\n    // If requesting specific user permissions (for permission hook)\r\n      const { getUserPermissions, getUserWorkspaceRole } = await import('@/lib/permissions');\r\n      const userPermissions = await getUserPermissions(userId, workspaceId);\r\n      const userRole = await getUserWorkspaceRole(userId, workspaceId);\r\n        return NextResponse.json(\r\n      return NextResponse.json(\r\n    const hasPermission = await checkUserPermission(\r\n      return NextResponse.json(\r\n    const rolePermissions = await (prisma as any).rolePermission.findMany({\r\n    const permissionsByRole: Record<string, any[]> = {};\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/search-issues",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\search-issues\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_cmm3wh0zg",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.656Z",
              "taskBoardId": "board_4jd68hy4i",
              "columnId": "column_h3u8shaja",
              "workspaceId": "ws_zrjn68aqj",
              "storyId": "story_5rbfz8zwz",
              "reporterId": "user_huzx0qlx1",
              "assigneeId": "user_nqo23biiz",
              "createdAt": "2025-09-24T11:27:05.656Z",
              "updatedAt": "2025-09-24T11:27:05.656Z"
            },
            {
              "id": "issue_w8hurpi99",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.656Z",
              "taskBoardId": "board_5k70ihmbu",
              "columnId": "column_j8cxwe03b",
              "workspaceId": "ws_d3xs19dup",
              "storyId": "story_8rwcqpwd5",
              "reporterId": "user_mmnxdd8up",
              "assigneeId": "user_wkjettoea",
              "createdAt": "2025-09-23T11:27:05.656Z",
              "updatedAt": "2025-09-24T11:27:05.656Z"
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const query = searchParams.get('q');\r\n      return NextResponse.json({ issues: [] });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const issues = await prisma.issue.findMany({\r\n    return NextResponse.json({\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/labels",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\labels\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { workspaceId: workspaceSlugOrId } = await params;\r\n    const workspaceId = await resolveWorkspaceSlug(workspaceSlugOrId);\r\n      return NextResponse.json({ error: \"Workspace not found\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Workspace not found\" }, { status: <cvv> });\r\n    const labels = await prisma.taskLabel.findMany({\r\n    return NextResponse.json({ labels });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/milestones",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\milestones\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const search = searchParams.get('search');\r\n    const membership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found or access denied' }, { status: <cvv> });\r\n    const whereClause: any = {\r\n    const milestones = await prisma.milestone.findMany({\r\n    return NextResponse.json(milestones);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/invitations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\invitations\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const currentUser = await prisma.user.findUnique({\r\n    const isGlobalAdmin = currentUser?.role === 'admin';\r\n    const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json(\r\n    const isOwnerOrMember = workspace.ownerId === session.user.id || workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    const invitations = await prisma.workspaceInvitation.findMany({\r\n    return NextResponse.json(invitations);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/invitations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\invitations\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "email field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "email": "string"
        },
        "required": [
          "email"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const currentUser = await prisma.user.findUnique({\r\n    const isGlobalAdmin = currentUser?.role === 'admin';\r\n    const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json(\r\n    const isOwnerOrMember = workspace.ownerId === session.user.id || workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    const invitations = await prisma.workspaceInvitation.findMany({\r\n    return NextResponse.json(invitations);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/invitations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\invitations\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "email field"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "email": "string"
        },
        "required": [
          "email"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { workspaceId } = _params;\r\n    const currentUser = await prisma.user.findUnique({\r\n    const isGlobalAdmin = currentUser?.role === 'admin';\r\n    const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json(\r\n    const isOwnerOrMember = workspace.ownerId === session.user.id || workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    const invitations = await prisma.workspaceInvitation.findMany({\r\n    return NextResponse.json(invitations);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const _params = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/members",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\members\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n  const _params = await params;\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const workspaceSlugOrId = _params.workspaceId;\r\n    const workspaceId = await resolveWorkspaceSlug(workspaceSlugOrId);\r\n      return NextResponse.json({ error: \"Workspace not found\" }, { status: <cvv> });\r\n    const [isMember, isOwner] = await Promise.all([\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const members = await prisma.workspaceMember.findMany({\r\n    return NextResponse.json(members);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/custom-roles",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\custom-roles\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const member = await prisma.workspaceMember.findUnique({\r\n      return NextResponse.json({ error: 'Not a member of this workspace' }, { status: <cvv> });\r\n    const customRoles = await prisma.customRole.findMany({\r\n    const customRolesWithPermissions = await Promise.all(\r\n      customRoles.map(async (role) => {\r\n        const permissions = await prisma.rolePermission.findMany({\r\n        return {\r\n    return NextResponse.json(customRolesWithPermissions);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const body = await request.json();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/custom-roles",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\custom-roles\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "permissions": {
              "type": "string",
              "description": "permissions field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "name": "string",
          "description": "string",
          "color": "string",
          "permissions": "string"
        },
        "required": [
          "name",
          "color",
          "permissions"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const member = await prisma.workspaceMember.findUnique({\r\n      return NextResponse.json({ error: 'Not a member of this workspace' }, { status: <cvv> });\r\n    const customRoles = await prisma.customRole.findMany({\r\n    const customRolesWithPermissions = await Promise.all(\r\n      customRoles.map(async (role) => {\r\n        const permissions = await prisma.rolePermission.findMany({\r\n        return {\r\n    return NextResponse.json(customRolesWithPermissions);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const body = await request.json();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/epics",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\epics\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const search = searchParams.get('search');\r\n    const membership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found or access denied' }, { status: <cvv> });\r\n    const whereClause: any = {\r\n    const epics = await prisma.epic.findMany({\r\n    return NextResponse.json(epics);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/action-filter-issues",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\action-filter-issues\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_qfifndr1c",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.657Z",
              "taskBoardId": "board_i73jqyjao",
              "columnId": "column_4eyy79kqm",
              "workspaceId": "ws_wkyz9ebfk",
              "storyId": "story_8o48zhxxc",
              "reporterId": "user_o88ogzsqs",
              "assigneeId": "user_p9ybj4rfz",
              "createdAt": "2025-09-24T11:27:05.657Z",
              "updatedAt": "2025-09-24T11:27:05.657Z"
            },
            {
              "id": "issue_8nxuecm7c",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.657Z",
              "taskBoardId": "board_0u251q6lu",
              "columnId": "column_00u9h0onx",
              "workspaceId": "ws_5avyunv9z",
              "storyId": "story_3dfc4q2ub",
              "reporterId": "user_k59aa00yj",
              "assigneeId": "user_9l3t81iw6",
              "createdAt": "2025-09-23T11:27:05.657Z",
              "updatedAt": "2025-09-24T11:27:05.657Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId } = await params;\r\n    const { actionFilters }: { actionFilters: ActionFilter[] } = await request.json();\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n      return NextResponse.json({ issueIds: [] });\r\n    // Build conditions for each action filter (handling async operations properly)\r\n    const activityQueries = [];\r\n    for (const filter of actionFilters) {\r\n      const baseQuery = {\r\n        const { type, values } = filter.subConditions;\r\n              const statusRecords = await prisma.projectStatus.findMany({\r\n              const statusValues = statusRecords.flatMap(s => [s.name, s.displayName].filter(Boolean));\r\n    const queryResults: Set<string>[] = [];\r\n    for (const query of activityQueries) {\r\n      const activities = await prisma.boardItemActivity.findMany({\r\n      const queryIssueIds = new Set<string>();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/boards",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\boards\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n  const _params = await params;\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const { workspaceId } = _params;\r\n      return NextResponse.json(\r\n    const boards = await prisma.taskBoard.findMany({\r\n    return NextResponse.json(boards);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const { workspaceId } = params;\r\n    const body = await request.json();\r\n    const { name, slug, description, isDefault, issuePrefix } = body;\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/boards",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\boards\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "slug": {
              "type": "string",
              "description": "slug field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "isDefault": {
              "type": "string",
              "description": "isDefault field"
            },
            "issuePrefix": {
              "type": "string",
              "description": "issuePrefix field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "name": "string",
          "slug": "string",
          "description": "string",
          "isDefault": "string",
          "issuePrefix": "string"
        },
        "required": [
          "name",
          "slug",
          "isDefault",
          "issuePrefix"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n  const _params = await params;\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const { workspaceId } = _params;\r\n      return NextResponse.json(\r\n    const boards = await prisma.taskBoard.findMany({\r\n    return NextResponse.json(boards);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const { workspaceId } = params;\r\n    const body = await request.json();\r\n    const { name, slug, description, isDefault, issuePrefix } = body;\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/invitations/{token}",
      "file": "src\\app\\api\\workspaces\\invitations\\[token]\\route.ts",
      "title": "Get Workspaces Invitations by ID",
      "description": "Retrieve workspaces invitations information",
      "parameters": [
        {
          "name": "token",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: token"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces invitations information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Retrieve workspaces invitations information\nconst response = await fetch('http://localhost:3000/api/workspaces/invitations/{token}', {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer <token>'\n  }\n});\n\nif (response.ok) {\n  const data = await response.json();\n  return data;\n} else {\n  throw new Error(`API Error: ${response.status}`);\n}"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/invitations/{token}",
      "file": "src\\app\\api\\workspaces\\invitations\\[token]\\route.ts",
      "title": "Create Workspaces Invitations by ID",
      "description": "Create a new workspaces invitations",
      "parameters": [
        {
          "name": "token",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: token"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces invitations",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Create a new workspaces invitations\nconst response = await fetch('http://localhost:3000/api/workspaces/invitations/{token}', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer <token>'\n  },\n  body: JSON.stringify(data)\n});\n\nif (response.ok) {\n  const data = await response.json();\n  return data;\n} else {\n  throw new Error(`API Error: ${response.status}`);\n}"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/users/{userId}/assigned-issues",
      "file": "src\\app\\api\\users\\[userId]\\assigned-issues\\route.ts",
      "title": "Get Users {userId} by ID",
      "description": "Retrieve users {userid} information",
      "parameters": [
        {
          "name": "userId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: userId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_jaoohrhcu",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.659Z",
              "taskBoardId": "board_ydu8fi2qz",
              "columnId": "column_wgndywuuk",
              "workspaceId": "ws_tzca1fk58",
              "storyId": "story_qgmc0p6pg",
              "reporterId": "user_iadtk8is8",
              "assigneeId": "user_0vh8991cc",
              "createdAt": "2025-09-24T11:27:05.659Z",
              "updatedAt": "2025-09-24T11:27:05.659Z"
            },
            {
              "id": "issue_q28vpjxle",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.659Z",
              "taskBoardId": "board_h6hv8774p",
              "columnId": "column_os8qb0y8g",
              "workspaceId": "ws_v43xiho5k",
              "storyId": "story_49i6o7ywu",
              "reporterId": "user_878hjrt25",
              "assigneeId": "user_wctxthkzy",
              "createdAt": "2025-09-23T11:27:05.659Z",
              "updatedAt": "2025-09-24T11:27:05.659Z"
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "users"
      ],
      "summary": "Retrieve users {userid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { userId } = await params;\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get('workspaceId');\r\n      return NextResponse.json({ error: \"Workspace ID is required\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const issues = await prisma.issue.findMany({\r\n    return NextResponse.json({\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/users/{userId}/assigned-tasks",
      "file": "src\\app\\api\\users\\[userId]\\assigned-tasks\\route.ts",
      "title": "Get Users {userId} by ID",
      "description": "Retrieve users {userid} information",
      "parameters": [
        {
          "name": "userId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: userId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "users"
      ],
      "summary": "Retrieve users {userid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { userId } = _params;\r\n  const currentUserId = session.user.id;\r\n    return new NextResponse(\"Forbidden\", { status: <cvv> });\r\n  const { searchParams } = new URL(req.url);\r\n  const workspaceId = searchParams.get('workspaceId');\r\n    return new NextResponse(\"Workspace ID is required\", { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return new NextResponse(\"No access to this workspace\", { status: <cvv> });\r\n    const assignedTasks = await prisma.task.findMany({\r\n    const formattedTasks = assignedTasks.map(task => {\r\n      const userActivities = task.activities.filter(act => act.user.id === userId);\r\n        const lastActivity = userActivities[0]; // Already sorted by createdAt desc\r\n      return {\r\n    return NextResponse.json({ tasks: formattedTasks });\r\n    return new NextResponse(\"Internal Server Error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/stop-with-adjustment",
      "file": "src\\app\\api\\tasks\\[taskId]\\stop-with-adjustment\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "adjustedStartTime": {
              "type": "string",
              "description": "adjustedStartTime field"
            },
            "adjustedEndTime": {
              "type": "string",
              "description": "adjustedEndTime field"
            },
            "adjustedDurationMs": {
              "type": "string",
              "description": "adjustedDurationMs field"
            },
            "originalDurationMs": {
              "type": "string",
              "description": "originalDurationMs field"
            },
            "adjustmentReason": {
              "type": "string",
              "description": "adjustmentReason field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "adjustedStartTime": "string",
          "adjustedEndTime": "string",
          "adjustedDurationMs": "string",
          "originalDurationMs": "string",
          "adjustmentReason": "string"
        },
        "required": [
          "adjustedStartTime",
          "adjustedEndTime",
          "adjustedDurationMs",
          "originalDurationMs",
          "adjustmentReason"
        ]
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { taskId } = _params;\r\n  const userId = session.user.id;\r\n    return new NextResponse(\"Task ID is required\", { status: <cvv> });\r\n    const body = await req.json();\r\n    const { \r\n        return new NextResponse(\"Missing required fields for time-based adjustment\", { status: <cvv> });\r\n        return new NextResponse(\"Missing required fields for duration-based adjustment\", { status: <cvv> });\r\n      return new NextResponse(\"Either adjustedStartTime/adjustedEndTime or adjustedDurationMs must be provided\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const isWorkspaceOwner = task.workspace.ownerId === userId;\r\n    const workspaceMember = await prisma.workspaceMember.findUnique({\r\n      return new NextResponse(\"Forbidden\", { status: <cvv> });\r\n    const currentStartEvent = await prisma.userEvent.findFirst({\r\n      return new NextResponse(\"No active session found\", { status: <cvv> });\r\n    const existingStopEvent = await prisma.userEvent.findFirst({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/stop",
      "file": "src\\app\\api\\tasks\\[taskId]\\stop\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { taskId } = _params;\r\n  const userId = session.user.id;\r\n    return new NextResponse(\"Task ID is required\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const isWorkspaceOwner = task.workspace.ownerId === userId;\r\n    const workspaceMember = await prisma.workspaceMember.findUnique({\r\n      return new NextResponse(\"Forbidden\", { status: <cvv> });\r\n    const currentStartEvent = await prisma.userEvent.findFirst({\r\n      return new NextResponse(\"No active session found\", { status: <cvv> });\r\n    const existingStopEvent = await prisma.userEvent.findFirst({\r\n      return new NextResponse(\"Session already stopped\", { status: <cvv> });\r\n    const now = new Date();\r\n    const sessionDurationMs = now.getTime() - currentStartEvent.startedAt.getTime();\r\n    const oneMinuteMs = 60 * <cvv>; // 1 minute in milliseconds\r\n      return NextResponse.json({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/request-help",
      "file": "src\\app\\api\\tasks\\[taskId]\\request-help\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  const session = await getServerSession(authConfig);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const resolvedParams = await params;\r\n  const { taskId } = resolvedParams;\r\n    const task = await prisma.task.findFirst({\r\n      return new NextResponse(\"Task not found or access denied\", { status: <cvv> });\r\n    // Check if user already has a pending help request\r\n    const existingAssignment = await prisma.taskAssignee.findUnique({\r\n    // Only block if there's already a pending request\r\n      return new NextResponse(\"You already have a pending help request for this task\", { status: <cvv> });\r\n    // If user is already an approved helper, they can start working without requesting again\r\n      return NextResponse.json({ \r\n      return new NextResponse(\"You are already the assignee of this task\", { status: <cvv> });\r\n    // Create or update helper request<phone>assignedAt: new Date() // Update the request time\r\n      // Create new helper request\r\n    // Log activity for help request<phone>requesterName: session.user.name,\r\n    const notificationRecipients = [task.assigneeId, task.reporterId].filter(id => id && id !== session.user.id);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/sessions",
      "file": "src\\app\\api\\tasks\\[taskId]\\sessions\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export interface TaskSession {\r\nexport async function GET(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { taskId } = _params;\r\n  const userId = session.user.id;\r\n    return new NextResponse(\"Task ID is required\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const isWorkspaceOwner = task.workspace.ownerId === userId;\r\n    const workspaceMember = await prisma.workspaceMember.findUnique({\r\n      return new NextResponse(\"Forbidden\", { status: <cvv> });\r\n    const userEvents = await prisma.userEvent.findMany({\r\n    const sessions: TaskSession[] = [];\r\n    const userSessionStates: Record<string, any> = {}; // Track ongoing sessions per user\r\n      const event = userEvents[i];\r\n      const currentUserId = event.userId;\r\n        const currentStart = userSessionStates[currentUserId];\r\n        const durationMs = event.startedAt.getTime() - currentStart.startedAt.getTime();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/play",
      "file": "src\\app\\api\\tasks\\[taskId]\\play\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const { taskId } = params;\r\n  const userId = session.user.id;\r\n    return new NextResponse(\"Task ID is required\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const workspaceMember = await prisma.workspaceMember.findUnique({\r\n      const workspace = await prisma.workspace.findUnique({ where: { id: task.workspaceId } });\r\n        return new NextResponse(\"Forbidden: You are not authorized to perform this action on this task's workspace.\", { status: <cvv> });\r\n    const userEvent = await ActivityService.startActivity({\r\n    return NextResponse.json(userEvent, { status: <cvv> });\r\n    return new NextResponse(\"Internal Server Error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/playtime",
      "file": "src\\app\\api\\tasks\\[taskId]\\playtime\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { taskId } = _params;\r\n  const userId = session.user.id; // User ID for authorization and personal time tracking\r\n    return new NextResponse(\"Task ID is required\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const isWorkspaceOwner = task.workspace.ownerId === userId;\r\n    const workspaceMember = await prisma.workspaceMember.findUnique({\r\n      return new NextResponse(\"Forbidden: You are not authorized to access this task's playtime.\", { status: <cvv> });\r\n    const timeSpent = await ActivityService.getTaskTimeSpent(taskId, userId);\r\n    return NextResponse.json(timeSpent);\r\n    return new NextResponse(\"Internal Server Error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/helpers",
      "file": "src\\app\\api\\tasks\\[taskId]\\helpers\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  const session = await getServerSession(authConfig);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { taskId } = _params;\r\n    const task = await prisma.task.findFirst({\r\n      return new NextResponse(\"Task not found or access denied\", { status: <cvv> });\r\n    const taskAssignees = await prisma.taskAssignee.findMany({\r\n    const helpersWithActualTime = await Promise.all(\r\n      taskAssignees.map(async (assignee) => {\r\n        const events = await prisma.userEvent.findMany({\r\n        for (const event of events) {\r\n            const duration = event.startedAt.getTime() - currentStart.getTime();\r\n        return {\r\n    return NextResponse.json({ helpers: helpersWithActualTime });\r\n    return new NextResponse(\"Internal Server Error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/follow",
      "file": "src\\app\\api\\tasks\\[taskId]\\follow\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { taskId } = resolvedParams;\r\n    const task = await prisma.task.findFirst({\r\n      return NextResponse.json({ error: \"Task not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following task\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const DELETE = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { taskId } = resolvedParams;\r\n    const task = await prisma.task.findFirst({\r\n      return NextResponse.json({ error: \"Task not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed task\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const GET = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/follow",
      "file": "src\\app\\api\\tasks\\[taskId]\\follow\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { taskId } = resolvedParams;\r\n    const task = await prisma.task.findFirst({\r\n      return NextResponse.json({ error: \"Task not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following task\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const DELETE = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { taskId } = resolvedParams;\r\n    const task = await prisma.task.findFirst({\r\n      return NextResponse.json({ error: \"Task not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed task\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const GET = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/tasks/{taskId}/follow",
      "file": "src\\app\\api\\tasks\\[taskId]\\follow\\route.ts",
      "title": "Delete Tasks {taskId} by ID",
      "description": "Remove a tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Remove a tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { taskId } = resolvedParams;\r\n    const task = await prisma.task.findFirst({\r\n      return NextResponse.json({ error: \"Task not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following task\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const DELETE = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { taskId } = resolvedParams;\r\n    const task = await prisma.task.findFirst({\r\n      return NextResponse.json({ error: \"Task not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed task\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const GET = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/{taskId}/move",
      "file": "src\\app\\api\\tasks\\[taskId]\\move\\route.ts",
      "title": "Update Tasks {taskId} by ID",
      "description": "Partially update an existing tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "columnId": {
              "type": "string"
            },
            "position": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "columnId": "123",
          "position": "sample_position"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n    const _params = await params;\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { taskId } = _params;\r\n    const { columnId, position } = await req.json();\r\n      return NextResponse.json(\r\n    const task = await prisma.task.findUnique({\r\n      return NextResponse.json(\r\n    const hasAccess = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json(\r\n    const column = await prisma.taskColumn.findUnique({\r\n      return NextResponse.json(\r\n    await prisma.$transaction(async (tx) => {\r\n      const currentPosition = task.position || 0;\r\n          return;\r\n    const updatedTask = await prisma.task.findUnique({\r\n        const content = `Task moved from \"${task.column?.name || 'None'}\" to \"${column.name}\"`;\r\n        const fullTask = await prisma.task.findUnique({\r\n    return NextResponse.json(updatedTask);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/pause",
      "file": "src\\app\\api\\tasks\\[taskId]\\pause\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const { taskId } = params;\r\n  const userId = session.user.id;\r\n    return new NextResponse(\"Task ID is required\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const workspaceMember = await prisma.workspaceMember.findUnique({\r\n      const workspace = await prisma.workspace.findUnique({ where: { id: task.workspaceId } });\r\n        return new NextResponse(\"Forbidden: You are not authorized to perform this action on this task's workspace.\", { status: <cvv> });\r\n    const userEvent = await ActivityService.startActivity({\r\n    return NextResponse.json(userEvent, { status: <cvv> });\r\n    return new NextResponse(\"Internal Server Error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/{taskId}/edit",
      "file": "src\\app\\api\\tasks\\[taskId]\\edit\\route.ts",
      "title": "Update Tasks {taskId} by ID",
      "description": "Partially update an existing tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "priority": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "dueDate": {
              "type": "string"
            },
            "assigneeId": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "labels": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "title": "Sample Title",
          "description": "Sample description",
          "priority": "sample_priority",
          "status": "sample_status",
          "dueDate": "sample_dueDate",
          "assigneeId": "123",
          "type": "sample_type",
          "labels": "sample_labels"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n  request: NextRequest,\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const taskId = _params.taskId;\r\n    const { \r\n    } = await request.json();\r\n    const updatedTask = await updateTask(taskId, {\r\n    return NextResponse.json(updatedTask);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n      return NextResponse.json({ error: \"Task not found\" }, { status: <cvv> });\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/approve-help",
      "file": "src\\app\\api\\tasks\\[taskId]\\approve-help\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "helperId": {
              "type": "string"
            },
            "action": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "helperId": "123",
          "action": "sample_action"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  const session = await getServerSession(authConfig);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const { taskId } = params;\r\n  const { helperId, action } = await req.json(); // action: 'approve' | 'reject'\r\n    const task = await prisma.task.findFirst({\r\n      return new NextResponse(\"Task not found or you don't have permission to approve helpers\", { status: <cvv> });\r\n    // Find the help request\r\n    const helpRequest = await prisma.taskAssignee.findUnique({\r\n      return new NextResponse(\"Help request not found\", { status: <cvv> });\r\n      return new NextResponse(\"Help request has already been processed\", { status: <cvv> });\r\n    // Update the help request status\r\n    const updatedRequest = await prisma.taskAssignee.update({\r\n    // Log activity for help request approval/rejection\r\n          ? `Your help request for task \"${task.title}\" has been approved`\r\n          : `Your help request for task \"${task.title}\" has been rejected`\r\n    return NextResponse.json({ \r\n      message: `Help request ${action}d successfully`,\r\n    return new NextResponse(\"Internal Server Error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/adjust-time",
      "file": "src\\app\\api\\tasks\\[taskId]\\adjust-time\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "newDurationMs": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "originalDurationMs": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "newDurationMs": "sample_newDurationMs",
          "reason": "sample_reason",
          "originalDurationMs": "sample_originalDurationMs"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { taskId } = _params;\r\n  const userId = session.user.id;\r\n    return new NextResponse(\"Task ID is required\", { status: <cvv> });\r\n    const { newDurationMs, reason, originalDurationMs } = await req.json();\r\n      return new NextResponse(\"Invalid duration\", { status: <cvv> });\r\n      return new NextResponse(\"Reason is required\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const isWorkspaceOwner = task.workspace.ownerId === userId;\r\n    const workspaceMember = await prisma.workspaceMember.findUnique({\r\n      return new NextResponse(\"Forbidden: You are not authorized to adjust time for this task.\", { status: <cvv> });\r\n    const adjustmentMs = newDurationMs - originalDurationMs;\r\n    const isReduction = adjustmentMs < 0;\r\n    const originalFormatted = formatDurationUI(originalDurationMs);\r\n    const newFormatted = formatDurationUI(newDurationMs);\r\n    const adjustmentFormatted = formatDurationUI(adjustmentMs);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/comments",
      "file": "src\\app\\api\\tasks\\[taskId]\\comments\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const taskId = params.taskId;\r\n    const task = await prisma.task.findUnique({\r\n      return NextResponse.json({ error: \"Task not found\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const comments = await prisma.taskComment.findMany({\r\n    return NextResponse.json(comments);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const taskId = params.taskId;\r\n    const { content, html, parentId } = await request.json();\r\n      return NextResponse.json(\r\n    const comment = await addTaskComment(taskId, content, parentId, html);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/comments",
      "file": "src\\app\\api\\tasks\\[taskId]\\comments\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            },
            "html": {
              "type": "string"
            },
            "parentId": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "content": "sample_content",
          "html": "sample_html",
          "parentId": "123"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const taskId = params.taskId;\r\n    const task = await prisma.task.findUnique({\r\n      return NextResponse.json({ error: \"Task not found\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const comments = await prisma.taskComment.findMany({\r\n    return NextResponse.json(comments);\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const taskId = params.taskId;\r\n    const { content, html, parentId } = await request.json();\r\n      return NextResponse.json(\r\n    const comment = await addTaskComment(taskId, content, parentId, html);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/activities",
      "file": "src\\app\\api\\tasks\\[taskId]\\activities\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  const session = await getServerSession(authConfig);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { taskId } = _params;\r\n  const userId = session.user.id;\r\n    return new NextResponse(\"Task ID is required\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const isOwner = task.workspace.ownerId === userId;\r\n    const isMember = await prisma.workspaceMember.findUnique({\r\n      return new NextResponse(\"Forbidden: You are not authorized to view activities for this task.\", { status: <cvv> });\r\n    const activities = await getItemActivities(\r\n    return NextResponse.json(activities);\r\n    return new NextResponse(\"Internal Server Error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/tasks/columns/{columnId}",
      "file": "src\\app\\api\\tasks\\columns\\[columnId]\\route.ts",
      "title": "Delete Tasks Columns by ID",
      "description": "Remove a tasks columns",
      "parameters": [
        {
          "name": "columnId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: columnId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "color": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "name": "John Doe",
          "color": "sample_color"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Remove a tasks columns",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { columnId } = params;\r\n    const { name, color } = await req.json();\r\n      return NextResponse.json(\r\n    const column = await prisma.taskColumn.findUnique({\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json(\r\n    const userWorkspaceMembership = await prisma.workspaceMember.findFirst({\r\n    const isWorkspaceOwner = workspace.ownerId === currentUser.id;\r\n    const isWorkspaceAdmin = userWorkspaceMembership?.role === 'admin' || userWorkspaceMembership?.role === 'owner';\r\n    const isGlobalAdmin = currentUser.role === 'admin';\r\n      return NextResponse.json(\r\n    const updatedColumn = await prisma.taskColumn.update({\r\n    return NextResponse.json(updatedColumn);\r\n    return NextResponse.json(\r\nexport async function DELETE(\r\n    const currentUser = await getCurrentUser();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/columns/{columnId}",
      "file": "src\\app\\api\\tasks\\columns\\[columnId]\\route.ts",
      "title": "Update Tasks Columns by ID",
      "description": "Partially update an existing tasks columns",
      "parameters": [
        {
          "name": "columnId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: columnId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "color": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "name": "John Doe",
          "color": "sample_color"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks columns",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { columnId } = params;\r\n    const { name, color } = await req.json();\r\n      return NextResponse.json(\r\n    const column = await prisma.taskColumn.findUnique({\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json(\r\n    const userWorkspaceMembership = await prisma.workspaceMember.findFirst({\r\n    const isWorkspaceOwner = workspace.ownerId === currentUser.id;\r\n    const isWorkspaceAdmin = userWorkspaceMembership?.role === 'admin' || userWorkspaceMembership?.role === 'owner';\r\n    const isGlobalAdmin = currentUser.role === 'admin';\r\n      return NextResponse.json(\r\n    const updatedColumn = await prisma.taskColumn.update({\r\n    return NextResponse.json(updatedColumn);\r\n    return NextResponse.json(\r\nexport async function DELETE(\r\n    const currentUser = await getCurrentUser();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/boards/{boardId}",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\route.ts",
      "title": "Get Tasks Boards by ID",
      "description": "Retrieve tasks boards information",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks boards information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "function isCUID(str: string): boolean {\r\n  return /^c[a-z0-9]{24}$/.test(str);\r\nfunction isDatabaseId(str: string): boolean {\r\n  return isUUID(str) || isCUID(str);\r\nexport async function GET(req: NextRequest, { params }: { params: { boardId: string } }) {\r\n  const _params = await params;\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { boardId } = _params;\r\n      return NextResponse.json({ error: \"Board not found\" }, { status: <cvv> });\r\n    const hasPermission = await checkUserPermission(currentUser.id, board.workspaceId, Permission.EDIT_BOARD);\r\n      const isMember = await prisma.workspaceMember.findFirst({\r\n        return NextResponse.json({ error: \"You don't have access to this board\" }, { status: <cvv> });\r\n      for (const column of board.columns) {\r\n          const tasksWithoutPositions = column.tasks.filter((task: TaskWithPosition) => task.position === null);\r\n            const maxPosition = Math.max<phone>for (const task of tasksWithoutPositions) {\r\n              // Update the position in the response\r\n          // Sort tasks by position in the response\r\n    return NextResponse.json(board);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/boards/{boardId}",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\route.ts",
      "title": "Update Tasks Boards by ID",
      "description": "Partially update an existing tasks boards",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "issuePrefix": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "name": "John Doe",
          "description": "Sample description",
          "issuePrefix": "sample_issuePrefix"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks boards",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "function isCUID(str: string): boolean {\r\n  return /^c[a-z0-9]{24}$/.test(str);\r\nfunction isDatabaseId(str: string): boolean {\r\n  return isUUID(str) || isCUID(str);\r\nexport async function GET(req: NextRequest, { params }: { params: { boardId: string } }) {\r\n  const _params = await params;\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { boardId } = _params;\r\n      return NextResponse.json({ error: \"Board not found\" }, { status: <cvv> });\r\n    const hasPermission = await checkUserPermission(currentUser.id, board.workspaceId, Permission.EDIT_BOARD);\r\n      const isMember = await prisma.workspaceMember.findFirst({\r\n        return NextResponse.json({ error: \"You don't have access to this board\" }, { status: <cvv> });\r\n      for (const column of board.columns) {\r\n          const tasksWithoutPositions = column.tasks.filter((task: TaskWithPosition) => task.position === null);\r\n            const maxPosition = Math.max<phone>for (const task of tasksWithoutPositions) {\r\n              // Update the position in the response\r\n          // Sort tasks by position in the response\r\n    return NextResponse.json(board);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/projects/{projectId}/statuses",
      "file": "src\\app\\api\\projects\\[projectId]\\statuses\\route.ts",
      "title": "Get Projects {projectId} by ID",
      "description": "Retrieve projects {projectid} information",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "projects"
      ],
      "summary": "Retrieve projects {projectid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const project = await prisma.project.findUnique({\r\n      return NextResponse.json({ error: 'Project not found' }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Access denied' }, { status: <cvv> });\r\n    const projectStatuses = await prisma.projectStatus.findMany({\r\n    const transformedStatuses = projectStatuses.map(status => ({\r\n    return NextResponse.json({ statuses: transformedStatuses });\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const body = await request.json();\r\n    const { name, displayName, description, color, iconName, order, isDefault, isFinal, templateId } = body;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/projects/{projectId}/statuses",
      "file": "src\\app\\api\\projects\\[projectId]\\statuses\\route.ts",
      "title": "Create Projects {projectId} by ID",
      "description": "Create a new projects {projectid}",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "displayName": {
              "type": "string",
              "description": "displayName field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "iconName": {
              "type": "string",
              "description": "iconName field"
            },
            "order": {
              "type": "string",
              "description": "order field"
            },
            "isDefault": {
              "type": "string",
              "description": "isDefault field"
            },
            "isFinal": {
              "type": "string",
              "description": "isFinal field"
            },
            "templateId": {
              "type": "string",
              "description": "templateId field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "name": "string",
          "displayName": "string",
          "description": "string",
          "color": "string",
          "iconName": "string",
          "order": "string",
          "isDefault": "string",
          "isFinal": "string",
          "templateId": "string"
        },
        "required": [
          "name",
          "displayName",
          "color",
          "iconName",
          "order",
          "isDefault",
          "isFinal",
          "templateId"
        ]
      },
      "tags": [
        "projects"
      ],
      "summary": "Create a new projects {projectid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const project = await prisma.project.findUnique({\r\n      return NextResponse.json({ error: 'Project not found' }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Access denied' }, { status: <cvv> });\r\n    const projectStatuses = await prisma.projectStatus.findMany({\r\n    const transformedStatuses = projectStatuses.map(status => ({\r\n    return NextResponse.json({ statuses: transformedStatuses });\r\n    return NextResponse.json(\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const body = await request.json();\r\n    const { name, displayName, description, color, iconName, order, isDefault, isFinal, templateId } = body;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/projects/{projectId}/follow",
      "file": "src\\app\\api\\projects\\[projectId]\\follow\\route.ts",
      "title": "Get Projects {projectId} by ID",
      "description": "Retrieve projects {projectid} information",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "projects"
      ],
      "summary": "Retrieve projects {projectid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const project = await prisma.project.findFirst({\r\n      return NextResponse.json({ error: \"Project not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following project\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function DELETE(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const project = await prisma.project.findFirst({\r\n      return NextResponse.json({ error: \"Project not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed project\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/projects/{projectId}/follow",
      "file": "src\\app\\api\\projects\\[projectId]\\follow\\route.ts",
      "title": "Create Projects {projectId} by ID",
      "description": "Create a new projects {projectid}",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "projects"
      ],
      "summary": "Create a new projects {projectid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const project = await prisma.project.findFirst({\r\n      return NextResponse.json({ error: \"Project not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following project\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function DELETE(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const project = await prisma.project.findFirst({\r\n      return NextResponse.json({ error: \"Project not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed project\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/projects/{projectId}/follow",
      "file": "src\\app\\api\\projects\\[projectId]\\follow\\route.ts",
      "title": "Delete Projects {projectId} by ID",
      "description": "Remove a projects {projectid}",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "projects"
      ],
      "summary": "Remove a projects {projectid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const project = await prisma.project.findFirst({\r\n      return NextResponse.json({ error: \"Project not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following project\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function DELETE(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const project = await prisma.project.findFirst({\r\n      return NextResponse.json({ error: \"Project not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed project\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/projects/{projectId}/default-view",
      "file": "src\\app\\api\\projects\\[projectId]\\default-view\\route.ts",
      "title": "Get Projects {projectId} by ID",
      "description": "Retrieve projects {projectid} information",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "tags": [
        "projects"
      ],
      "summary": "Retrieve projects {projectid} information",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const { projectId } = await params;\r\n      return NextResponse.json({ error: 'Project ID is required' }, { status: <cvv> });\r\n    const defaultView = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: 'No default view found' }, { status: <cvv> });\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/reactions",
      "file": "src\\app\\api\\posts\\[postId]\\reactions\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const postId = (await params)?.postId;\r\n    const { type } = await req.json();\r\n      return new NextResponse(\"Invalid reaction type\", { status: <cvv> });\r\n    const post = await prisma.post.findUnique({\r\n      return new NextResponse(\"Post not found\", { status: <cvv> });\r\n    const existingReaction = await prisma.reaction.findFirst({\r\n      return NextResponse.json({\r\n    return NextResponse.json({\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const postId = (await params)?.postId;\r\n    const reactions = await prisma.reaction.findMany({\r\n    const hasReacted = reactions.some((reaction: Reaction) => reaction.authorId === currentUser.id);\r\n    return NextResponse.json({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/posts/{postId}/reactions",
      "file": "src\\app\\api\\posts\\[postId]\\reactions\\route.ts",
      "title": "Create Posts {postId} by ID",
      "description": "Create a new posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "type": "sample_type"
        }
      },
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts {postid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const postId = (await params)?.postId;\r\n    const { type } = await req.json();\r\n      return new NextResponse(\"Invalid reaction type\", { status: <cvv> });\r\n    const post = await prisma.post.findUnique({\r\n      return new NextResponse(\"Post not found\", { status: <cvv> });\r\n    const existingReaction = await prisma.reaction.findFirst({\r\n      return NextResponse.json({\r\n    return NextResponse.json({\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const postId = (await params)?.postId;\r\n    const reactions = await prisma.reaction.findMany({\r\n    const hasReacted = reactions.some((reaction: Reaction) => reaction.authorId === currentUser.id);\r\n    return NextResponse.json({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/tasks",
      "file": "src\\app\\api\\posts\\[postId]\\tasks\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n    const _params = await params;\r\n    const currentUser = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const { postId } = _params;\r\n    const post = await prisma.post.findUnique({\r\n      return new NextResponse(\"Post not found\", { status: <cvv> });\r\n    // If post doesn't have a workspaceId, return error\r\n      return new NextResponse(\"Post not associated with a workspace\", { status: <cvv> });\r\n    const userWorkspaces = await prisma.workspaceMember.findMany({\r\n    const userWorkspaceIds = userWorkspaces.map((wm: { workspaceId: string }) => wm.workspaceId);\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const tasks = await prisma.task.findMany({\r\n    return NextResponse.json(tasks);\r\n    return new NextResponse(\"Internal Error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PUT",
      "url": "/api/posts/{postId}/pin",
      "file": "src\\app\\api\\posts\\[postId]\\pin\\route.ts",
      "title": "Update Posts {postId} by ID",
      "description": "Update an existing posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "isPinned": {
              "type": "string",
              "description": "isPinned field"
            }
          },
          "required": []
        },
        "description": "Request body for PUT updating resource",
        "example": {
          "isPinned": "string"
        },
        "required": [
          "isPinned"
        ]
      },
      "tags": [
        "posts"
      ],
      "summary": "Update an existing posts {postid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PUT(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { postId } = _params;\r\n    const body = await request.json();\r\n    const { isPinned } = body;\r\n    const post = await prisma.post.findUnique({\r\n      return NextResponse.json({ error: 'Post not found' }, { status: <cvv> });\r\n      const hasPermission = await checkUserPermission(\r\n      const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json(\r\n    const updatedPost = await prisma.post.update({\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/posts/{postId}/resolve",
      "file": "src\\app\\api\\posts\\[postId]\\resolve\\route.ts",
      "title": "Update Posts {postId} by ID",
      "description": "Partially update an existing posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Partially update an existing posts {postid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n    const _params = await params;\r\n    const { postId } = _params;\r\n    const resolvedPost = await resolveBlockerPost(postId);\r\n    return NextResponse.json(resolvedPost);\r\n        return new NextResponse(error.message, { status: <cvv> });\r\n        return new NextResponse(error.message, { status: <cvv> });\r\n        return new NextResponse(error.message, { status: <cvv> });\r\n        return new NextResponse(error.message, { status: <cvv> });\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/follow",
      "file": "src\\app\\api\\posts\\[postId]\\follow\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { postId } = await params;\r\n    const userId = session.user.id;\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\nexport async function DELETE(\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { postId } = await params;\r\n    const userId = session.user.id;\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\nexport async function GET(\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { postId } = await params;\r\n    const userId = session.user.id;\r\n    const isFollowing = await NotificationService.isUserFollowingPost(postId, userId);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/posts/{postId}/follow",
      "file": "src\\app\\api\\posts\\[postId]\\follow\\route.ts",
      "title": "Create Posts {postId} by ID",
      "description": "Create a new posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts {postid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { postId } = await params;\r\n    const userId = session.user.id;\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\nexport async function DELETE(\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { postId } = await params;\r\n    const userId = session.user.id;\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\nexport async function GET(\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { postId } = await params;\r\n    const userId = session.user.id;\r\n    const isFollowing = await NotificationService.isUserFollowingPost(postId, userId);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/posts/{postId}/follow",
      "file": "src\\app\\api\\posts\\[postId]\\follow\\route.ts",
      "title": "Delete Posts {postId} by ID",
      "description": "Remove a posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Remove a posts {postid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { postId } = await params;\r\n    const userId = session.user.id;\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\nexport async function DELETE(\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { postId } = await params;\r\n    const userId = session.user.id;\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\nexport async function GET(\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { postId } = await params;\r\n    const userId = session.user.id;\r\n    const isFollowing = await NotificationService.isUserFollowingPost(postId, userId);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/comments",
      "file": "src\\app\\api\\posts\\[postId]\\comments\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const _params = await params;\r\n    const postId = await _params.postId;\r\n    const body = await req.json();\r\n    const { message, html, parentId } = body;\r\n      return new NextResponse(\"Message is required\", { status: <cvv> });\r\n      const parentComment = await prisma.comment.findUnique({\r\n        return new NextResponse(\"Parent comment not found\", { status: <cvv> });\r\n    const comment = await prisma.comment.create({\r\n    return NextResponse.json(comment);\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function GET(\r\n    const _params = await params;\r\n    const postId = await _params.postId;\r\n    const topLevelComments = await prisma.comment.findMany({\r\n    const replies = await prisma.comment.findMany({\r\n    const repliesByParentId = replies.reduce((acc, reply) => {\r\n      const parentId = reply.parentId as string;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/posts/{postId}/comments",
      "file": "src\\app\\api\\posts\\[postId]\\comments\\route.ts",
      "title": "Create Posts {postId} by ID",
      "description": "Create a new posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "message field"
            },
            "html": {
              "type": "string",
              "description": "html field"
            },
            "parentId": {
              "type": "string",
              "description": "parentId field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "message": "string",
          "html": "string",
          "parentId": "string"
        },
        "required": [
          "message",
          "html",
          "parentId"
        ]
      },
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts {postid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const _params = await params;\r\n    const postId = await _params.postId;\r\n    const body = await req.json();\r\n    const { message, html, parentId } = body;\r\n      return new NextResponse(\"Message is required\", { status: <cvv> });\r\n      const parentComment = await prisma.comment.findUnique({\r\n        return new NextResponse(\"Parent comment not found\", { status: <cvv> });\r\n    const comment = await prisma.comment.create({\r\n    return NextResponse.json(comment);\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function GET(\r\n    const _params = await params;\r\n    const postId = await _params.postId;\r\n    const topLevelComments = await prisma.comment.findMany({\r\n    const replies = await prisma.comment.findMany({\r\n    const repliesByParentId = replies.reduce((acc, reply) => {\r\n      const parentId = reply.parentId as string;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/bookmarks",
      "file": "src\\app\\api\\posts\\[postId]\\bookmarks\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { postId } = _params;\r\n    const post = await prisma.post.findUnique({\r\n      return NextResponse.json(\r\n    const existingBookmark = await prisma.bookmark.findFirst({\r\n    // If there's an existing bookmark, remove it (toggle functionality)\r\n      return NextResponse.json({ status: \"removed\" });\r\n    return NextResponse.json({ status: \"added\" });\r\n    return NextResponse.json(\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { postId } = _params;\r\n    const bookmark = await prisma.bookmark.findFirst({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/posts/{postId}/bookmarks",
      "file": "src\\app\\api\\posts\\[postId]\\bookmarks\\route.ts",
      "title": "Create Posts {postId} by ID",
      "description": "Create a new posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts {postid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { postId } = _params;\r\n    const post = await prisma.post.findUnique({\r\n      return NextResponse.json(\r\n    const existingBookmark = await prisma.bookmark.findFirst({\r\n    // If there's an existing bookmark, remove it (toggle functionality)\r\n      return NextResponse.json({ status: \"removed\" });\r\n    return NextResponse.json({ status: \"added\" });\r\n    return NextResponse.json(\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const _params = await params;\r\n    const { postId } = _params;\r\n    const bookmark = await prisma.bookmark.findFirst({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/actions",
      "file": "src\\app\\api\\posts\\[postId]\\actions\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n    const _params = await params;\r\n    const { postId } = _params;\r\n    const actions = await getPostActions(postId);\r\n    return NextResponse.json(actions);\r\n        return new NextResponse(error.message, { status: <cvv> });\r\n        return new NextResponse(error.message, { status: <cvv> });\r\n        return new NextResponse(error.message, { status: <cvv> });\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/notes/tags/{tagId}",
      "file": "src\\app\\api\\notes\\tags\\[tagId]\\route.ts",
      "title": "Delete Notes Tags by ID",
      "description": "Remove a notes tags",
      "parameters": [
        {
          "name": "tagId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: tagId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "notes"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "notes"
      ],
      "summary": "Remove a notes tags",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function DELETE(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { tagId } = params;\r\n      return NextResponse.json(\r\n    const existingTag = await prisma.noteTag.findFirst({\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r\n    return NextResponse.json({ message: \"Tag deleted successfully\" });\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/notifications/push/test",
      "file": "src\\app\\api\\notifications\\push\\test\\route.ts",
      "title": "Create Notifications Push by ID",
      "description": "Create a new notifications push",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "notifications"
      ],
      "summary": "Create a new notifications push",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const result = await sendPushNotification(user.id, {\r\n      return NextResponse.json({ success: true, message: \"Test notification sent!\" });\r\n      return NextResponse.json(\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/notifications/push/subscribe",
      "file": "src\\app\\api\\notifications\\push\\subscribe\\route.ts",
      "title": "Create Notifications Push by ID",
      "description": "Create a new notifications push",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": false,
          "description": "Bearer token for authentication"
        },
        {
          "name": "Content-Type",
          "required": false,
          "description": "Content type of the request"
        },
        {
          "name": "Accept",
          "required": false,
          "description": "Acceptable response types"
        },
        {
          "name": "User-Agent",
          "required": false,
          "description": "Client user agent"
        },
        {
          "name": "X-API-Key",
          "required": false,
          "description": "API key for authentication"
        },
        {
          "name": "X-Request-ID",
          "required": false,
          "description": "Unique request identifier"
        }
      ],
      "tags": [
        "notifications"
      ],
      "summary": "Create a new notifications push",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withCors(\r\n    withValidation(async function(request: NextRequest, { body }) {\r\n      const user = await getCurrentUser();\r\n        return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n      const { subscription } = body || {};\r\n        return NextResponse.json({ error: \"Invalid subscription data\" }, { status: <cvv> });\r\n      return NextResponse.json(\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\nexport const DELETE = withCors(\r\n  withRateLimit(async function(request: NextRequest) {\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\n// Handle preflight requests\r\nexport async function OPTIONS(request: NextRequest) {\r\n  return new NextResponse(null, {\r\n      'Access-Control-Allow-Origin': request.headers.get('origin') || '*',\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/notifications/push/subscribe",
      "file": "src\\app\\api\\notifications\\push\\subscribe\\route.ts",
      "title": "Delete Notifications Push by ID",
      "description": "Remove a notifications push",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": false,
          "description": "Bearer token for authentication"
        },
        {
          "name": "Content-Type",
          "required": false,
          "description": "Content type of the request"
        },
        {
          "name": "Accept",
          "required": false,
          "description": "Acceptable response types"
        },
        {
          "name": "User-Agent",
          "required": false,
          "description": "Client user agent"
        },
        {
          "name": "X-API-Key",
          "required": false,
          "description": "API key for authentication"
        },
        {
          "name": "X-Request-ID",
          "required": false,
          "description": "Unique request identifier"
        }
      ],
      "tags": [
        "notifications"
      ],
      "summary": "Remove a notifications push",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withCors(\r\n    withValidation(async function(request: NextRequest, { body }) {\r\n      const user = await getCurrentUser();\r\n        return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n      const { subscription } = body || {};\r\n        return NextResponse.json({ error: \"Invalid subscription data\" }, { status: <cvv> });\r\n      return NextResponse.json(\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\nexport const DELETE = withCors(\r\n  withRateLimit(async function(request: NextRequest) {\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\n// Handle preflight requests\r\nexport async function OPTIONS(request: NextRequest) {\r\n  return new NextResponse(null, {\r\n      'Access-Control-Allow-Origin': request.headers.get('origin') || '*',\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "OPTIONS",
      "url": "/api/notifications/push/subscribe",
      "file": "src\\app\\api\\notifications\\push\\subscribe\\route.ts",
      "title": "Options Notifications Push by ID",
      "description": "Get available options for notifications push",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": false,
          "description": "Bearer token for authentication"
        },
        {
          "name": "Content-Type",
          "required": false,
          "description": "Content type of the request"
        },
        {
          "name": "Accept",
          "required": false,
          "description": "Acceptable response types"
        },
        {
          "name": "User-Agent",
          "required": false,
          "description": "Client user agent"
        },
        {
          "name": "X-API-Key",
          "required": false,
          "description": "API key for authentication"
        },
        {
          "name": "X-Request-ID",
          "required": false,
          "description": "Unique request identifier"
        }
      ],
      "tags": [
        "notifications"
      ],
      "summary": "Get available options for notifications push",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withCors(\r\n    withValidation(async function(request: NextRequest, { body }) {\r\n      const user = await getCurrentUser();\r\n        return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n      const { subscription } = body || {};\r\n        return NextResponse.json({ error: \"Invalid subscription data\" }, { status: <cvv> });\r\n      return NextResponse.json(\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\nexport const DELETE = withCors(\r\n  withRateLimit(async function(request: NextRequest) {\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json(\r\n// Handle preflight requests\r\nexport async function OPTIONS(request: NextRequest) {\r\n  return new NextResponse(null, {\r\n      'Access-Control-Allow-Origin': request.headers.get('origin') || '*',\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/stop-with-adjustment",
      "file": "src\\app\\api\\issues\\[issueId]\\stop-with-adjustment\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "adjustedStartTime": {
              "type": "string",
              "description": "adjustedStartTime field"
            },
            "adjustedEndTime": {
              "type": "string",
              "description": "adjustedEndTime field"
            },
            "adjustedDurationMs": {
              "type": "string",
              "description": "adjustedDurationMs field"
            },
            "originalDurationMs": {
              "type": "string",
              "description": "originalDurationMs field"
            },
            "adjustmentReason": {
              "type": "string",
              "description": "adjustmentReason field"
            },
            "": {
              "type": "string",
              "description": " field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "adjustedStartTime": "string",
          "adjustedEndTime": "string",
          "adjustedDurationMs": "string",
          "originalDurationMs": "string",
          "adjustmentReason": "string",
          "": "string"
        },
        "required": [
          "adjustedStartTime",
          "adjustedEndTime",
          "adjustedDurationMs",
          "originalDurationMs",
          "adjustmentReason",
          ""
        ]
      },
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { issueId } = await params;\r\n    const body = await request.json();\r\n    const {\r\n    const issue = await prisma.issue.findUnique({\r\n      return NextResponse.json({ error: \"Issue not found\" }, { status: <cvv> });\r\n    const hasAccess = issue.workspace.ownerId === currentUser.id || \r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const activeTaskStartEvent = await prisma.userEvent.findFirst({\r\n      return NextResponse.json({ error: \"No active session found\" }, { status: <cvv> });\r\n    const adjustedStartDate = new Date(adjustedStartTime);\r\n    const adjustedEndDate = new Date(adjustedEndTime);\r\n      return NextResponse.json({ error: \"Start time must be before end time\" }, { status: <cvv> });\r\n      return NextResponse.json({ error: \"End time cannot be in the future\" }, { status: <cvv> });\r\n      return NextResponse.json({ error: \"Duration must be greater than 0\" }, { status: <cvv> });\r\n    return NextResponse.json({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/stop",
      "file": "src\\app\\api\\issues\\[issueId]\\stop\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { issueId } = await params;\r\n    const issue = await prisma.issue.findUnique({\r\n      return NextResponse.json({ error: \"Issue not found\" }, { status: <cvv> });\r\n    const hasAccess = issue.workspace.ownerId === currentUser.id || \r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const activeTaskStartEvent = await prisma.userEvent.findFirst({\r\n      return NextResponse.json({ error: \"No active session found\" }, { status: <cvv> });\r\n    const endTime = new Date();\r\n    const sessionDurationMs = endTime.getTime() - activeTaskStartEvent.startedAt.getTime();\r\n    return NextResponse.json({\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/request-help",
      "file": "src\\app\\api\\issues\\[issueId]\\request-help\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_0bqw577va",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.667Z",
              "taskBoardId": "board_biu4x5u1u",
              "columnId": "column_t259ay3j9",
              "workspaceId": "ws_cgzlnm818",
              "storyId": "story_ime65blnx",
              "reporterId": "user_65254ehmi",
              "assigneeId": "user_7poz8dgko",
              "createdAt": "2025-09-24T11:27:05.667Z",
              "updatedAt": "2025-09-24T11:27:05.667Z"
            },
            {
              "id": "issue_u1vfrf7gb",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.667Z",
              "taskBoardId": "board_rkd6sty01",
              "columnId": "column_6thdge2el",
              "workspaceId": "ws_wqw7g27ag",
              "storyId": "story_wz61r89jn",
              "reporterId": "user_12o0bph49",
              "assigneeId": "user_3mg89wez3",
              "createdAt": "2025-09-23T11:27:05.667Z",
              "updatedAt": "2025-09-24T11:27:05.667Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// POST /api/issues/[issueId]/request-help - Request to help with an issue\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { issueId } = await params;\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(issueId);\r\n    const issue = isIssueKey\r\n      return NextResponse.json({ error: \"Issue not found\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n      return NextResponse.json({ error: \"You are already the assignee of this issue\" }, { status: <cvv> });\r\n    const existingAssignment = await prisma.issueAssignee.findUnique({\r\n    // Only block if there's already a pending request\r\n      return NextResponse.json({ error: \"You already have a pending help request for this issue\" }, { status: <cvv> });\r\n    // If user is already an approved helper, they can start working without requesting again\r\n      return NextResponse.json({ \r\n    // Create or update helper request<phone>assignedAt: new Date() // Update the request time\r\n      // Create new helper request\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/issues/{issueId}/helpers",
      "file": "src\\app\\api\\issues\\[issueId]\\helpers\\route.ts",
      "title": "Get Issues {issueId} by ID",
      "description": "Retrieve issues {issueid} information",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues {issueid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { issueId } = await params;\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(issueId);\r\n    const issue = isIssueKey\r\n      return NextResponse.json({ error: \"Issue not found\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const helpers = await prisma.issueAssignee.findMany({\r\n    return NextResponse.json({ helpers });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/issues/{issueId}/playtime",
      "file": "src\\app\\api\\issues\\[issueId]\\playtime\\route.ts",
      "title": "Get Issues {issueId} by ID",
      "description": "Retrieve issues {issueid} information",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues {issueid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { issueId } = await params;\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(issueId);\r\n    const issue = isIssueKey\r\n      return NextResponse.json({ error: \"Issue not found\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const timeSpent = await ActivityService.getTaskTimeSpent(issue.id, currentUser.id);\r\n    return NextResponse.json(timeSpent);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/issues/{issueId}/follow",
      "file": "src\\app\\api\\issues\\[issueId]\\follow\\route.ts",
      "title": "Get Issues {issueId} by ID",
      "description": "Retrieve issues {issueid} information",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_by4fdq2n1",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.667Z",
              "taskBoardId": "board_mpcex5abk",
              "columnId": "column_eh94n9oql",
              "workspaceId": "ws_koqqvlx9h",
              "storyId": "story_h0mp0c4bj",
              "reporterId": "user_jeue71hv6",
              "assigneeId": "user_d1xgg2mmo",
              "createdAt": "2025-09-24T11:27:05.667Z",
              "updatedAt": "2025-09-24T11:27:05.667Z"
            },
            {
              "id": "issue_wetkewbx1",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.667Z",
              "taskBoardId": "board_dqnitivgk",
              "columnId": "column_hkbl2ucuq",
              "workspaceId": "ws_9trmzc7df",
              "storyId": "story_3o6unja96",
              "reporterId": "user_p8yx1v9l8",
              "assigneeId": "user_siimrmnh8",
              "createdAt": "2025-09-23T11:27:05.667Z",
              "updatedAt": "2025-09-24T11:27:05.667Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues {issueid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { issueId } = resolvedParams;\r\n    const issue = await prisma.issue.findFirst({\r\n      return NextResponse.json({ error: \"Issue not found or access denied\" }, { status: <cvv> });\r\n    const existingFollower = await prisma.issueFollower.findUnique({\r\n      return NextResponse.json({ error: \"Already following this issue\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following issue\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const DELETE = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { issueId } = resolvedParams;\r\n    const issue = await prisma.issue.findFirst({\r\n      return NextResponse.json({ error: \"Issue not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed issue\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/follow",
      "file": "src\\app\\api\\issues\\[issueId]\\follow\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_hr21xm0kd",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.667Z",
              "taskBoardId": "board_ki8jxjr1a",
              "columnId": "column_0hk3umgc0",
              "workspaceId": "ws_s36dxlgos",
              "storyId": "story_cu1easodh",
              "reporterId": "user_wfkyl0hco",
              "assigneeId": "user_h3r2ey9gp",
              "createdAt": "2025-09-24T11:27:05.667Z",
              "updatedAt": "2025-09-24T11:27:05.667Z"
            },
            {
              "id": "issue_6n0jpo0xq",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.667Z",
              "taskBoardId": "board_wbombvi5f",
              "columnId": "column_dcydqqn0r",
              "workspaceId": "ws_t3p1xr7ze",
              "storyId": "story_gj6jklzd8",
              "reporterId": "user_lh0krmmnz",
              "assigneeId": "user_kssw8tq8u",
              "createdAt": "2025-09-23T11:27:05.667Z",
              "updatedAt": "2025-09-24T11:27:05.667Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { issueId } = resolvedParams;\r\n    const issue = await prisma.issue.findFirst({\r\n      return NextResponse.json({ error: \"Issue not found or access denied\" }, { status: <cvv> });\r\n    const existingFollower = await prisma.issueFollower.findUnique({\r\n      return NextResponse.json({ error: \"Already following this issue\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following issue\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const DELETE = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { issueId } = resolvedParams;\r\n    const issue = await prisma.issue.findFirst({\r\n      return NextResponse.json({ error: \"Issue not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed issue\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/issues/{issueId}/follow",
      "file": "src\\app\\api\\issues\\[issueId]\\follow\\route.ts",
      "title": "Delete Issues {issueId} by ID",
      "description": "Remove a issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_ac139bjz0",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.667Z",
              "taskBoardId": "board_yty3d5drp",
              "columnId": "column_8i98d65v2",
              "workspaceId": "ws_drlfcwlyn",
              "storyId": "story_eoj97srb5",
              "reporterId": "user_kcwpmskjw",
              "assigneeId": "user_lnwfa2ynr",
              "createdAt": "2025-09-24T11:27:05.667Z",
              "updatedAt": "2025-09-24T11:27:05.667Z"
            },
            {
              "id": "issue_fb7cl9ecd",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.667Z",
              "taskBoardId": "board_sy7l9wzr5",
              "columnId": "column_dm8iqspmn",
              "workspaceId": "ws_p1w8y8kgp",
              "storyId": "story_nxybbsxoc",
              "reporterId": "user_o4vf22n37",
              "assigneeId": "user_l95rdgl2e",
              "createdAt": "2025-09-23T11:27:05.667Z",
              "updatedAt": "2025-09-24T11:27:05.667Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Remove a issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const POST = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { issueId } = resolvedParams;\r\n    const issue = await prisma.issue.findFirst({\r\n      return NextResponse.json({ error: \"Issue not found or access denied\" }, { status: <cvv> });\r\n    const existingFollower = await prisma.issueFollower.findUnique({\r\n      return NextResponse.json({ error: \"Already following this issue\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following issue\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport const DELETE = withRateLimit(async function(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { issueId } = resolvedParams;\r\n    const issue = await prisma.issue.findFirst({\r\n      return NextResponse.json({ error: \"Issue not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed issue\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/issues/{issueId}/comments",
      "file": "src\\app\\api\\issues\\[issueId]\\comments\\route.ts",
      "title": "Get Issues {issueId} by ID",
      "description": "Retrieve issues {issueid} information",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues {issueid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { issueId } = await params;\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(issueId);\r\n    const issue = isIssueKey\r\n      return NextResponse.json({ error: \"Issue not found\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const comments = await prisma.issueComment.findMany({\r\n    return NextResponse.json(comments);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { issueId } = await params;\r\n    const { content, html, parentId } = await request.json();\r\n      return NextResponse.json({ error: \"Content is required\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/comments",
      "file": "src\\app\\api\\issues\\[issueId]\\comments\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            },
            "html": {
              "type": "string"
            },
            "parentId": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "content": "sample_content",
          "html": "sample_html",
          "parentId": "123"
        }
      },
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { issueId } = await params;\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(issueId);\r\n    const issue = isIssueKey\r\n      return NextResponse.json({ error: \"Issue not found\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const comments = await prisma.issueComment.findMany({\r\n    return NextResponse.json(comments);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { issueId } = await params;\r\n    const { content, html, parentId } = await request.json();\r\n      return NextResponse.json({ error: \"Content is required\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/approve-help",
      "file": "src\\app\\api\\issues\\[issueId]\\approve-help\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_li0x562y8",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.668Z",
              "taskBoardId": "board_7l86tviee",
              "columnId": "column_rowa9wmbj",
              "workspaceId": "ws_z6cg28p4z",
              "storyId": "story_x1s4axrwv",
              "reporterId": "user_ttqmvbowi",
              "assigneeId": "user_nc8hpu3sg",
              "createdAt": "2025-09-24T11:27:05.668Z",
              "updatedAt": "2025-09-24T11:27:05.668Z"
            },
            {
              "id": "issue_xtka1q4ot",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.668Z",
              "taskBoardId": "board_wz1z3mxk4",
              "columnId": "column_cltl0ls45",
              "workspaceId": "ws_qryn27ydu",
              "storyId": "story_rlysjbq0l",
              "reporterId": "user_v7ca5fgf0",
              "assigneeId": "user_nxy1gyao4",
              "createdAt": "2025-09-23T11:27:05.668Z",
              "updatedAt": "2025-09-24T11:27:05.668Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "helperId": {
              "type": "string",
              "description": "helperId field"
            },
            "action": {
              "type": "string",
              "description": "action field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "helperId": "string",
          "action": "string"
        },
        "required": [
          "helperId",
          "action"
        ]
      },
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// POST /api/issues/[issueId]/approve-help - Approve or reject a help request\r\nexport async function POST(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { issueId } = await params;\r\n    const body = await request.json();\r\n    const { helperId, action } = body;\r\n      return NextResponse.json({ error: \"Invalid request parameters\" }, { status: <cvv> });\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(issueId);\r\n    const issue = isIssueKey\r\n      return NextResponse.json({ error: \"Issue not found\" }, { status: <cvv> });\r\n      return NextResponse.json({ error: \"You don't have permission to approve helpers for this issue\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const helper = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"Helper not found\" }, { status: <cvv> });\r\n    const helperAssignment = await prisma.issueAssignee.findUnique({\r\n      return NextResponse.json({ error: \"Helper assignment not found\" }, { status: <cvv> });\r\n      return NextResponse.json({ error: \"This help request has already been processed\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PUT",
      "url": "/api/leave/requests/{requestId}",
      "file": "src\\app\\api\\leave\\requests\\[requestId]\\route.ts",
      "title": "Update Leave Requests by ID",
      "description": "PUT /api/leave/requests/[requestId] - Edit leave request (user edits their own pending request)",
      "parameters": [
        {
          "name": "requestId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: requestId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "notes"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "PUT /api/leave/requests/[requestId] - Edit leave request (user edits their own pending request)",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const updateLeaveRequestSchema = z.object({\r\n// Schema for editing leave request data (user edits)\r\nconst editLeaveRequestSchema = z.object({\r\n * PATCH /api/leave/requests/[requestId] - Update leave request status (approve/reject)\r\nexport async function PATCH(\r\n  { params }: { params: Promise<{ requestId: string }> }\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { requestId } = await params;\r\n    const body = await req.json();\r\n    const validated = updateLeaveRequestSchema.safeParse(body);\r\n      return NextResponse.json<phone>error: \"Invalid request data\",\r\n    const { status, notes } = validated.data;\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const result = await processLeaveRequestAction({\r\n      requestId,\r\n      // Log but don't fail the request\r\n        \"Failed to send leave request status notifications:\",\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/leave/requests/{requestId}",
      "file": "src\\app\\api\\leave\\requests\\[requestId]\\route.ts",
      "title": "Delete Leave Requests by ID",
      "description": "DELETE /api/leave/requests/[requestId] - Cancel leave request (user cancels their own pending request)",
      "parameters": [
        {
          "name": "requestId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: requestId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "notes"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for DELETE deleting resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "DELETE /api/leave/requests/[requestId] - Cancel leave request (user cancels their own pending request)",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const updateLeaveRequestSchema = z.object({\r\n// Schema for editing leave request data (user edits)\r\nconst editLeaveRequestSchema = z.object({\r\n * PATCH /api/leave/requests/[requestId] - Update leave request status (approve/reject)\r\nexport async function PATCH(\r\n  { params }: { params: Promise<{ requestId: string }> }\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { requestId } = await params;\r\n    const body = await req.json();\r\n    const validated = updateLeaveRequestSchema.safeParse(body);\r\n      return NextResponse.json<phone>error: \"Invalid request data\",\r\n    const { status, notes } = validated.data;\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const result = await processLeaveRequestAction({\r\n      requestId,\r\n      // Log but don't fail the request\r\n        \"Failed to send leave request status notifications:\",\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/leave/requests/{requestId}",
      "file": "src\\app\\api\\leave\\requests\\[requestId]\\route.ts",
      "title": "Update Leave Requests by ID",
      "description": "PATCH /api/leave/requests/[requestId] - Update leave request status (approve/reject)",
      "parameters": [
        {
          "name": "requestId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: requestId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "notes"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "PATCH /api/leave/requests/[requestId] - Update leave request status (approve/reject)",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const updateLeaveRequestSchema = z.object({\r\n// Schema for editing leave request data (user edits)\r\nconst editLeaveRequestSchema = z.object({\r\n * PATCH /api/leave/requests/[requestId] - Update leave request status (approve/reject)\r\nexport async function PATCH(\r\n  { params }: { params: Promise<{ requestId: string }> }\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { requestId } = await params;\r\n    const body = await req.json();\r\n    const validated = updateLeaveRequestSchema.safeParse(body);\r\n      return NextResponse.json<phone>error: \"Invalid request data\",\r\n    const { status, notes } = validated.data;\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const result = await processLeaveRequestAction({\r\n      requestId,\r\n      // Log but don't fail the request\r\n        \"Failed to send leave request status notifications:\",\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/leave/requests/workspace",
      "file": "src\\app\\api\\leave\\requests\\workspace\\route.ts",
      "title": "Get Leave Requests by ID",
      "description": "GET /api/leave/requests/workspace?workspaceId=xxx - Get all leave requests for a workspace (managers only)",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "leave"
      ],
      "summary": "GET /api/leave/requests/workspace?workspaceId=xxx - Get all leave requests for a workspace (managers only)",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": " * GET /api/leave/requests/workspace?workspaceId=xxx - Get all leave requests for a workspace (managers only)\r\nexport async function GET(req: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const url = new URL(req.url);\r\n    const workspaceSlugOrId = url.searchParams.get(\"workspaceId\");\r\n      return NextResponse.json(\r\n    const workspaceId = await resolveWorkspaceSlug(workspaceSlugOrId);\r\n      return NextResponse.json(\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const workspaceExists = await prisma.workspace.findUnique({\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json(\r\n    // Check if user has permission to manage leave requests\r\n    const hasManageLeavePermission = await checkUserPermission(\r\n      return NextResponse.json(\r\n            \"Insufficient permissions to view leave requests. Only workspace owners, admins, and HR personnel can view leave requests.\",\r\n    // Get all leave requests for the workspace\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/leave/policies/{policyId}",
      "file": "src\\app\\api\\leave\\policies\\[policyId]\\route.ts",
      "title": "Get Leave Policies by ID",
      "description": "GET /api/leave/policies/[policyId] - Get a specific leave policy",
      "parameters": [
        {
          "name": "policyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: policyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "leave"
      ],
      "summary": "GET /api/leave/policies/[policyId] - Get a specific leave policy",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const updateLeavePolicySchema = z.object({\r\n  exportMode: z\r\n  exportCode: z.string().nullable().optional(),\r\nexport async function GET(\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const policy = await prisma.leavePolicy.findUnique({\r\n      return NextResponse.json({ error: \"Policy not found\" }, { status: <cvv> });\r\n    const isOwner = policy.workspace.ownerId === user.id;\r\n    const isMember = policy.workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    // Remove workspace from response\r\n    const { workspace, ...policyData } = policy;\r\n    return NextResponse.json(policyData);\r\n    return NextResponse.json(\r\nexport async function PUT(\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PUT",
      "url": "/api/leave/policies/{policyId}",
      "file": "src\\app\\api\\leave\\policies\\[policyId]\\route.ts",
      "title": "Update Leave Policies by ID",
      "description": "PUT /api/leave/policies/[policyId] - Update a leave policy",
      "parameters": [
        {
          "name": "policyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: policyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "PUT /api/leave/policies/[policyId] - Update a leave policy",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const updateLeavePolicySchema = z.object({\r\n  exportMode: z\r\n  exportCode: z.string().nullable().optional(),\r\nexport async function GET(\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const policy = await prisma.leavePolicy.findUnique({\r\n      return NextResponse.json({ error: \"Policy not found\" }, { status: <cvv> });\r\n    const isOwner = policy.workspace.ownerId === user.id;\r\n    const isMember = policy.workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    // Remove workspace from response\r\n    const { workspace, ...policyData } = policy;\r\n    return NextResponse.json(policyData);\r\n    return NextResponse.json(\r\nexport async function PUT(\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/leave/policies/{policyId}",
      "file": "src\\app\\api\\leave\\policies\\[policyId]\\route.ts",
      "title": "Delete Leave Policies by ID",
      "description": "DELETE /api/leave/policies/[policyId] - Delete a leave policy",
      "parameters": [
        {
          "name": "policyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: policyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for DELETE deleting resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "DELETE /api/leave/policies/[policyId] - Delete a leave policy",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const updateLeavePolicySchema = z.object({\r\n  exportMode: z\r\n  exportCode: z.string().nullable().optional(),\r\nexport async function GET(\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: \"User not found\" }, { status: <cvv> });\r\n    const policy = await prisma.leavePolicy.findUnique({\r\n      return NextResponse.json({ error: \"Policy not found\" }, { status: <cvv> });\r\n    const isOwner = policy.workspace.ownerId === user.id;\r\n    const isMember = policy.workspace.members.length > 0;\r\n      return NextResponse.json(\r\n    // Remove workspace from response\r\n    const { workspace, ...policyData } = policy;\r\n    return NextResponse.json(policyData);\r\n    return NextResponse.json(\r\nexport async function PUT(\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/features/{id}/comments",
      "file": "src\\app\\api\\features\\[id]\\comments\\route.ts",
      "title": "Get Features {id} by ID",
      "description": "Retrieve features {id} information",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "features"
      ],
      "summary": "Retrieve features {id} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const commentSchema = z.object({\r\n// GET /api/features/:id/comments - Get comments for a feature request\r\nexport async function GET(\r\n    const _params = await params;\r\n    const { id } = _params;\r\n    const url = new URL(req.url);\r\n    const page = parseInt(url.searchParams.get(\"page\") || \"1\");\r\n    const limit = parseInt(url.searchParams.get(\"limit\") || \"20\");\r\n    const skip = (page - 1) * limit;\r\n    // Check if feature request exists\r\n    const featureRequest = await prisma.featureRequest.findUnique({\r\n      return NextResponse.json(\r\n        { error: \"Feature request not found\" },\r\n    const comments = await prisma.featureRequestComment.findMany({\r\n    const totalComments = await prisma.featureRequestComment.count({\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r\n// POST /api/features/:id/comments - Create a comment on a feature request\r\nexport async function POST(\r\n    const session = await getAuthSession();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/features/{id}/comments",
      "file": "src\\app\\api\\features\\[id]\\comments\\route.ts",
      "title": "Create Features {id} by ID",
      "description": "Create a new features {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "features"
      ],
      "summary": "Create a new features {id}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const commentSchema = z.object({\r\n// GET /api/features/:id/comments - Get comments for a feature request\r\nexport async function GET(\r\n    const _params = await params;\r\n    const { id } = _params;\r\n    const url = new URL(req.url);\r\n    const page = parseInt(url.searchParams.get(\"page\") || \"1\");\r\n    const limit = parseInt(url.searchParams.get(\"limit\") || \"20\");\r\n    const skip = (page - 1) * limit;\r\n    // Check if feature request exists\r\n    const featureRequest = await prisma.featureRequest.findUnique({\r\n      return NextResponse.json(\r\n        { error: \"Feature request not found\" },\r\n    const comments = await prisma.featureRequestComment.findMany({\r\n    const totalComments = await prisma.featureRequestComment.count({\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r\n// POST /api/features/:id/comments - Create a comment on a feature request\r\nexport async function POST(\r\n    const session = await getAuthSession();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/features/{id}/vote",
      "file": "src\\app\\api\\features\\[id]\\vote\\route.ts",
      "title": "Create Features {id} by ID",
      "description": "Create a new features {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "features"
      ],
      "summary": "Create a new features {id}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "const voteSchema = z.object({\r\n// POST /api/features/:id/vote - Vote on a feature request\r\nexport async function POST(\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { id } = _params;\r\n    const body = await req.json();\r\n    const validated = voteSchema.safeParse(body);\r\n      return NextResponse.json(\r\n    const { value } = validated.data;\r\n    // Check if feature request exists\r\n    const featureRequest = await prisma.featureRequest.findUnique({\r\n      return NextResponse.json(\r\n        { error: \"Feature request not found\" },\r\n    const existingVote = await prisma.featureVote.findUnique({\r\n    const upvotes = await prisma.featureVote.count({\r\n    const downvotes = await prisma.featureVote.count({\r\n    const voteScore = upvotes - downvotes;\r\n    const vote = value === 0 ? null : await prisma.featureVote.findUnique({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/boards/{boardId}/follow",
      "file": "src\\app\\api\\boards\\[boardId]\\follow\\route.ts",
      "title": "Get Boards {boardId} by ID",
      "description": "Retrieve boards {boardid} information",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "boards"
      ],
      "summary": "Retrieve boards {boardid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { boardId } = resolvedParams;\r\n    const board = await prisma.taskBoard.findFirst({\r\n      return NextResponse.json({ error: \"Board not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following board\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function DELETE(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { boardId } = resolvedParams;\r\n    const board = await prisma.taskBoard.findFirst({\r\n      return NextResponse.json({ error: \"Board not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed board\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/boards/{boardId}/follow",
      "file": "src\\app\\api\\boards\\[boardId]\\follow\\route.ts",
      "title": "Create Boards {boardId} by ID",
      "description": "Create a new boards {boardid}",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "boards"
      ],
      "summary": "Create a new boards {boardid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { boardId } = resolvedParams;\r\n    const board = await prisma.taskBoard.findFirst({\r\n      return NextResponse.json({ error: \"Board not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following board\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function DELETE(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { boardId } = resolvedParams;\r\n    const board = await prisma.taskBoard.findFirst({\r\n      return NextResponse.json({ error: \"Board not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed board\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/boards/{boardId}/follow",
      "file": "src\\app\\api\\boards\\[boardId]\\follow\\route.ts",
      "title": "Delete Boards {boardId} by ID",
      "description": "Remove a boards {boardid}",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "boards"
      ],
      "summary": "Remove a boards {boardid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { boardId } = resolvedParams;\r\n    const board = await prisma.taskBoard.findFirst({\r\n      return NextResponse.json({ error: \"Board not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully following board\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function DELETE(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { boardId } = resolvedParams;\r\n    const board = await prisma.taskBoard.findFirst({\r\n      return NextResponse.json({ error: \"Board not found or access denied\" }, { status: <cvv> });\r\n    return NextResponse.json({ message: \"Successfully unfollowed board\" });\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: <cvv> });\r\nexport async function GET(\r\n    const currentUser = await getCurrentUser();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/boards/{boardId}/columns",
      "file": "src\\app\\api\\boards\\[boardId]\\columns\\route.ts",
      "title": "Get Boards {boardId} by ID",
      "description": "Retrieve boards {boardid} information",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "boards"
      ],
      "summary": "Retrieve boards {boardid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n  const _params = await params;\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const boardId = _params.boardId;\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json({ error: \"Board not found\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const columns = await prisma.taskColumn.findMany({\r\n    return NextResponse.json(columns);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/ai/create-stories/start",
      "file": "src\\app\\api\\ai\\create-stories\\start\\route.ts",
      "title": "Create Ai Create-stories by ID",
      "description": "Create a new ai create-stories",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "stories": {
              "type": "string"
            },
            "epicId": {
              "type": "string"
            },
            "boardId": {
              "type": "string"
            },
            "workspaceId": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "stories": "sample_stories",
          "epicId": "123",
          "boardId": "123",
          "workspaceId": "123"
        }
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai create-stories",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { stories, epicId, boardId, workspaceId } = await request.json();\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found or access denied' }, { status: <cvv> });\r\n    const jobId = `story_job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    const job: JobStatus = {\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r\n// Helper function to update job status\r\nasync function updateJobStatus(jobId: string, status: JobStatus['status'], progress: number, currentStep: string) {\r\n    const job = await jobStorage.get(jobId);\r\n// Background story creation function\r\nasync function startBackgroundStoryCreation(jobId: string) {\r\n  setTimeout(async () => {\r\n      const job = await jobStorage.get(jobId);\r\n        return;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/ai/create-stories/jobs",
      "file": "src\\app\\api\\ai\\create-stories\\jobs\\route.ts",
      "title": "Get Ai Create-stories by ID",
      "description": "Retrieve ai create-stories information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai create-stories information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get('workspaceId');\r\n      return NextResponse.json(\r\n    const allJobs = await jobStorage.getAll();\r\n    const userJobs = allJobs.filter(job => \r\n    const recentJobs = userJobs.slice(0, 10);\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/ai/board-generation/start",
      "file": "src\\app\\api\\ai\\board-generation\\start\\route.ts",
      "title": "Create Ai Board-generation by ID",
      "description": "Create a new ai board-generation",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "projectType": {
              "type": "string"
            },
            "teamSize": {
              "type": "string"
            },
            "workspaceId": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "description": "Sample description",
          "projectType": "sample_projectType",
          "teamSize": "sample_teamSize",
          "workspaceId": "123"
        }
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai board-generation",
      "authentication": {
        "type": "api-key",
        "required": true,
        "description": "API key authentication required. Include X-API-Key header with your request.",
        "headerName": "X-API-Key",
        "headerFormat": "<your-api-key>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "function mockData() {\r\n  return false; //use for production testing\r\n //   return process.env.NODE_ENV === 'development';\r\nexport async function POST(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { description, projectType, teamSize, workspaceId } = await request.json();\r\n      return NextResponse.json(\r\n    const jobId = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    const job: JobStatus = {\r\n    const allJobs = await jobStorage.getAll();\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r\n// Background generation function\r\nasync function startBackgroundGeneration(jobId: string) {\r\n  // Run this in background without blocking the response\r\n  setTimeout(async () => {\r\n      const job = await jobStorage.get(jobId);\r\n      if (!job) return;\r\n      const milestones = await generateMilestones(job.description, job.projectType, job.teamSize, job.userId);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/ai/board-generation/status",
      "file": "src\\app\\api\\ai\\board-generation\\status\\route.ts",
      "title": "Get Ai Board-generation by ID",
      "description": "Retrieve ai board-generation information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai board-generation information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const url = new URL(request.url);\r\n    const jobId = url.searchParams.get('jobId');\r\n      return NextResponse.json(\r\n    const job = await jobStorage.get(jobId);\r\n    const allJobs = await jobStorage.getAll();\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/ai/board-generation/jobs",
      "file": "src\\app\\api\\ai\\board-generation\\jobs\\route.ts",
      "title": "Get Ai Board-generation by ID",
      "description": "Retrieve ai board-generation information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai board-generation information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const url = new URL(request.url);\r\n    const workspaceId = url.searchParams.get('workspaceId');\r\n      return NextResponse.json(\r\n    const userJobs = (await jobStorage.getByWorkspace(workspaceId)).filter(\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/conversations/{conversationId}/messages",
      "file": "src\\app\\api\\conversations\\[conversationId]\\messages\\route.ts",
      "title": "Get Conversations {conversationId} by ID",
      "description": "Retrieve conversations {conversationid} information",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: conversationId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "conversations"
      ],
      "summary": "Retrieve conversations {conversationid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: Request,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { conversationId } = _params;\r\n    const conversation = await prisma.conversation.findFirst({\r\n      return NextResponse.json({ error: 'Conversation not found' }, { status: <cvv> });\r\n    const messages = await prisma.message.findMany({\r\n    return NextResponse.json(messages);\r\n    return NextResponse.json({ error: 'Failed to fetch messages' }, { status: <cvv> });\r\nexport async function POST(\r\n  request: Request,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { conversationId } = _params;\r\n    const conversation = await prisma.conversation.findFirst({\r\n      return NextResponse.json({ error: 'Conversation not found' }, { status: <cvv> });\r\n    const body = await request.json();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/conversations/{conversationId}/messages",
      "file": "src\\app\\api\\conversations\\[conversationId]\\messages\\route.ts",
      "title": "Create Conversations {conversationId} by ID",
      "description": "Create a new conversations {conversationid}",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: conversationId"
        },
        {
          "name": "body",
          "type": "object",
          "required": true,
          "location": "body",
          "description": "Request body"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "description": "content field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "content": "string"
        },
        "required": [
          "content"
        ]
      },
      "tags": [
        "conversations"
      ],
      "summary": "Create a new conversations {conversationid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: Request,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { conversationId } = _params;\r\n    const conversation = await prisma.conversation.findFirst({\r\n      return NextResponse.json({ error: 'Conversation not found' }, { status: <cvv> });\r\n    const messages = await prisma.message.findMany({\r\n    return NextResponse.json(messages);\r\n    return NextResponse.json({ error: 'Failed to fetch messages' }, { status: <cvv> });\r\nexport async function POST(\r\n  request: Request,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { conversationId } = _params;\r\n    const conversation = await prisma.conversation.findFirst({\r\n      return NextResponse.json({ error: 'Conversation not found' }, { status: <cvv> });\r\n    const body = await request.json();\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/ai/create-tasks/start",
      "file": "src\\app\\api\\ai\\create-tasks\\start\\route.ts",
      "title": "Create Ai Create-tasks by ID",
      "description": "Create a new ai create-tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "string"
            },
            "storyId": {
              "type": "string"
            },
            "boardId": {
              "type": "string"
            },
            "workspaceId": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "tasks": "sample_tasks",
          "storyId": "123",
          "boardId": "123",
          "workspaceId": "123"
        }
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai create-tasks",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { tasks, storyId, boardId, workspaceId } = await request.json();\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found or access denied' }, { status: <cvv> });\r\n    const jobId = `ta<api-key>${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    const job: JobStatus = {\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r\n// Background task creation function\r\nasync function startBackgroundTaskCreation(jobId: string) {\r\n  setTimeout(async () => {\r\n      const job = await jobStorage.get(jobId);\r\n        return;\r\n      const { tasks, storyId, boardId } = job.boardData;\r\n      const story = await prisma.story.findFirst({\r\n        return;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/ai/create-tasks/jobs",
      "file": "src\\app\\api\\ai\\create-tasks\\jobs\\route.ts",
      "title": "Get Ai Create-tasks by ID",
      "description": "Retrieve ai create-tasks information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai create-tasks information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(request: NextRequest) {\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get('workspaceId');\r\n      return NextResponse.json({ error: 'Workspace ID is required' }, { status: <cvv> });\r\n    const allJobs = await jobStorage.getByWorkspace(workspaceId);\r\n    const taskJobs = allJobs.filter(job => \r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/activities/timesheet/export",
      "file": "src\\app\\api\\activities\\timesheet\\export\\route.ts",
      "title": "Create Activities Timesheet by ID",
      "description": "Create a new activities timesheet",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "activities"
      ],
      "summary": "Create a new activities timesheet",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(request: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { searchParams } = new URL(request.url);\r\n    const workspaceId = searchParams.get('workspaceId');\r\n    const view = searchParams.get('view') || 'daily';\r\n    const date = searchParams.get('date') || new Date().toISOString();\r\n    const boardId = searchParams.get('boardId');\r\n    const exportFormat = searchParams.get('format') || 'csv';\r\n    const userId = session.user.id;\r\n      return NextResponse.json({ error: \"Workspace ID is required\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Workspace not found or access denied\" }, { status: <cvv> });\r\n    const targetDate = new Date(date);\r\n    const userEvents = await prisma.userEvent.findMany({\r\n    if (exportFormat === 'csv') {\r\n      return generateCSVExport(userEvents, view, startDate);\r\n    } else if (exportFormat === 'pdf') {\r\n      return generatePDFExport(userEvents, view, startDate, endDate, workspace.name);\r\n    return NextResponse.json({ error: \"Invalid export format\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/activities/sessions/{sessionId}",
      "file": "src\\app\\api\\activities\\sessions\\[sessionId]\\route.ts",
      "title": "Update Activities Sessions by ID",
      "description": "Partially update an existing activities sessions",
      "parameters": [
        {
          "name": "sessionId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: sessionId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "startTime": {
              "type": "string"
            },
            "endTime": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "startTime": "sample_startTime",
          "endTime": "sample_endTime",
          "reason": "sample_reason",
          "description": "Sample description"
        }
      },
      "tags": [
        "activities"
      ],
      "summary": "Partially update an existing activities sessions",
      "authentication": {
        "type": "basic",
        "required": true,
        "description": "Basic authentication required.",
        "headerName": "Authorization",
        "headerFormat": "Basic <base64-encoded-credentials>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { sessionId: \"<session-id>\"} = _params;\r\n  const userId = session.user.id;\r\n    return new NextResponse(\"Session ID is required\", { status: <cvv> });\r\n    const { startTime, endTime, reason, description } = await req.json();\r\n      return new NextResponse(\"Start time and end time are required\", { status: <cvv> });\r\n      return new NextResponse(\"Reason is required\", { status: <cvv> });\r\n    const startDate = new Date(startTime);\r\n    const endDate = new Date(endTime);\r\n    const now = new Date();\r\n      return new NextResponse(\"Start time must be before end time\", { status: <cvv> });\r\n      return new NextResponse(\"Start time cannot be in the future\", { status: <cvv> });\r\n      return new NextResponse(\"End time cannot be in the future\", { status: <cvv> });\r\n    const [startEventId, endEventId] = sessionId: \"<session-id>\", { status: <cvv> });\r\n    const startEvent = await prisma.userEvent.findUnique({\r\n    const endEvent = await prisma.userEvent.findUnique({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PUT",
      "url": "/api/workspaces/{workspaceId}/views/{viewId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\views\\[viewId]\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "displayType": {
              "type": "string",
              "description": "displayType field"
            },
            "filters": {
              "type": "string",
              "description": "filters field"
            },
            "sorting": {
              "type": "string",
              "description": "sorting field"
            },
            "grouping": {
              "type": "string",
              "description": "grouping field"
            },
            "fields": {
              "type": "string",
              "description": "fields field"
            },
            "visibility": {
              "type": "string",
              "description": "visibility field"
            },
            "ownerId": {
              "type": "string",
              "description": "ownerId field"
            }
          },
          "required": []
        },
        "description": "Request body for PUT updating resource",
        "example": {
          "name": "string",
          "displayType": "string",
          "filters": "string",
          "sorting": "string",
          "grouping": "string",
          "fields": "string",
          "visibility": "string",
          "ownerId": "string"
        },
        "required": [
          "name",
          "displayType",
          "filters",
          "sorting",
          "grouping",
          "fields",
          "visibility",
          "ownerId"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Update an existing workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PUT(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, viewId } = await params;\r\n    const body = await request.json();\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const existingView = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: 'View not found or insufficient permissions' }, { status: <cvv> });\r\n    const { \r\n      const validVisibilities = ['PERSONAL', 'WORKSPACE', 'SHARED'];\r\n        return NextResponse.json(\r\n      const newOwner = await prisma.user.findFirst({\r\n        return NextResponse.json<phone>return NextResponse.json<phone>return NextResponse.json(\r\n    const updateData: any = {};\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/views/{viewId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\views\\[viewId]\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "displayType": {
              "type": "string",
              "description": "displayType field"
            },
            "filters": {
              "type": "string",
              "description": "filters field"
            },
            "sorting": {
              "type": "string",
              "description": "sorting field"
            },
            "grouping": {
              "type": "string",
              "description": "grouping field"
            },
            "fields": {
              "type": "string",
              "description": "fields field"
            },
            "visibility": {
              "type": "string",
              "description": "visibility field"
            },
            "ownerId": {
              "type": "string",
              "description": "ownerId field"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "name": "string",
          "displayType": "string",
          "filters": "string",
          "sorting": "string",
          "grouping": "string",
          "fields": "string",
          "visibility": "string",
          "ownerId": "string"
        },
        "required": [
          "name",
          "displayType",
          "filters",
          "sorting",
          "grouping",
          "fields",
          "visibility",
          "ownerId"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PUT(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, viewId } = await params;\r\n    const body = await request.json();\r\n    const user = await prisma.user.findUnique({\r\n      return NextResponse.json({ error: 'User not found' }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const existingView = await prisma.view.findFirst({\r\n      return NextResponse.json({ error: 'View not found or insufficient permissions' }, { status: <cvv> });\r\n    const { \r\n      const validVisibilities = ['PERSONAL', 'WORKSPACE', 'SHARED'];\r\n        return NextResponse.json(\r\n      const newOwner = await prisma.user.findFirst({\r\n        return NextResponse.json<phone>return NextResponse.json<phone>return NextResponse.json(\r\n    const updateData: any = {};\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/projects/{projectSlug}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\[projectSlug]\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "projectSlug",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectSlug"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "basic",
        "required": true,
        "description": "Basic authentication required.",
        "headerName": "Authorization",
        "headerFormat": "Basic <base64-encoded-credentials>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "import { generateInternalStatusName } from '@/constants/project-statuses';\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId: workspaceSlugOrId, projectSlug } = await params;\r\n    const workspaceId = await resolveWorkspaceSlug(workspaceSlugOrId);\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const project = await prisma.project.findFirst({\r\n      return NextResponse.json({ error: 'Project not found' }, { status: <cvv> });\r\n    const transformedProject = {\r\n    return NextResponse.json({ project: transformedProject });\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId: workspaceSlugOrId, projectSlug } = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/workspaces/{workspaceId}/projects/{projectSlug}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\[projectSlug]\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Partially update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "projectSlug",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectSlug"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "keyPrefix": {
              "type": "string",
              "description": "keyPrefix field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "statuses": {
              "type": "string",
              "description": "statuses field"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "name": "string",
          "description": "string",
          "keyPrefix": "string",
          "color": "string",
          "statuses": "string"
        },
        "required": [
          "name",
          "keyPrefix",
          "color",
          "statuses"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Partially update an existing workspaces {workspaceid}",
      "authentication": {
        "type": "basic",
        "required": true,
        "description": "Basic authentication required.",
        "headerName": "Authorization",
        "headerFormat": "Basic <base64-encoded-credentials>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "import { generateInternalStatusName } from '@/constants/project-statuses';\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId: workspaceSlugOrId, projectSlug } = await params;\r\n    const workspaceId = await resolveWorkspaceSlug(workspaceSlugOrId);\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const project = await prisma.project.findFirst({\r\n      return NextResponse.json({ error: 'Project not found' }, { status: <cvv> });\r\n    const transformedProject = {\r\n    return NextResponse.json({ project: transformedProject });\r\n    return NextResponse.json(\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId: workspaceSlugOrId, projectSlug } = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/members/role",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\members\\role\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "id": "user_789",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "image": "https://example.com/avatar.jpg",
            "role": "user",
            "team": "Engineering",
            "currentFocus": "Frontend Development",
            "expertise": [
              "React",
              "TypeScript",
              "Next.js"
            ],
            "createdAt": "2024-01-01T00:00:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "team": {
              "type": "string"
            },
            "currentFocus": {
              "type": "string"
            },
            "expertise": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n  const _params = await params;\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const workspaceId = _params.workspaceId;\r\n    const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json({ error: \"Workspace not found\" }, { status: <cvv> });\r\n      return NextResponse.json({ role: \"owner\", userId: user.id });\r\n    const membership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ role: null, userId: user.id });\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/workspaces/{workspaceId}/members/{memberId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\members\\[memberId]\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Partially update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "memberId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: memberId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "status field"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "status": "string"
        },
        "required": [
          "status"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Partially update an existing workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n  request: NextRequest,\r\n  const _params = await params;\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const { workspaceId: workspaceSlugOrId, memberId } = _params;\r\n    const body = await request.json();\r\n    const { status } = body;\r\n      return NextResponse.json({ error: \"Status must be a boolean\" }, { status: <cvv> });\r\n    const workspaceId = await resolveWorkspaceSlug(workspaceSlugOrId);\r\n      return NextResponse.json({ error: \"Workspace not found\" }, { status: <cvv> });\r\n    const [isOwner, isAdmin] = await Promise.all([\r\n      return NextResponse.json({ error: \"Only workspace owners and admins can update member status\" }, { status: <cvv> });\r\n    const member = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: \"Member not found\" }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findUnique({\r\n      return NextResponse.json({ error: \"Cannot deactivate the workspace owner\" }, { status: <cvv> });\r\n    const updatedMember = await prisma.workspaceMember.update({\r\n    return NextResponse.json(updatedMember);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/custom-roles/{roleId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\custom-roles\\[roleId]\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "roleId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: roleId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, roleId } = await params;\r\n    const member = await prisma.workspaceMember.findUnique({\r\n      return NextResponse.json({ error: 'Not a member of this workspace' }, { status: <cvv> });\r\n    const customRole = await prisma.customRole.findFirst({\r\n      return NextResponse.json({ error: 'Custom role not found' }, { status: <cvv> });\r\n    const permissions = await prisma.rolePermission.findMany({\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r\nexport async function PUT(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, roleId } = await params;\r\n    const body = await request.json();\r\n    const { name, description, color, permissions } = body;\r\n    const hasPermission = await checkUserPermission(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PUT",
      "url": "/api/workspaces/{workspaceId}/custom-roles/{roleId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\custom-roles\\[roleId]\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "roleId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: roleId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "permissions": {
              "type": "string",
              "description": "permissions field"
            }
          },
          "required": []
        },
        "description": "Request body for PUT updating resource",
        "example": {
          "name": "string",
          "description": "string",
          "color": "string",
          "permissions": "string"
        },
        "required": [
          "name",
          "color",
          "permissions"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Update an existing workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, roleId } = await params;\r\n    const member = await prisma.workspaceMember.findUnique({\r\n      return NextResponse.json({ error: 'Not a member of this workspace' }, { status: <cvv> });\r\n    const customRole = await prisma.customRole.findFirst({\r\n      return NextResponse.json({ error: 'Custom role not found' }, { status: <cvv> });\r\n    const permissions = await prisma.rolePermission.findMany({\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r\nexport async function PUT(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, roleId } = await params;\r\n    const body = await request.json();\r\n    const { name, description, color, permissions } = body;\r\n    const hasPermission = await checkUserPermission(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/custom-roles/{roleId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\custom-roles\\[roleId]\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "roleId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: roleId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name field"
            },
            "description": {
              "type": "string",
              "description": "description field"
            },
            "color": {
              "type": "string",
              "description": "color field"
            },
            "permissions": {
              "type": "string",
              "description": "permissions field"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "name": "string",
          "description": "string",
          "color": "string",
          "permissions": "string"
        },
        "required": [
          "name",
          "color",
          "permissions"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, roleId } = await params;\r\n    const member = await prisma.workspaceMember.findUnique({\r\n      return NextResponse.json({ error: 'Not a member of this workspace' }, { status: <cvv> });\r\n    const customRole = await prisma.customRole.findFirst({\r\n      return NextResponse.json({ error: 'Custom role not found' }, { status: <cvv> });\r\n    const permissions = await prisma.rolePermission.findMany({\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r\nexport async function PUT(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, roleId } = await params;\r\n    const body = await request.json();\r\n    const { name, description, color, permissions } = body;\r\n    const hasPermission = await checkUserPermission(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/{taskId}/sessions/{sessionId}",
      "file": "src\\app\\api\\tasks\\[taskId]\\sessions\\[sessionId]\\route.ts",
      "title": "Update Tasks {taskId} by ID",
      "description": "Partially update an existing tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        },
        {
          "name": "sessionId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: sessionId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "startTime": {
              "type": "string"
            },
            "endTime": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "startTime": "sample_startTime",
          "endTime": "sample_endTime",
          "reason": "sample_reason"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks {taskid}",
      "authentication": {
        "type": "basic",
        "required": true,
        "description": "Basic authentication required.",
        "headerName": "Authorization",
        "headerFormat": "Basic <base64-encoded-credentials>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n  const session = await getServerSession(authOptions);\r\n    return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n  const _params = await params;\r\n  const { taskId, sessionId: \"<session-id>\"} = _params;\r\n  const userId = session.user.id;\r\n    return new NextResponse(\"Task ID and Session ID are required\", { status: <cvv> });\r\n    const { startTime, endTime, reason } = await req.json();\r\n      return new NextResponse(\"Start time and end time are required\", { status: <cvv> });\r\n      return new NextResponse(\"Reason is required\", { status: <cvv> });\r\n    const startDate = new Date(startTime);\r\n    const endDate = new Date(endTime);\r\n    const now = new Date();\r\n      return new NextResponse(\"Start time must be before end time\", { status: <cvv> });\r\n      return new NextResponse(\"Start time cannot be in the future\", { status: <cvv> });\r\n      return new NextResponse(\"End time cannot be in the future\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const isWorkspaceOwner = task.workspace.ownerId === userId;\r\n    const workspaceMember = await prisma.workspaceMember.findUnique({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/boards/{boardId}/tasks",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\tasks\\route.ts",
      "title": "Get Tasks Boards by ID",
      "description": "Retrieve tasks boards information",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "tasks": [
              {
                "id": "task_123",
                "title": "Implement user authentication",
                "description": "Add login and registration functionality",
                "type": "TASK",
                "priority": "HIGH",
                "status": "IN_PROGRESS",
                "position": 1,
                "dueDate": "2024-01-20T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_101",
                "reporterId": "user_789",
                "assigneeId": "user_456"
              },
              {
                "id": "task_124",
                "title": "Design user interface",
                "description": "Create mockups for the dashboard",
                "type": "TASK",
                "priority": "MEDIUM",
                "status": "TODO",
                "position": 2,
                "dueDate": "2024-01-25T00:00:00Z",
                "taskBoardId": "board_456",
                "columnId": "column_789",
                "workspaceId": "ws_123456",
                "storyId": "story_102",
                "reporterId": "user_789",
                "assigneeId": "user_789"
              }
            ]
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks boards information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "number"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "taskBoardId": {
                    "type": "string"
                  },
                  "columnId": {
                    "type": "string"
                  },
                  "workspaceId": {
                    "type": "string"
                  },
                  "storyId": {
                    "type": "string"
                  },
                  "reporterId": {
                    "type": "string"
                  },
                  "assigneeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n  const _params = await params;\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json(\r\n    const { boardId } = _params;\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n    const { searchParams } = new URL(request.url);\r\n    const assigneeId = searchParams.get(\"assignee\");\r\n    const type = searchParams.get(\"type\");\r\n    const priority = searchParams.get(\"priority\");\r\n    const status = searchParams.get(\"status\");\r\n    const searchQuery = searchParams.get(\"q\");\r\n    const filters: any = {\r\n    const tasks = await prisma.task.findMany({\r\n    const mappedTasks = tasks.map((task: any) => ({\r\n    return NextResponse.json(mappedTasks);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/realtime/workspace/{workspaceId}/stream",
      "file": "src\\app\\api\\realtime\\workspace\\[workspaceId]\\stream\\route.ts",
      "title": "Get Realtime Workspace by ID",
      "description": "Retrieve realtime workspace information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "realtime"
      ],
      "summary": "Retrieve realtime workspace information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport const runtime = 'nodejs';\r\nexport async function GET(\r\n  request: NextRequest,\r\n    const user = await getCurrentUser();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const resolvedParams = await params;\r\n    const { workspaceId } = resolvedParams;\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Forbidden' }, { status: <cvv> });\r\n    const channel = `workspace:${workspaceId}:events`;\r\n    const encoder = new TextEncoder();\r\n    const stream = new ReadableStream<Uint8Array>({\r\n      start: async (controller) => {\r\n        const subscriber = await getRedisSubscriber();\r\n          const interval = setInterval(() => {\r\n          const signal = request.signal as AbortSignal | undefined;\r\n          return;\r\n        const sendEvent = (data: Record<string, unknown>) => {\r\n          const payload = `data: ${JSON.stringify(data)}\\n\\n`;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/boards/{boardId}/columns",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\columns\\route.ts",
      "title": "Get Tasks Boards by ID",
      "description": "Retrieve tasks boards information",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks boards information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { boardId } = params;\r\n    const { name, order, color } = await req.json();\r\n      return NextResponse.json(\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n    const userWorkspaceMembership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findUnique({\r\n    const isWorkspaceOwner = workspace?.ownerId === currentUser.id;\r\n    const isWorkspaceAdmin = userWorkspaceMembership.role === 'admin' || userWorkspaceMembership.role === 'owner';\r\n    const isGlobalAdmin = currentUser.role === 'admin';\r\n      return NextResponse.json(\r\n    const newColumn = await prisma.taskColumn.create({\r\n    return NextResponse.json(newColumn, { status: <cvv> });\r\n    return NextResponse.json(\r\nexport async function GET(\r\n  const _params = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/boards/{boardId}/columns",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\columns\\route.ts",
      "title": "Create Tasks Boards by ID",
      "description": "Create a new tasks boards",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "order": {
              "type": "string"
            },
            "color": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "name": "John Doe",
          "order": "sample_order",
          "color": "sample_color"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks boards",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { boardId } = params;\r\n    const { name, order, color } = await req.json();\r\n      return NextResponse.json(\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n    const userWorkspaceMembership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findUnique({\r\n    const isWorkspaceOwner = workspace?.ownerId === currentUser.id;\r\n    const isWorkspaceAdmin = userWorkspaceMembership.role === 'admin' || userWorkspaceMembership.role === 'owner';\r\n    const isGlobalAdmin = currentUser.role === 'admin';\r\n      return NextResponse.json(\r\n    const newColumn = await prisma.taskColumn.create({\r\n    return NextResponse.json(newColumn, { status: <cvv> });\r\n    return NextResponse.json(\r\nexport async function GET(\r\n  const _params = await params;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/realtime/view/{viewId}/stream",
      "file": "src\\app\\api\\realtime\\view\\[viewId]\\stream\\route.ts",
      "title": "Get Realtime View by ID",
      "description": "Retrieve realtime view information",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [],
      "tags": [
        "realtime"
      ],
      "summary": "Retrieve realtime view information",
      "authentication": {
        "type": "none",
        "required": false,
        "description": "No authentication required"
      },
      "requiresAuth": false,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export const dynamic = 'force-dynamic';\r\nexport const runtime = 'nodejs';\r\nexport async function GET(\r\n  _request: NextRequest,\r\n  return NextResponse.json({\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "PATCH",
      "url": "/api/projects/{projectId}/statuses/reorder",
      "file": "src\\app\\api\\projects\\[projectId]\\statuses\\reorder\\route.ts",
      "title": "Update Projects {projectId} by ID",
      "description": "Partially update an existing projects {projectid}",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "order": {
              "type": "number"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "order": 0
        }
      },
      "tags": [
        "projects"
      ],
      "summary": "Partially update an existing projects {projectid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { projectId } = await params;\r\n    const body = await request.json();\r\n    const updates = Array.isArray(body?.updates) ? body.updates : null;\r\n      return NextResponse.json({ error: 'No updates provided' }, { status: <cvv> });\r\n    const project = await prisma.project.findUnique({\r\n      return NextResponse.json({ error: 'Project not found' }, { status: <cvv> });\r\n    const member = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Access denied' }, { status: <cvv> });\r\n    const normalized: Update[] = updates.map((u: any) => ({ id: u.id, name: u.name, order: Number(u.order) }));\r\n    await prisma.$transaction(async (tx) => {\r\n      for (const u of normalized) {\r\n    return NextResponse.json({ success: true });\r\n    return NextResponse.json({ error: 'Failed to reorder statuses' }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PUT",
      "url": "/api/issues/{issueId}/comments/{commentId}",
      "file": "src\\app\\api\\issues\\[issueId]\\comments\\[commentId]\\route.ts",
      "title": "Update Issues {issueId} by ID",
      "description": "Update an existing issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            },
            "html": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for PUT updating resource",
        "example": {
          "content": "sample_content",
          "html": "sample_html"
        }
      },
      "tags": [
        "issues"
      ],
      "summary": "Update an existing issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PUT(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const issueId = _params.issueId;\r\n    const commentId = _params.commentId;\r\n    const { content, html } = await request.json();\r\n      return NextResponse.json({ error: \"Content is required\" }, { status: <cvv> });\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(issueId);\r\n    const issue = isIssueKey\r\n      return NextResponse.json({ error: \"Issue not found\" }, { status: <cvv> });\r\n    const comment = await prisma.issueComment.findFirst({\r\n      return NextResponse.json({ error: \"Comment not found\" }, { status: <cvv> });\r\n      return NextResponse.json({ error: \"You can only edit your own comments\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const updatedComment = await prisma.issueComment.update({\r\n    return NextResponse.json(updatedComment);\r\n    return NextResponse.json({ error: \"Internal error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/issues/{issueId}/comments/{commentId}",
      "file": "src\\app\\api\\issues\\[issueId]\\comments\\[commentId]\\route.ts",
      "title": "Delete Issues {issueId} by ID",
      "description": "Remove a issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            },
            "html": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "content": "sample_content",
          "html": "sample_html"
        }
      },
      "tags": [
        "issues"
      ],
      "summary": "Remove a issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PUT(\r\n  request: NextRequest,\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: <cvv> });\r\n    const _params = await params;\r\n    const issueId = _params.issueId;\r\n    const commentId = _params.commentId;\r\n    const { content, html } = await request.json();\r\n      return NextResponse.json({ error: \"Content is required\" }, { status: <cvv> });\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(issueId);\r\n    const issue = isIssueKey\r\n      return NextResponse.json({ error: \"Issue not found\" }, { status: <cvv> });\r\n    const comment = await prisma.issueComment.findFirst({\r\n      return NextResponse.json({ error: \"Comment not found\" }, { status: <cvv> });\r\n      return NextResponse.json({ error: \"You can only edit your own comments\" }, { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: \"Access denied\" }, { status: <cvv> });\r\n    const updatedComment = await prisma.issueComment.update({\r\n    return NextResponse.json(updatedComment);\r\n    return NextResponse.json({ error: \"Internal error\" }, { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/board-items/{itemType}/{itemId}/view",
      "file": "src\\app\\api\\board-items\\[itemType]\\[itemId]\\view\\route.ts",
      "title": "Create Board-items {itemType} by ID",
      "description": "Create a new board-items {itemtype}",
      "parameters": [
        {
          "name": "itemType",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: itemType"
        },
        {
          "name": "itemId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: itemId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "board-items"
      ],
      "summary": "Create a new board-items {itemtype}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { itemType, itemId } = _params;\r\n    const validItemTypes: Record<string, BoardItemType> = {\r\n    const boardItemType = validItemTypes[itemType.toLowerCase()];\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json(\r\n    const activity = await trackView(\r\n    return NextResponse.json({ \r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/board-items/{itemType}/{itemId}/activities",
      "file": "src\\app\\api\\board-items\\[itemType]\\[itemId]\\activities\\route.ts",
      "title": "Get Board-items {itemType} by ID",
      "description": "Retrieve board-items {itemtype} information",
      "parameters": [
        {
          "name": "itemType",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: itemType"
        },
        {
          "name": "itemId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: itemId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "board-items"
      ],
      "summary": "Retrieve board-items {itemtype} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { itemType, itemId, action } = _params;\r\n    const { searchParams } = new URL(request.url);\r\n    const limit = parseInt(searchParams.get('limit') || '50', 10);\r\n    const validItemTypes: Record<string, BoardItemType> = {\r\n    const boardItemType = validItemTypes[itemType.toLowerCase()];\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return NextResponse.json(\r\n    const activities = await getItemActivities(boardItemType, item.id, limit, action);\r\n    return NextResponse.json(activities);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/ai/create-tasks/status/{jobId}",
      "file": "src\\app\\api\\ai\\create-tasks\\status\\[jobId]\\route.ts",
      "title": "Get Ai Create-tasks by ID",
      "description": "Retrieve ai create-tasks information",
      "parameters": [
        {
          "name": "jobId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: jobId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai create-tasks information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getAuthSession();\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const jobId = params.jobId;\r\n      return NextResponse.json({ error: 'Job ID is required' }, { status: <cvv> });\r\n    const job = await jobStorage.get(jobId);\r\n      return NextResponse.json({ error: 'Job not found' }, { status: <cvv> });\r\n      return NextResponse.json({ error: 'Access denied' }, { status: <cvv> });\r\n    return NextResponse.json({\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/tasks/{taskId}/relations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\tasks\\[taskId]\\relations\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Helper function to determine item type\r\nasync function getItemType(itemId: string, workspaceId: string): Promise<'TASK' | 'EPIC' | 'STORY' | 'MILESTONE'> {\r\n  const [task, epic, story, milestone] = await Promise.all([\r\n  if (task) return 'TASK';\r\n  if (epic) return 'EPIC';\r\n  if (story) return 'STORY';\r\n  if (milestone) return 'MILESTONE';\r\nexport async function GET(request: NextRequest, { params }: RouteParams) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, taskId } = await params;\r\n    const membership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Access denied' }, { status: <cvv> });\r\n    const relations = await prisma.taskRelations.findMany({\r\n    const epicIds = relations.filter(r => r.relatedItemType === 'EPIC').map(r => r.relatedItemId);\r\n    const storyIds = relations.filter(r => r.relatedItemType === 'STORY').map(r => r.relatedItemId);\r\n    const milestoneIds = relations.filter(r => r.relatedItemType === 'MILESTONE').map(r => r.relatedItemId);\r\n    const directParentTaskIds = relations\r\n    const incomingParentLinks = await prisma.taskRelations.findMany({\r\n    const childTaskIds = incomingParentLinks.map(l => l.taskId);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/tasks/{taskId}/relations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\tasks\\[taskId]\\relations\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "relatedItemId": {
              "type": "string",
              "description": "relatedItemId field"
            },
            "relatedItemType": {
              "type": "string",
              "description": "relatedItemType field"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "relatedItemId": "string",
          "relatedItemType": "string"
        },
        "required": [
          "relatedItemId",
          "relatedItemType"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Helper function to determine item type\r\nasync function getItemType(itemId: string, workspaceId: string): Promise<'TASK' | 'EPIC' | 'STORY' | 'MILESTONE'> {\r\n  const [task, epic, story, milestone] = await Promise.all([\r\n  if (task) return 'TASK';\r\n  if (epic) return 'EPIC';\r\n  if (story) return 'STORY';\r\n  if (milestone) return 'MILESTONE';\r\nexport async function GET(request: NextRequest, { params }: RouteParams) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, taskId } = await params;\r\n    const membership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Access denied' }, { status: <cvv> });\r\n    const relations = await prisma.taskRelations.findMany({\r\n    const epicIds = relations.filter(r => r.relatedItemType === 'EPIC').map(r => r.relatedItemId);\r\n    const storyIds = relations.filter(r => r.relatedItemType === 'STORY').map(r => r.relatedItemId);\r\n    const milestoneIds = relations.filter(r => r.relatedItemType === 'MILESTONE').map(r => r.relatedItemId);\r\n    const directParentTaskIds = relations\r\n    const incomingParentLinks = await prisma.taskRelations.findMany({\r\n    const childTaskIds = incomingParentLinks.map(l => l.taskId);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/tasks/{taskId}/relations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\tasks\\[taskId]\\relations\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "createdAt",
            "status"
          ],
          "optionalFields": [
            "description"
          ]
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "relatedItemId": {
              "type": "string",
              "description": "relatedItemId field"
            },
            "relatedItemType": {
              "type": "string",
              "description": "relatedItemType field"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "relatedItemId": "string",
          "relatedItemType": "string"
        },
        "required": [
          "relatedItemId",
          "relatedItemType"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Helper function to determine item type\r\nasync function getItemType(itemId: string, workspaceId: string): Promise<'TASK' | 'EPIC' | 'STORY' | 'MILESTONE'> {\r\n  const [task, epic, story, milestone] = await Promise.all([\r\n  if (task) return 'TASK';\r\n  if (epic) return 'EPIC';\r\n  if (story) return 'STORY';\r\n  if (milestone) return 'MILESTONE';\r\nexport async function GET(request: NextRequest, { params }: RouteParams) {\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId, taskId } = await params;\r\n    const membership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json({ error: 'Access denied' }, { status: <cvv> });\r\n    const relations = await prisma.taskRelations.findMany({\r\n    const epicIds = relations.filter(r => r.relatedItemType === 'EPIC').map(r => r.relatedItemId);\r\n    const storyIds = relations.filter(r => r.relatedItemType === 'STORY').map(r => r.relatedItemId);\r\n    const milestoneIds = relations.filter(r => r.relatedItemType === 'MILESTONE').map(r => r.relatedItemId);\r\n    const directParentTaskIds = relations\r\n    const incomingParentLinks = await prisma.taskRelations.findMany({\r\n    const childTaskIds = incomingParentLinks.map(l => l.taskId);\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PUT",
      "url": "/api/workspaces/{workspaceId}/members/{memberId}/role",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\members\\[memberId]\\role\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "memberId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: memberId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "role field"
            }
          },
          "required": []
        },
        "description": "Request body for PUT updating resource",
        "example": {
          "role": "string"
        },
        "required": [
          "role"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Update an existing workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PUT(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authOptions);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const _params = await params;\r\n    const { workspaceId, memberId } = _params;\r\n    const body = await request.json();\r\n    const { role } = body;\r\n      return NextResponse.json(\r\n    const isBuiltInRole = Object.values(WorkspaceRole).includes(role as WorkspaceRole);\r\n      const customRole = await prisma.customRole.findFirst({\r\n        return NextResponse.json(\r\n    const hasPermission = await checkUserPermission(\r\n      return NextResponse.json(\r\n    const member = await prisma.workspaceMember.findUnique({\r\n      return NextResponse.json(\r\n      return NextResponse.json(\r\n    const updatedMember = await prisma.$transaction(async (tx) => {\r\n      const memberUpdated = await tx.workspaceMember.update({\r\n      return memberUpdated;\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/issues/{issueKey}/relations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\issues\\[issueKey]\\relations\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "issueKey",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueKey"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_k9b5mtmsg",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.679Z",
              "taskBoardId": "board_d47yxu5mv",
              "columnId": "column_155xxckxd",
              "workspaceId": "ws_o5l3apb3o",
              "storyId": "story_kj663udtr",
              "reporterId": "user_rvavyefyy",
              "assigneeId": "user_3grrn3i0a",
              "createdAt": "2025-09-24T11:27:05.679Z",
              "updatedAt": "2025-09-24T11:27:05.679Z"
            },
            {
              "id": "issue_e55t78m9n",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.679Z",
              "taskBoardId": "board_rhfltyx2l",
              "columnId": "column_ylu4xto5o",
              "workspaceId": "ws_zcmbdvqhh",
              "storyId": "story_78brrxiyc",
              "reporterId": "user_zfz3ki2k8",
              "assigneeId": "user_79q9z4cj8",
              "createdAt": "2025-09-23T11:27:05.679Z",
              "updatedAt": "2025-09-24T11:27:05.679Z"
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Retrieve workspaces {workspaceid} information\nconst response = await fetch('http://localhost:3000/api/workspaces/{workspaceId}/issues/{issueKey}/relations', {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer <token>'\n  }\n});\n\nif (response.ok) {\n  const data = await response.json();\n  return data;\n} else {\n  throw new Error(`API Error: ${response.status}`);\n}"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/issues/{issueKey}/relations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\issues\\[issueKey]\\relations\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "issueKey",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueKey"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_5ygq9oblf",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.680Z",
              "taskBoardId": "board_1lq46yoal",
              "columnId": "column_wywaa2d2p",
              "workspaceId": "ws_0qc02jdbj",
              "storyId": "story_3iage8zg7",
              "reporterId": "user_ymcc75sfo",
              "assigneeId": "user_nwf35kg7r",
              "createdAt": "2025-09-24T11:27:05.680Z",
              "updatedAt": "2025-09-24T11:27:05.680Z"
            },
            {
              "id": "issue_60zfnw1a9",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.680Z",
              "taskBoardId": "board_zvls9tkrv",
              "columnId": "column_b6phdbpyl",
              "workspaceId": "ws_b550r8kuo",
              "storyId": "story_zbrbk967z",
              "reporterId": "user_iqemfqkdb",
              "assigneeId": "user_rhw03hk5y",
              "createdAt": "2025-09-23T11:27:05.680Z",
              "updatedAt": "2025-09-24T11:27:05.680Z"
            }
          ],
          "requiredFields": [
            "id",
            "createdAt",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "targetIssueId": {
              "type": "string"
            },
            "relationType": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "targetIssueId": "123",
          "relationType": "sample_relationType"
        }
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Create a new workspaces {workspaceid}\nconst response = await fetch('http://localhost:3000/api/workspaces/{workspaceId}/issues/{issueKey}/relations', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer <token>'\n  },\n  body: JSON.stringify(data)\n});\n\nif (response.ok) {\n  const data = await response.json();\n  return data;\n} else {\n  throw new Error(`API Error: ${response.status}`);\n}"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/comments/{commentId}/like",
      "file": "src\\app\\api\\tasks\\[taskId]\\comments\\[commentId]\\like\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const { taskId, commentId } = params;\r\n    const comment = await prisma.taskComment.findFirst({\r\n      return new NextResponse(\"Comment not found\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const hasAccess = await prisma.workspaceMember.findFirst({\r\n      return new NextResponse(\"Access denied\", { status: <cvv> });\r\n    const existingReaction = await prisma.taskCommentReaction.findFirst({\r\n      const updatedComment = await prisma.taskComment.findUnique({\r\n      return NextResponse.json({\r\n    const updatedComment = await prisma.taskComment.findUnique({\r\n    return NextResponse.json({\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function GET(\r\n    const { commentId } = params;\r\n    const likes = await prisma.taskCommentReaction.findMany({\r\n    return NextResponse.json({ likes });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/comments/{commentId}/like",
      "file": "src\\app\\api\\tasks\\[taskId]\\comments\\[commentId]\\like\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const { taskId, commentId } = params;\r\n    const comment = await prisma.taskComment.findFirst({\r\n      return new NextResponse(\"Comment not found\", { status: <cvv> });\r\n    const task = await prisma.task.findUnique({\r\n      return new NextResponse(\"Task not found\", { status: <cvv> });\r\n    const hasAccess = await prisma.workspaceMember.findFirst({\r\n      return new NextResponse(\"Access denied\", { status: <cvv> });\r\n    const existingReaction = await prisma.taskCommentReaction.findFirst({\r\n      const updatedComment = await prisma.taskComment.findUnique({\r\n      return NextResponse.json({\r\n    const updatedComment = await prisma.taskComment.findUnique({\r\n    return NextResponse.json({\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function GET(\r\n    const { commentId } = params;\r\n    const likes = await prisma.taskCommentReaction.findMany({\r\n    return NextResponse.json({ likes });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/boards/{boardId}/columns/reorder",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\columns\\reorder\\route.ts",
      "title": "Update Tasks Boards by ID",
      "description": "Partially update an existing tasks boards",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 20,
              "total": 0,
              "pages": 0
            }
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "columns": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "columns": "sample_columns"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks boards",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pagination": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number"
                },
                "limit": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function PATCH(\r\n    const currentUser = await getCurrentUser();\r\n      return NextResponse.json(\r\n    const { boardId } = params;\r\n    const { columns } = await req.json();\r\n      return NextResponse.json(\r\n    const board = await prisma.taskBoard.findUnique({\r\n      return NextResponse.json(\r\n    const userWorkspaceMembership = await prisma.workspaceMember.findFirst({\r\n      return NextResponse.json(\r\n    const workspace = await prisma.workspace.findUnique({\r\n    const isWorkspaceOwner = workspace?.ownerId === currentUser.id;\r\n    const isWorkspaceAdmin = userWorkspaceMembership.role === 'admin' || userWorkspaceMembership.role === 'owner';\r\n    const isGlobalAdmin = currentUser.role === 'admin';\r\n      return NextResponse.json(\r\n    const updates = columns.map((column: { id: string; order: number }) =>\r\n    const updatedColumns = await prisma.$transaction(updates);\r\n    return NextResponse.json(updatedColumns);\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/comments/{commentId}/like",
      "file": "src\\app\\api\\issues\\[issueId]\\comments\\[commentId]\\like\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const _params = await params;\r\n    const issueId = _params.issueId;\r\n    const commentId = _params.commentId;\r\n    const isIssueKey = /^[A-Z]+[0-9]*-\\d+$/.test(issueId);\r\n    const issue = isIssueKey\r\n      return new NextResponse(\"Issue not found\", { status: <cvv> });\r\n    const comment = await prisma.issueComment.findFirst({\r\n      return new NextResponse(\"Comment not found\", { status: <cvv> });\r\n    const hasAccess = await prisma.workspace.findFirst({\r\n      return new NextResponse(\"Access denied\", { status: <cvv> });\r\n    const existingReaction = await prisma.issueCommentReaction.findFirst({\r\n      const updatedComment = await prisma.issueComment.findUnique({\r\n      return NextResponse.json({ \r\n    const updatedComment = await prisma.issueComment.findUnique({\r\n    return NextResponse.json({\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/comments/{commentId}/like",
      "file": "src\\app\\api\\posts\\[postId]\\comments\\[commentId]\\like\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const _params = await params;\r\n    const postId = await _params.postId;\r\n    const commentId = await _params.commentId;\r\n    const comment = await prisma.comment.findFirst({\r\n      return new NextResponse(\"Comment not found\", { status: <cvv> });\r\n    const existingReaction = await prisma.reaction.findFirst({\r\n      const updatedComment = await prisma.comment.findUnique({\r\n      return NextResponse.json({ \r\n    const updatedComment = await prisma.comment.findUnique({\r\n    return NextResponse.json({ \r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function GET(\r\n    const _params = await params;\r\n    const commentId = await _params.commentId;\r\n    const likes = await prisma.reaction.findMany({\r\n    return NextResponse.json({ likes });\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "POST",
      "url": "/api/posts/{postId}/comments/{commentId}/like",
      "file": "src\\app\\api\\posts\\[postId]\\comments\\[commentId]\\like\\route.ts",
      "title": "Create Posts {postId} by ID",
      "description": "Create a new posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          },
          "requiredFields": [
            "success"
          ],
          "optionalFields": []
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          },
          "requiredFields": [
            "id",
            "success"
          ],
          "optionalFields": []
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          },
          "requiredFields": [
            "error"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts {postid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function POST(\r\n    const user = await getCurrentUser();\r\n      return new NextResponse(\"Unauthorized\", { status: <cvv> });\r\n    const _params = await params;\r\n    const postId = await _params.postId;\r\n    const commentId = await _params.commentId;\r\n    const comment = await prisma.comment.findFirst({\r\n      return new NextResponse(\"Comment not found\", { status: <cvv> });\r\n    const existingReaction = await prisma.reaction.findFirst({\r\n      const updatedComment = await prisma.comment.findUnique({\r\n      return NextResponse.json({ \r\n    const updatedComment = await prisma.comment.findUnique({\r\n    return NextResponse.json({ \r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r\nexport async function GET(\r\n    const _params = await params;\r\n    const commentId = await _params.commentId;\r\n    const likes = await prisma.reaction.findMany({\r\n    return NextResponse.json({ likes });\r\n    return new NextResponse(\"Internal error\", { status: <cvv> });\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          },
          {
            "statusCode": "201",
            "description": "Created",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/projects/{projectSlug}/statuses/{statusId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\[projectSlug]\\statuses\\[statusId]\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "projectSlug",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectSlug"
        },
        {
          "name": "statusId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: statusId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_sksmbuymu",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.681Z",
              "taskBoardId": "board_4b03sf75s",
              "columnId": "column_83abd6ry9",
              "workspaceId": "ws_uijgd8ghb",
              "storyId": "story_7kpnliyxr",
              "reporterId": "user_o3n7prxgm",
              "assigneeId": "user_maberq0t4",
              "createdAt": "2025-09-24T11:27:05.681Z",
              "updatedAt": "2025-09-24T11:27:05.681Z"
            },
            {
              "id": "issue_5fsqti6cu",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.681Z",
              "taskBoardId": "board_uobm3hqn8",
              "columnId": "column_z61ben6m3",
              "workspaceId": "ws_x0m8smh59",
              "storyId": "story_037yx6i9c",
              "reporterId": "user_kcuab6qdi",
              "assigneeId": "user_wuathws4a",
              "createdAt": "2025-09-23T11:27:05.681Z",
              "updatedAt": "2025-09-24T11:27:05.681Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "targetStatusId": {
              "type": "string",
              "description": "targetStatusId field"
            }
          },
          "required": []
        },
        "description": "Request body for DELETE deleting resource",
        "example": {
          "targetStatusId": "string"
        },
        "required": [
          "targetStatusId"
        ]
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function DELETE(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId: workspaceSlugOrId, projectSlug, statusId } = await params;\r\n    const body = await request.json();\r\n    const { targetStatusId } = body;\r\n    const workspaceId = await resolveWorkspaceSlug(workspaceSlugOrId);\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const project = await prisma.project.findFirst({\r\n      return NextResponse.json({ error: 'Project not found' }, { status: <cvv> });\r\n    const statusToDelete = await prisma.projectStatus.findFirst({\r\n      return NextResponse.json({ error: 'Status not found' }, { status: <cvv> });\r\n      return NextResponse.json({ error: 'Cannot delete default status' }, { status: <cvv> });\r\n      const targetStatus = await prisma.projectStatus.findFirst({\r\n        return NextResponse.json({ error: 'Target status not found' }, { status: <cvv> });\r\n        return NextResponse.json({ error: 'Cannot move issues to the same status being deleted' }, { status: <cvv> });\r\n    const result = await prisma.$transaction(async (tx) => {\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/issues/{issueKey}/relations/bulk",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\issues\\[issueKey]\\relations\\bulk\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "issueKey",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueKey"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_9ayr2ouua",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.681Z",
              "taskBoardId": "board_7o238t3vo",
              "columnId": "column_mgtduq90p",
              "workspaceId": "ws_ohfs11rq3",
              "storyId": "story_tzq91s362",
              "reporterId": "user_zuq1otru5",
              "assigneeId": "user_9ff1f54xn",
              "createdAt": "2025-09-24T11:27:05.681Z",
              "updatedAt": "2025-09-24T11:27:05.681Z"
            },
            {
              "id": "issue_r80471pc4",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.681Z",
              "taskBoardId": "board_hei96ep9k",
              "columnId": "column_149s0ijus",
              "workspaceId": "ws_nlropbl8k",
              "storyId": "story_6ehttyevi",
              "reporterId": "user_jhmxlpzhq",
              "assigneeId": "user_82oy1d4dj",
              "createdAt": "2025-09-23T11:27:05.681Z",
              "updatedAt": "2025-09-24T11:27:05.681Z"
            }
          ],
          "requiredFields": [
            "id",
            "updatedAt",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "relations": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "relations": "sample_relations"
        }
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Create a new workspaces {workspaceid}\nconst response = await fetch('http://localhost:3000/api/workspaces/{workspaceId}/issues/{issueKey}/relations/bulk', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer <token>'\n  },\n  body: JSON.stringify(data)\n});\n\nif (response.ok) {\n  const data = await response.json();\n  return data;\n} else {\n  throw new Error(`API Error: ${response.status}`);\n}"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/issues/{issueKey}/relations/{relationId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\issues\\[issueKey]\\relations\\[relationId]\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "issueKey",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueKey"
        },
        {
          "name": "relationId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: relationId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true,
            "message": "Operation completed successfully",
            "timestamp": "2024-01-15T10:30:00Z"
          },
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "// Remove a workspaces {workspaceid}\nconst response = await fetch('http://localhost:3000/api/workspaces/{workspaceId}/issues/{issueKey}/relations/{relationId}', {\n  method: 'DELETE',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer <token>'\n  }\n});\n\nif (response.ok) {\n  const data = await response.json();\n  return data;\n} else {\n  throw new Error(`API Error: ${response.status}`);\n}"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 100,
          "window": "1 minute",
          "burst": 200
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": false
      }
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/projects/{projectSlug}/statuses/{statusId}/issues-count",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\[projectSlug]\\statuses\\[statusId]\\issues-count\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "projectSlug",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectSlug"
        },
        {
          "name": "statusId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: statusId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": [
            {
              "id": "issue_7z9ht6a28",
              "title": "Sample Issue Title",
              "description": "Sample issue description",
              "type": "BUG",
              "priority": "HIGH",
              "status": "OPEN",
              "position": 1,
              "dueDate": "2025-09-24T11:27:05.681Z",
              "taskBoardId": "board_ntx26b990",
              "columnId": "column_rbgsfc3dc",
              "workspaceId": "ws_9k0hhi0t4",
              "storyId": "story_mdmt8oztj",
              "reporterId": "user_kcl4avw5v",
              "assigneeId": "user_99yl0r8t2",
              "createdAt": "2025-09-24T11:27:05.681Z",
              "updatedAt": "2025-09-24T11:27:05.681Z"
            },
            {
              "id": "issue_kk07xv2vd",
              "title": "Another Issue",
              "description": "Another issue description",
              "type": "FEATURE",
              "priority": "MEDIUM",
              "status": "IN_PROGRESS",
              "position": 2,
              "dueDate": "2025-10-01T11:27:05.681Z",
              "taskBoardId": "board_a0bw7z625",
              "columnId": "column_megywelho",
              "workspaceId": "ws_yhgt4f8vn",
              "storyId": "story_ppmslh9vu",
              "reporterId": "user_qoxrffn81",
              "assigneeId": "user_opf7mf94j",
              "createdAt": "2025-09-23T11:27:05.681Z",
              "updatedAt": "2025-09-24T11:27:05.681Z"
            }
          ],
          "requiredFields": [
            "id",
            "status"
          ],
          "optionalFields": []
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": true,
          "description": "Bearer token for authentication. Get token from /api/auth/signin"
        }
      ],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information",
      "authentication": {
        "type": "bearer",
        "required": true,
        "description": "Bearer token authentication required. Include Authorization header with your request.",
        "headerName": "Authorization",
        "headerFormat": "Bearer <your-token>",
        "loginEndpoint": "/api/auth/signin",
        "example": {
          "headers": {
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "Content-Type": "application/json"
          }
        },
        "steps": [
          "1. Send POST request to /api/auth/signin with your credentials",
          "2. Receive authentication token in response",
          "3. Include token in Authorization header for all protected endpoints",
          "4. Token expires after 24 hours, re-authenticate as needed",
          "5. Use NextAuth.js client: signIn() for login, signOut() for logout"
        ]
      },
      "requiresAuth": true,
      "responseSchema": {
        "type": "object",
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "priority": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "position": {
                "type": "number"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "taskBoardId": {
                "type": "string"
              },
              "columnId": {
                "type": "string"
              },
              "workspaceId": {
                "type": "string"
              },
              "storyId": {
                "type": "string"
              },
              "reporterId": {
                "type": "string"
              },
              "assigneeId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "codeExamples": {
        "language": "TypeScript",
        "example": "export async function GET(\r\n  request: NextRequest,\r\n    const session = await getServerSession(authConfig);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: <cvv> });\r\n    const { workspaceId: workspaceSlugOrId, projectSlug, statusId } = await params;\r\n    const workspaceId = await resolveWorkspaceSlug(workspaceSlugOrId);\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const workspace = await prisma.workspace.findFirst({\r\n      return NextResponse.json({ error: 'Workspace not found' }, { status: <cvv> });\r\n    const project = await prisma.project.findFirst({\r\n      return NextResponse.json({ error: 'Project not found' }, { status: <cvv> });\r\n    const status = await prisma.projectStatus.findFirst({\r\n      return NextResponse.json({ error: 'Status not found' }, { status: <cvv> });\r\n    const issueCount = await prisma.issue.count({\r\n    return NextResponse.json({ count: issueCount });\r\n    return NextResponse.json(\r"
      },
      "errorHandling": {
        "commonErrors": [
          {
            "statusCode": "400",
            "description": "Bad Request - Invalid request data",
            "handling": "Check request data format and required fields"
          },
          {
            "statusCode": "401",
            "description": "Unauthorized - Authentication required",
            "handling": "Refresh authentication token or redirect to login"
          },
          {
            "statusCode": "403",
            "description": "Forbidden - Access denied",
            "handling": "Check user permissions and access rights"
          },
          {
            "statusCode": "404",
            "description": "Not Found - Resource not found",
            "handling": "Verify resource exists and URL is correct"
          },
          {
            "statusCode": "500",
            "description": "Internal Server Error - Server error",
            "handling": "Retry request or contact support"
          }
        ],
        "endpointSpecific": [
          {
            "statusCode": "200",
            "description": "Success",
            "handling": "Handle error appropriately"
          }
        ]
      },
      "rateLimiting": {
        "enabled": true,
        "limits": {
          "requests": 1000,
          "window": "1 minute",
          "burst": 2000
        },
        "headers": {
          "X-RateLimit-Limit": "Number of requests allowed",
          "X-RateLimit-Remaining": "Number of requests remaining",
          "X-RateLimit-Reset": "Time when limit resets"
        },
        "handling": "Implement exponential backoff and retry logic"
      },
      "pagination": {
        "supported": true,
        "parameters": {
          "page": {
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of items to skip"
          }
        },
        "response": {
          "data": "Array of items",
          "pagination": {
            "page": "Current page number",
            "limit": "Items per page",
            "total": "Total number of items",
            "pages": "Total number of pages"
          }
        },
        "example": {
          "request": "GET /api/posts?page=1&limit=10",
          "response": {
            "data": [],
            "pagination": {
              "page": 1,
              "limit": 10,
              "total": 100,
              "pages": 10
            }
          }
        }
      }
    }
  ],
  "totalEndpoints": 266,
  "generatedAt": "2025-09-24T11:27:05.681Z"
}