{
  "info": {
    "title": "API Documentation",
    "version": "1.0.0",
    "description": "Auto-generated API documentation"
  },
  "endpoints": [
    {
      "method": "GET",
      "url": "/api/workspaces",
      "file": "src\\app\\api\\workspaces\\route.ts",
      "title": "List Workspaces",
      "description": "Retrieve a list of workspacess",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve a list of workspacess"
    },
    {
      "method": "POST",
      "url": "/api/workspaces",
      "file": "src\\app\\api\\workspaces\\route.ts",
      "title": "Create Workspaces",
      "description": "Create a new workspaces",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces"
    },
    {
      "method": "GET",
      "url": "/api/tasks",
      "file": "src\\app\\api\\tasks\\route.ts",
      "title": "List Tasks",
      "description": "Retrieve a list of taskss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve a list of taskss"
    },
    {
      "method": "POST",
      "url": "/api/tasks",
      "file": "src\\app\\api\\tasks\\route.ts",
      "title": "Create Tasks",
      "description": "Create a new tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks"
    },
    {
      "method": "PATCH",
      "url": "/api/tasks",
      "file": "src\\app\\api\\tasks\\route.ts",
      "title": "Update Tasks",
      "description": "Partially update an existing tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks"
    },
    {
      "method": "GET",
      "url": "/api/taskboards",
      "file": "src\\app\\api\\taskboards\\route.ts",
      "title": "List Taskboards",
      "description": "Retrieve a list of taskboardss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "taskboards"
      ],
      "summary": "Retrieve a list of taskboardss"
    },
    {
      "method": "POST",
      "url": "/api/taskboards",
      "file": "src\\app\\api\\taskboards\\route.ts",
      "title": "Create Taskboards",
      "description": "Create a new taskboards",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "taskboards"
      ],
      "summary": "Create a new taskboards"
    },
    {
      "method": "GET",
      "url": "/api/stories",
      "file": "src\\app\\api\\stories\\route.ts",
      "title": "List Stories",
      "description": "Retrieve a list of storiess",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "stories"
      ],
      "summary": "Retrieve a list of storiess"
    },
    {
      "method": "POST",
      "url": "/api/stories",
      "file": "src\\app\\api\\stories\\route.ts",
      "title": "Create Stories",
      "description": "Create a new stories",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "stories"
      ],
      "summary": "Create a new stories"
    },
    {
      "method": "POST",
      "url": "/api/sidebar",
      "file": "src\\app\\api\\sidebar\\route.ts",
      "title": "Create Sidebar",
      "description": "Create a new sidebar",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "sidebar"
      ],
      "summary": "Create a new sidebar"
    },
    {
      "method": "GET",
      "url": "/api/search",
      "file": "src\\app\\api\\search\\route.ts",
      "title": "List Search",
      "description": "Retrieve a list of searchs",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "search"
      ],
      "summary": "Retrieve a list of searchs"
    },
    {
      "method": "GET",
      "url": "/api/resolve-slug",
      "file": "src\\app\\api\\resolve-slug\\route.ts",
      "title": "List Resolve-slug",
      "description": "Retrieve a list of resolve-slugs",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "resolve-slug"
      ],
      "summary": "Retrieve a list of resolve-slugs"
    },
    {
      "method": "GET",
      "url": "/api/resolve-issue-key",
      "file": "src\\app\\api\\resolve-issue-key\\route.ts",
      "title": "List Resolve-issue-key",
      "description": "Retrieve a list of resolve-issue-keys",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "resolve-issue-key"
      ],
      "summary": "Retrieve a list of resolve-issue-keys"
    },
    {
      "method": "POST",
      "url": "/api/register",
      "file": "src\\app\\api\\register\\route.ts",
      "title": "Create Register",
      "description": "Create a new register",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "register"
      ],
      "summary": "Create a new register"
    },
    {
      "method": "GET",
      "url": "/api/notifications",
      "file": "src\\app\\api\\notifications\\route.ts",
      "title": "List Notifications",
      "description": "Retrieve a list of notificationss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "notifications"
      ],
      "summary": "Retrieve a list of notificationss"
    },
    {
      "method": "GET",
      "url": "/api/milestones",
      "file": "src\\app\\api\\milestones\\route.ts",
      "title": "List Milestones",
      "description": "Retrieve a list of milestoness",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "milestones"
      ],
      "summary": "Retrieve a list of milestoness"
    },
    {
      "method": "POST",
      "url": "/api/milestones",
      "file": "src\\app\\api\\milestones\\route.ts",
      "title": "Create Milestones",
      "description": "Create a new milestones",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "milestones"
      ],
      "summary": "Create a new milestones"
    },
    {
      "method": "GET",
      "url": "/api/posts",
      "file": "src\\app\\api\\posts\\route.ts",
      "title": "List Posts",
      "description": "Retrieve a list of postss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve a list of postss"
    },
    {
      "method": "POST",
      "url": "/api/posts",
      "file": "src\\app\\api\\posts\\route.ts",
      "title": "Create Posts",
      "description": "Create a new posts",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts"
    },
    {
      "method": "POST",
      "url": "/api/mentions",
      "file": "src\\app\\api\\mentions\\route.ts",
      "title": "Create Mentions",
      "description": "Create a new mentions",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "mentions"
      ],
      "summary": "Create a new mentions"
    },
    {
      "method": "GET",
      "url": "/api/features",
      "file": "src\\app\\api\\features\\route.ts",
      "title": "List Features",
      "description": "Retrieve a list of featuress",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "features"
      ],
      "summary": "Retrieve a list of featuress"
    },
    {
      "method": "POST",
      "url": "/api/features",
      "file": "src\\app\\api\\features\\route.ts",
      "title": "Create Features",
      "description": "Create a new features",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "features"
      ],
      "summary": "Create a new features"
    },
    {
      "method": "GET",
      "url": "/api/issues",
      "file": "src\\app\\api\\issues\\route.ts",
      "title": "List Issues",
      "description": "Retrieve a list of issuess",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve a list of issuess"
    },
    {
      "method": "POST",
      "url": "/api/issues",
      "file": "src\\app\\api\\issues\\route.ts",
      "title": "Create Issues",
      "description": "Create a new issues",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues"
    },
    {
      "method": "GET",
      "url": "/api/notes",
      "file": "src\\app\\api\\notes\\route.ts",
      "title": "List Notes",
      "description": "Retrieve a list of notess",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "notes"
      ],
      "summary": "Retrieve a list of notess"
    },
    {
      "method": "POST",
      "url": "/api/notes",
      "file": "src\\app\\api\\notes\\route.ts",
      "title": "Create Notes",
      "description": "Create a new notes",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "notes"
      ],
      "summary": "Create a new notes"
    },
    {
      "method": "GET",
      "url": "/api/epics",
      "file": "src\\app\\api\\epics\\route.ts",
      "title": "List Epics",
      "description": "Retrieve a list of epicss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "epics"
      ],
      "summary": "Retrieve a list of epicss"
    },
    {
      "method": "POST",
      "url": "/api/epics",
      "file": "src\\app\\api\\epics\\route.ts",
      "title": "Create Epics",
      "description": "Create a new epics",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "epics"
      ],
      "summary": "Create a new epics"
    },
    {
      "method": "GET",
      "url": "/api/conversations",
      "file": "src\\app\\api\\conversations\\route.ts",
      "title": "List Conversations",
      "description": "Retrieve a list of conversationss",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "conversations"
      ],
      "summary": "Retrieve a list of conversationss"
    },
    {
      "method": "POST",
      "url": "/api/conversations",
      "file": "src\\app\\api\\conversations\\route.ts",
      "title": "Create Conversations",
      "description": "Create a new conversations",
      "parameters": [
        {
          "name": "body",
          "type": "object",
          "required": true,
          "location": "body",
          "description": "Request body"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "conversations"
      ],
      "summary": "Create a new conversations"
    },
    {
      "method": "POST",
      "url": "/api/create-personal-workspace",
      "file": "src\\app\\api\\create-personal-workspace\\route.ts",
      "title": "Create Create-personal-workspace",
      "description": "Create a new create-personal-workspace",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "create-personal-workspace"
      ],
      "summary": "Create a new create-personal-workspace"
    },
    {
      "method": "POST",
      "url": "/api/chat-token",
      "file": "src\\app\\api\\chat-token\\route.ts",
      "title": "Create Chat-token",
      "description": "Create a new chat-token",
      "parameters": [
        {
          "name": "body",
          "type": "object",
          "required": true,
          "location": "body",
          "description": "Request body"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "chat-token"
      ],
      "summary": "Create a new chat-token"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\route.ts",
      "title": "Get Workspaces {workspaceId}",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\route.ts",
      "title": "Delete Workspaces {workspaceId}",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}"
    },
    {
      "method": "PATCH",
      "url": "/api/workspaces/{workspaceId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\route.ts",
      "title": "Update Workspaces {workspaceId}",
      "description": "Partially update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Partially update an existing workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/invitations",
      "file": "src\\app\\api\\workspaces\\invitations\\route.ts",
      "title": "Get Workspaces Invitations",
      "description": "Retrieve workspaces invitations information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces invitations information"
    },
    {
      "method": "GET",
      "url": "/api/views/{viewId}",
      "file": "src\\app\\api\\views\\[viewId]\\route.ts",
      "title": "Get Views {viewId}",
      "description": "Retrieve views {viewid} information",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "views"
      ],
      "summary": "Retrieve views {viewid} information"
    },
    {
      "method": "PUT",
      "url": "/api/views/{viewId}",
      "file": "src\\app\\api\\views\\[viewId]\\route.ts",
      "title": "Update Views {viewId}",
      "description": "Update an existing views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "views"
      ],
      "summary": "Update an existing views {viewid}"
    },
    {
      "method": "DELETE",
      "url": "/api/views/{viewId}",
      "file": "src\\app\\api\\views\\[viewId]\\route.ts",
      "title": "Delete Views {viewId}",
      "description": "Remove a views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "views"
      ],
      "summary": "Remove a views {viewid}"
    },
    {
      "method": "GET",
      "url": "/api/users/search",
      "file": "src\\app\\api\\users\\search\\route.ts",
      "title": "Get Users Search",
      "description": "Retrieve users search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "users"
      ],
      "summary": "Retrieve users search information"
    },
    {
      "method": "GET",
      "url": "/api/users/me",
      "file": "src\\app\\api\\users\\me\\route.ts",
      "title": "Get Users Me",
      "description": "Retrieve users me information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "users"
      ],
      "summary": "Retrieve users me information"
    },
    {
      "method": "PATCH",
      "url": "/api/users/me",
      "file": "src\\app\\api\\users\\me\\route.ts",
      "title": "Update Users Me",
      "description": "Partially update an existing users me",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "users"
      ],
      "summary": "Partially update an existing users me"
    },
    {
      "method": "POST",
      "url": "/api/users/lookup",
      "file": "src\\app\\api\\users\\lookup\\route.ts",
      "title": "Create Users Lookup",
      "description": "Create a new users lookup",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "users"
      ],
      "summary": "Create a new users lookup"
    },
    {
      "method": "PATCH",
      "url": "/api/user/profile",
      "file": "src\\app\\api\\user\\profile\\route.ts",
      "title": "Update User Profile",
      "description": "Partially update an existing user profile",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "user"
      ],
      "summary": "Partially update an existing user profile"
    },
    {
      "method": "GET",
      "url": "/api/user/me",
      "file": "src\\app\\api\\user\\me\\route.ts",
      "title": "Get User Me",
      "description": "Retrieve user me information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "user"
      ],
      "summary": "Retrieve user me information"
    },
    {
      "method": "PATCH",
      "url": "/api/user/avatar",
      "file": "src\\app\\api\\user\\avatar\\route.ts",
      "title": "Update User Avatar",
      "description": "Partially update an existing user avatar",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "user"
      ],
      "summary": "Partially update an existing user avatar"
    },
    {
      "method": "GET",
      "url": "/api/user/notification-preferences",
      "file": "src\\app\\api\\user\\notification-preferences\\route.ts",
      "title": "Get User Notification-preferences",
      "description": "Retrieve user notification-preferences information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "user"
      ],
      "summary": "Retrieve user notification-preferences information"
    },
    {
      "method": "POST",
      "url": "/api/user/notification-preferences",
      "file": "src\\app\\api\\user\\notification-preferences\\route.ts",
      "title": "Create User Notification-preferences",
      "description": "Create a new user notification-preferences",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "user"
      ],
      "summary": "Create a new user notification-preferences"
    },
    {
      "method": "PATCH",
      "url": "/api/user/notification-preferences",
      "file": "src\\app\\api\\user\\notification-preferences\\route.ts",
      "title": "Update User Notification-preferences",
      "description": "Partially update an existing user notification-preferences",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "user"
      ],
      "summary": "Partially update an existing user notification-preferences"
    },
    {
      "method": "POST",
      "url": "/api/upload/image",
      "file": "src\\app\\api\\upload\\image\\route.ts",
      "title": "Create Upload Image",
      "description": "API route handler for uploading images to Cloudinary",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "upload"
      ],
      "summary": "API route handler for uploading images to Cloudinary"
    },
    {
      "method": "POST",
      "url": "/api/upload/profile-image",
      "file": "src\\app\\api\\upload\\profile-image\\route.ts",
      "title": "Create Upload Profile-image",
      "description": "API route handler for uploading profile images from URLs to Cloudinary",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "upload"
      ],
      "summary": "API route handler for uploading profile images from URLs to Cloudinary"
    },
    {
      "method": "POST",
      "url": "/api/timeline/posts",
      "file": "src\\app\\api\\timeline\\posts\\route.ts",
      "title": "Create Timeline Posts",
      "description": "Create a new timeline posts",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "timeline"
      ],
      "summary": "Create a new timeline posts"
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}",
      "file": "src\\app\\api\\tasks\\[taskId]\\route.ts",
      "title": "Get Tasks {taskId}",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information"
    },
    {
      "method": "DELETE",
      "url": "/api/tasks/{taskId}",
      "file": "src\\app\\api\\tasks\\[taskId]\\route.ts",
      "title": "Delete Tasks {taskId}",
      "description": "Remove a tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Remove a tasks {taskid}"
    },
    {
      "method": "GET",
      "url": "/api/tasks/search",
      "file": "src\\app\\api\\tasks\\search\\route.ts",
      "title": "Get Tasks Search",
      "description": "Retrieve tasks search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks search information"
    },
    {
      "method": "GET",
      "url": "/api/taskboards/{taskBoardId}",
      "file": "src\\app\\api\\taskboards\\[taskBoardId]\\route.ts",
      "title": "Get Taskboards {taskBoardId}",
      "description": "Retrieve taskboards {taskboardid} information",
      "parameters": [
        {
          "name": "taskBoardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskBoardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "taskboards"
      ],
      "summary": "Retrieve taskboards {taskboardid} information"
    },
    {
      "method": "DELETE",
      "url": "/api/taskboards/{taskBoardId}",
      "file": "src\\app\\api\\taskboards\\[taskBoardId]\\route.ts",
      "title": "Delete Taskboards {taskBoardId}",
      "description": "Remove a taskboards {taskboardid}",
      "parameters": [
        {
          "name": "taskBoardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskBoardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "taskboards"
      ],
      "summary": "Remove a taskboards {taskboardid}"
    },
    {
      "method": "PATCH",
      "url": "/api/taskboards/{taskBoardId}",
      "file": "src\\app\\api\\taskboards\\[taskBoardId]\\route.ts",
      "title": "Update Taskboards {taskBoardId}",
      "description": "Partially update an existing taskboards {taskboardid}",
      "parameters": [
        {
          "name": "taskBoardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskBoardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "taskboards"
      ],
      "summary": "Partially update an existing taskboards {taskboardid}"
    },
    {
      "method": "GET",
      "url": "/api/stories/{storyId}",
      "file": "src\\app\\api\\stories\\[storyId]\\route.ts",
      "title": "Get Stories {storyId}",
      "description": "Retrieve stories {storyid} information",
      "parameters": [
        {
          "name": "storyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: storyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "stories"
      ],
      "summary": "Retrieve stories {storyid} information"
    },
    {
      "method": "DELETE",
      "url": "/api/stories/{storyId}",
      "file": "src\\app\\api\\stories\\[storyId]\\route.ts",
      "title": "Delete Stories {storyId}",
      "description": "Remove a stories {storyid}",
      "parameters": [
        {
          "name": "storyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: storyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "stories"
      ],
      "summary": "Remove a stories {storyid}"
    },
    {
      "method": "PATCH",
      "url": "/api/stories/{storyId}",
      "file": "src\\app\\api\\stories\\[storyId]\\route.ts",
      "title": "Update Stories {storyId}",
      "description": "Partially update an existing stories {storyid}",
      "parameters": [
        {
          "name": "storyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: storyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "stories"
      ],
      "summary": "Partially update an existing stories {storyid}"
    },
    {
      "method": "GET",
      "url": "/api/stories/search",
      "file": "src\\app\\api\\stories\\search\\route.ts",
      "title": "Get Stories Search",
      "description": "Retrieve stories search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "stories"
      ],
      "summary": "Retrieve stories search information"
    },
    {
      "method": "POST",
      "url": "/api/slack/my-tasks",
      "file": "src\\app\\api\\slack\\my-tasks\\route.ts",
      "title": "Create Slack My-tasks",
      "description": "Create a new slack my-tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "slack"
      ],
      "summary": "Create a new slack my-tasks"
    },
    {
      "method": "PATCH",
      "url": "/api/notifications/{id}",
      "file": "src\\app\\api\\notifications\\[id]\\route.ts",
      "title": "Update Notifications {id}",
      "description": "Partially update an existing notifications {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "notifications"
      ],
      "summary": "Partially update an existing notifications {id}"
    },
    {
      "method": "POST",
      "url": "/api/notifications/read-all",
      "file": "src\\app\\api\\notifications\\read-all\\route.ts",
      "title": "Create Notifications Read-all",
      "description": "Create a new notifications read-all",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "notifications"
      ],
      "summary": "Create a new notifications read-all"
    },
    {
      "method": "GET",
      "url": "/api/milestones/{milestoneId}",
      "file": "src\\app\\api\\milestones\\[milestoneId]\\route.ts",
      "title": "Get Milestones {milestoneId}",
      "description": "Retrieve milestones {milestoneid} information",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: milestoneId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "milestones"
      ],
      "summary": "Retrieve milestones {milestoneid} information"
    },
    {
      "method": "DELETE",
      "url": "/api/milestones/{milestoneId}",
      "file": "src\\app\\api\\milestones\\[milestoneId]\\route.ts",
      "title": "Delete Milestones {milestoneId}",
      "description": "Remove a milestones {milestoneid}",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: milestoneId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "milestones"
      ],
      "summary": "Remove a milestones {milestoneid}"
    },
    {
      "method": "PATCH",
      "url": "/api/milestones/{milestoneId}",
      "file": "src\\app\\api\\milestones\\[milestoneId]\\route.ts",
      "title": "Update Milestones {milestoneId}",
      "description": "Partially update an existing milestones {milestoneid}",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: milestoneId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "milestones"
      ],
      "summary": "Partially update an existing milestones {milestoneid}"
    },
    {
      "method": "GET",
      "url": "/api/milestones/search",
      "file": "src\\app\\api\\milestones\\search\\route.ts",
      "title": "Get Milestones Search",
      "description": "Retrieve milestones search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "milestones"
      ],
      "summary": "Retrieve milestones search information"
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}",
      "file": "src\\app\\api\\posts\\[postId]\\route.ts",
      "title": "Get Posts {postId}",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information"
    },
    {
      "method": "DELETE",
      "url": "/api/posts/{postId}",
      "file": "src\\app\\api\\posts\\[postId]\\route.ts",
      "title": "Delete Posts {postId}",
      "description": "Remove a posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Remove a posts {postid}"
    },
    {
      "method": "PATCH",
      "url": "/api/posts/{postId}",
      "file": "src\\app\\api\\posts\\[postId]\\route.ts",
      "title": "Update Posts {postId}",
      "description": "Partially update an existing posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "posts"
      ],
      "summary": "Partially update an existing posts {postid}"
    },
    {
      "method": "GET",
      "url": "/api/leave/requests",
      "file": "src\\app\\api\\leave\\requests\\route.ts",
      "title": "Get Leave Requests",
      "description": "GET /api/leave/requests?workspaceId=xxx - Get user's leave requests for a workspace",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "leave"
      ],
      "summary": "GET /api/leave/requests?workspaceId=xxx - Get user's leave requests for a workspace"
    },
    {
      "method": "POST",
      "url": "/api/leave/requests",
      "file": "src\\app\\api\\leave\\requests\\route.ts",
      "title": "Create Leave Requests",
      "description": "POST /api/leave/requests - Create a new leave request",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "POST /api/leave/requests - Create a new leave request"
    },
    {
      "method": "GET",
      "url": "/api/leave/policies",
      "file": "src\\app\\api\\leave\\policies\\route.ts",
      "title": "Get Leave Policies",
      "description": "GET /api/leave/policies?workspaceId=xxx&includeHidden=true - Get leave policies for a workspace",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "leave"
      ],
      "summary": "GET /api/leave/policies?workspaceId=xxx&includeHidden=true - Get leave policies for a workspace"
    },
    {
      "method": "POST",
      "url": "/api/leave/policies",
      "file": "src\\app\\api\\leave\\policies\\route.ts",
      "title": "Create Leave Policies",
      "description": "POST /api/leave/policies - Create a new leave policy",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "POST /api/leave/policies - Create a new leave policy"
    },
    {
      "method": "GET",
      "url": "/api/leave/balances",
      "file": "src\\app\\api\\leave\\balances\\route.ts",
      "title": "Get Leave Balances",
      "description": "GET /api/leave/balances?workspaceId=xxx&year=2024 - Get user's leave balances for a workspace",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "leave"
      ],
      "summary": "GET /api/leave/balances?workspaceId=xxx&year=2024 - Get user's leave balances for a workspace"
    },
    {
      "method": "GET",
      "url": "/api/features/{id}",
      "file": "src\\app\\api\\features\\[id]\\route.ts",
      "title": "Get Features {id}",
      "description": "Retrieve features {id} information",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "features"
      ],
      "summary": "Retrieve features {id} information"
    },
    {
      "method": "DELETE",
      "url": "/api/features/{id}",
      "file": "src\\app\\api\\features\\[id]\\route.ts",
      "title": "Delete Features {id}",
      "description": "Remove a features {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "features"
      ],
      "summary": "Remove a features {id}"
    },
    {
      "method": "PATCH",
      "url": "/api/features/{id}",
      "file": "src\\app\\api\\features\\[id]\\route.ts",
      "title": "Update Features {id}",
      "description": "Partially update an existing features {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "features"
      ],
      "summary": "Partially update an existing features {id}"
    },
    {
      "method": "GET",
      "url": "/api/issues/{issueId}",
      "file": "src\\app\\api\\issues\\[issueId]\\route.ts",
      "title": "Get Issues {issueId}",
      "description": "Retrieve issues {issueid} information",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues {issueid} information"
    },
    {
      "method": "PUT",
      "url": "/api/issues/{issueId}",
      "file": "src\\app\\api\\issues\\[issueId]\\route.ts",
      "title": "Update Issues {issueId}",
      "description": "Update an existing issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "issues"
      ],
      "summary": "Update an existing issues {issueid}"
    },
    {
      "method": "DELETE",
      "url": "/api/issues/{issueId}",
      "file": "src\\app\\api\\issues\\[issueId]\\route.ts",
      "title": "Delete Issues {issueId}",
      "description": "Remove a issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Remove a issues {issueid}"
    },
    {
      "method": "GET",
      "url": "/api/issues/search",
      "file": "src\\app\\api\\issues\\search\\route.ts",
      "title": "Get Issues Search",
      "description": "Retrieve issues search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues search information"
    },
    {
      "method": "GET",
      "url": "/api/issues/resolve",
      "file": "src\\app\\api\\issues\\resolve\\route.ts",
      "title": "Get Issues Resolve",
      "description": "Retrieve issues resolve information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues resolve information"
    },
    {
      "method": "GET",
      "url": "/api/face-layers/counts",
      "file": "src\\app\\api\\face-layers\\counts\\route.ts",
      "title": "Get Face-layers Counts",
      "description": "Retrieve face-layers counts information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "face-layers"
      ],
      "summary": "Retrieve face-layers counts information"
    },
    {
      "method": "GET",
      "url": "/api/notes/{id}",
      "file": "src\\app\\api\\notes\\[id]\\route.ts",
      "title": "Get Notes {id}",
      "description": "Retrieve notes {id} information",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "notes"
      ],
      "summary": "Retrieve notes {id} information"
    },
    {
      "method": "DELETE",
      "url": "/api/notes/{id}",
      "file": "src\\app\\api\\notes\\[id]\\route.ts",
      "title": "Delete Notes {id}",
      "description": "Remove a notes {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "notes"
      ],
      "summary": "Remove a notes {id}"
    },
    {
      "method": "PATCH",
      "url": "/api/notes/{id}",
      "file": "src\\app\\api\\notes\\[id]\\route.ts",
      "title": "Update Notes {id}",
      "description": "Partially update an existing notes {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "notes"
      ],
      "summary": "Partially update an existing notes {id}"
    },
    {
      "method": "GET",
      "url": "/api/notes/tags",
      "file": "src\\app\\api\\notes\\tags\\route.ts",
      "title": "Get Notes Tags",
      "description": "Retrieve notes tags information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "notes"
      ],
      "summary": "Retrieve notes tags information"
    },
    {
      "method": "POST",
      "url": "/api/notes/tags",
      "file": "src\\app\\api\\notes\\tags\\route.ts",
      "title": "Create Notes Tags",
      "description": "Create a new notes tags",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "notes"
      ],
      "summary": "Create a new notes tags"
    },
    {
      "method": "GET",
      "url": "/api/epics/{epicId}",
      "file": "src\\app\\api\\epics\\[epicId]\\route.ts",
      "title": "Get Epics {epicId}",
      "description": "Retrieve epics {epicid} information",
      "parameters": [
        {
          "name": "epicId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: epicId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "epics"
      ],
      "summary": "Retrieve epics {epicid} information"
    },
    {
      "method": "DELETE",
      "url": "/api/epics/{epicId}",
      "file": "src\\app\\api\\epics\\[epicId]\\route.ts",
      "title": "Delete Epics {epicId}",
      "description": "Remove a epics {epicid}",
      "parameters": [
        {
          "name": "epicId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: epicId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "epics"
      ],
      "summary": "Remove a epics {epicid}"
    },
    {
      "method": "PATCH",
      "url": "/api/epics/{epicId}",
      "file": "src\\app\\api\\epics\\[epicId]\\route.ts",
      "title": "Update Epics {epicId}",
      "description": "Partially update an existing epics {epicid}",
      "parameters": [
        {
          "name": "epicId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: epicId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "epics"
      ],
      "summary": "Partially update an existing epics {epicid}"
    },
    {
      "method": "GET",
      "url": "/api/epics/search",
      "file": "src\\app\\api\\epics\\search\\route.ts",
      "title": "Get Epics Search",
      "description": "Retrieve epics search information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "epics"
      ],
      "summary": "Retrieve epics search information"
    },
    {
      "method": "POST",
      "url": "/api/boards/import",
      "file": "src\\app\\api\\boards\\import\\route.ts",
      "title": "Create Boards Import",
      "description": "Create a new boards import",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "boards"
      ],
      "summary": "Create a new boards import"
    },
    {
      "method": "POST",
      "url": "/api/ai/shorten",
      "file": "src\\app\\api\\ai\\shorten\\route.ts",
      "title": "Create Ai Shorten",
      "description": "Create a new ai shorten",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai shorten"
    },
    {
      "method": "GET",
      "url": "/api/ai/jobs",
      "file": "src\\app\\api\\ai\\jobs\\route.ts",
      "title": "Get Ai Jobs",
      "description": "Retrieve ai jobs information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai jobs information"
    },
    {
      "method": "POST",
      "url": "/api/ai/generate-tasks",
      "file": "src\\app\\api\\ai\\generate-tasks\\route.ts",
      "title": "Create Ai Generate-tasks",
      "description": "Create a new ai generate-tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai generate-tasks"
    },
    {
      "method": "POST",
      "url": "/api/ai/generate-stories",
      "file": "src\\app\\api\\ai\\generate-stories\\route.ts",
      "title": "Create Ai Generate-stories",
      "description": "Create a new ai generate-stories",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai generate-stories"
    },
    {
      "method": "POST",
      "url": "/api/ai/improve",
      "file": "src\\app\\api\\ai\\improve\\route.ts",
      "title": "Create Ai Improve",
      "description": "Create a new ai improve",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai improve"
    },
    {
      "method": "POST",
      "url": "/api/ai/generate-and-create-tasks",
      "file": "src\\app\\api\\ai\\generate-and-create-tasks\\route.ts",
      "title": "Create Ai Generate-and-create-tasks",
      "description": "Create a new ai generate-and-create-tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai generate-and-create-tasks"
    },
    {
      "method": "POST",
      "url": "/api/ai/generate-and-create-stories",
      "file": "src\\app\\api\\ai\\generate-and-create-stories\\route.ts",
      "title": "Create Ai Generate-and-create-stories",
      "description": "Create a new ai generate-and-create-stories",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai generate-and-create-stories"
    },
    {
      "method": "POST",
      "url": "/api/ai/assistant",
      "file": "src\\app\\api\\ai\\assistant\\route.ts",
      "title": "Create Ai Assistant",
      "description": "Create a new ai assistant",
      "parameters": [
        {
          "name": "query",
          "type": "object",
          "required": false,
          "location": "query",
          "description": "Query parameters"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai assistant"
    },
    {
      "method": "GET",
      "url": "/api/activities/timesheet",
      "file": "src\\app\\api\\activities\\timesheet\\route.ts",
      "title": "Get Activities Timesheet",
      "description": "Retrieve activities timesheet information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "activities"
      ],
      "summary": "Retrieve activities timesheet information"
    },
    {
      "method": "GET",
      "url": "/api/activities/status",
      "file": "src\\app\\api\\activities\\status\\route.ts",
      "title": "Get Activities Status",
      "description": "Retrieve activities status information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "activities"
      ],
      "summary": "Retrieve activities status information"
    },
    {
      "method": "GET",
      "url": "/api/activities/history",
      "file": "src\\app\\api\\activities\\history\\route.ts",
      "title": "Get Activities History",
      "description": "Retrieve activities history information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "activities"
      ],
      "summary": "Retrieve activities history information"
    },
    {
      "method": "POST",
      "url": "/api/activities/end",
      "file": "src\\app\\api\\activities\\end\\route.ts",
      "title": "Create Activities End",
      "description": "Create a new activities end",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "activities"
      ],
      "summary": "Create a new activities end"
    },
    {
      "method": "POST",
      "url": "/api/activities/start",
      "file": "src\\app\\api\\activities\\start\\route.ts",
      "title": "Create Activities Start",
      "description": "Create a new activities start",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "activities"
      ],
      "summary": "Create a new activities start"
    },
    {
      "method": "GET",
      "url": "/api/activities/daily-breakdown",
      "file": "src\\app\\api\\activities\\daily-breakdown\\route.ts",
      "title": "Get Activities Daily-breakdown",
      "description": "Retrieve activities daily-breakdown information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "activities"
      ],
      "summary": "Retrieve activities daily-breakdown information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/views",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\views\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/views",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\views\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/team-activity",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\team-activity\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/task",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\task\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/task",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\task\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/stories",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\stories\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/settings",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\settings\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "PATCH",
      "url": "/api/workspaces/{workspaceId}/settings",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\settings\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Partially update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Partially update an existing workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/search-tasks",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\search-tasks\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/search-issues",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\search-issues\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/projects",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/projects",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/milestones",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\milestones\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/permissions",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\permissions\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/permissions",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\permissions\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "PUT",
      "url": "/api/workspaces/{workspaceId}/permissions",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\permissions\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Update an existing workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/members",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\members\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/labels",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\labels\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/invitations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\invitations\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/invitations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\invitations\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/invitations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\invitations\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/epics",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\epics\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/custom-roles",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\custom-roles\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/custom-roles",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\custom-roles\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/boards",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\boards\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/boards",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\boards\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/action-filter-issues",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\action-filter-issues\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/invitations/{token}",
      "file": "src\\app\\api\\workspaces\\invitations\\[token]\\route.ts",
      "title": "Get Workspaces Invitations by ID",
      "description": "Retrieve workspaces invitations information",
      "parameters": [
        {
          "name": "token",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: token"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces invitations information"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/invitations/{token}",
      "file": "src\\app\\api\\workspaces\\invitations\\[token]\\route.ts",
      "title": "Create Workspaces Invitations by ID",
      "description": "Create a new workspaces invitations",
      "parameters": [
        {
          "name": "token",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: token"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces invitations"
    },
    {
      "method": "GET",
      "url": "/api/views/{viewId}/issue-positions",
      "file": "src\\app\\api\\views\\[viewId]\\issue-positions\\route.ts",
      "title": "Get Views {viewId} by ID",
      "description": "Retrieve views {viewid} information",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "views"
      ],
      "summary": "Retrieve views {viewid} information"
    },
    {
      "method": "PUT",
      "url": "/api/views/{viewId}/issue-positions",
      "file": "src\\app\\api\\views\\[viewId]\\issue-positions\\route.ts",
      "title": "Update Views {viewId} by ID",
      "description": "Update an existing views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "views"
      ],
      "summary": "Update an existing views {viewid}"
    },
    {
      "method": "GET",
      "url": "/api/views/{viewId}/follow",
      "file": "src\\app\\api\\views\\[viewId]\\follow\\route.ts",
      "title": "Get Views {viewId} by ID",
      "description": "Retrieve views {viewid} information",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "views"
      ],
      "summary": "Retrieve views {viewid} information"
    },
    {
      "method": "POST",
      "url": "/api/views/{viewId}/follow",
      "file": "src\\app\\api\\views\\[viewId]\\follow\\route.ts",
      "title": "Create Views {viewId} by ID",
      "description": "Create a new views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "views"
      ],
      "summary": "Create a new views {viewid}"
    },
    {
      "method": "DELETE",
      "url": "/api/views/{viewId}/follow",
      "file": "src\\app\\api\\views\\[viewId]\\follow\\route.ts",
      "title": "Delete Views {viewId} by ID",
      "description": "Remove a views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "views"
      ],
      "summary": "Remove a views {viewid}"
    },
    {
      "method": "GET",
      "url": "/api/users/{userId}/assigned-tasks",
      "file": "src\\app\\api\\users\\[userId]\\assigned-tasks\\route.ts",
      "title": "Get Users {userId} by ID",
      "description": "Retrieve users {userid} information",
      "parameters": [
        {
          "name": "userId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: userId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "users"
      ],
      "summary": "Retrieve users {userid} information"
    },
    {
      "method": "POST",
      "url": "/api/views/{viewId}/favorite",
      "file": "src\\app\\api\\views\\[viewId]\\favorite\\route.ts",
      "title": "Create Views {viewId} by ID",
      "description": "Create a new views {viewid}",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "views"
      ],
      "summary": "Create a new views {viewid}"
    },
    {
      "method": "GET",
      "url": "/api/users/{userId}/assigned-issues",
      "file": "src\\app\\api\\users\\[userId]\\assigned-issues\\route.ts",
      "title": "Get Users {userId} by ID",
      "description": "Retrieve users {userid} information",
      "parameters": [
        {
          "name": "userId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: userId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "users"
      ],
      "summary": "Retrieve users {userid} information"
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/stop-with-adjustment",
      "file": "src\\app\\api\\tasks\\[taskId]\\stop-with-adjustment\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}"
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/stop",
      "file": "src\\app\\api\\tasks\\[taskId]\\stop\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}"
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/request-help",
      "file": "src\\app\\api\\tasks\\[taskId]\\request-help\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}"
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/sessions",
      "file": "src\\app\\api\\tasks\\[taskId]\\sessions\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information"
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/playtime",
      "file": "src\\app\\api\\tasks\\[taskId]\\playtime\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information"
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/play",
      "file": "src\\app\\api\\tasks\\[taskId]\\play\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}"
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/pause",
      "file": "src\\app\\api\\tasks\\[taskId]\\pause\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}"
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/{taskId}/move",
      "file": "src\\app\\api\\tasks\\[taskId]\\move\\route.ts",
      "title": "Update Tasks {taskId} by ID",
      "description": "Partially update an existing tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks {taskid}"
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/helpers",
      "file": "src\\app\\api\\tasks\\[taskId]\\helpers\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information"
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/{taskId}/edit",
      "file": "src\\app\\api\\tasks\\[taskId]\\edit\\route.ts",
      "title": "Update Tasks {taskId} by ID",
      "description": "Partially update an existing tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks {taskid}"
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/follow",
      "file": "src\\app\\api\\tasks\\[taskId]\\follow\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information"
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/follow",
      "file": "src\\app\\api\\tasks\\[taskId]\\follow\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}"
    },
    {
      "method": "DELETE",
      "url": "/api/tasks/{taskId}/follow",
      "file": "src\\app\\api\\tasks\\[taskId]\\follow\\route.ts",
      "title": "Delete Tasks {taskId} by ID",
      "description": "Remove a tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Remove a tasks {taskid}"
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/comments",
      "file": "src\\app\\api\\tasks\\[taskId]\\comments\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information"
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/comments",
      "file": "src\\app\\api\\tasks\\[taskId]\\comments\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}"
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/approve-help",
      "file": "src\\app\\api\\tasks\\[taskId]\\approve-help\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}"
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/activities",
      "file": "src\\app\\api\\tasks\\[taskId]\\activities\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information"
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/adjust-time",
      "file": "src\\app\\api\\tasks\\[taskId]\\adjust-time\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}"
    },
    {
      "method": "DELETE",
      "url": "/api/tasks/columns/{columnId}",
      "file": "src\\app\\api\\tasks\\columns\\[columnId]\\route.ts",
      "title": "Delete Tasks Columns by ID",
      "description": "Remove a tasks columns",
      "parameters": [
        {
          "name": "columnId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: columnId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Remove a tasks columns"
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/columns/{columnId}",
      "file": "src\\app\\api\\tasks\\columns\\[columnId]\\route.ts",
      "title": "Update Tasks Columns by ID",
      "description": "Partially update an existing tasks columns",
      "parameters": [
        {
          "name": "columnId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: columnId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks columns"
    },
    {
      "method": "GET",
      "url": "/api/tasks/boards/{boardId}",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\route.ts",
      "title": "Get Tasks Boards by ID",
      "description": "Retrieve tasks boards information",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks boards information"
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/boards/{boardId}",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\route.ts",
      "title": "Update Tasks Boards by ID",
      "description": "Partially update an existing tasks boards",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "position": {
              "type": "number"
            },
            "key": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "id": "example_id",
          "position": 0,
          "key": "example_key"
        }
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks boards"
    },
    {
      "method": "GET",
      "url": "/api/projects/{projectId}/statuses",
      "file": "src\\app\\api\\projects\\[projectId]\\statuses\\route.ts",
      "title": "Get Projects {projectId} by ID",
      "description": "Retrieve projects {projectid} information",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "projects"
      ],
      "summary": "Retrieve projects {projectid} information"
    },
    {
      "method": "POST",
      "url": "/api/projects/{projectId}/statuses",
      "file": "src\\app\\api\\projects\\[projectId]\\statuses\\route.ts",
      "title": "Create Projects {projectId} by ID",
      "description": "Create a new projects {projectid}",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "projects"
      ],
      "summary": "Create a new projects {projectid}"
    },
    {
      "method": "GET",
      "url": "/api/projects/{projectId}/follow",
      "file": "src\\app\\api\\projects\\[projectId]\\follow\\route.ts",
      "title": "Get Projects {projectId} by ID",
      "description": "Retrieve projects {projectid} information",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "projects"
      ],
      "summary": "Retrieve projects {projectid} information"
    },
    {
      "method": "POST",
      "url": "/api/projects/{projectId}/follow",
      "file": "src\\app\\api\\projects\\[projectId]\\follow\\route.ts",
      "title": "Create Projects {projectId} by ID",
      "description": "Create a new projects {projectid}",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "projects"
      ],
      "summary": "Create a new projects {projectid}"
    },
    {
      "method": "DELETE",
      "url": "/api/projects/{projectId}/follow",
      "file": "src\\app\\api\\projects\\[projectId]\\follow\\route.ts",
      "title": "Delete Projects {projectId} by ID",
      "description": "Remove a projects {projectid}",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "projects"
      ],
      "summary": "Remove a projects {projectid}"
    },
    {
      "method": "GET",
      "url": "/api/projects/{projectId}/default-view",
      "file": "src\\app\\api\\projects\\[projectId]\\default-view\\route.ts",
      "title": "Get Projects {projectId} by ID",
      "description": "Retrieve projects {projectid} information",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "projects"
      ],
      "summary": "Retrieve projects {projectid} information"
    },
    {
      "method": "POST",
      "url": "/api/notifications/push/test",
      "file": "src\\app\\api\\notifications\\push\\test\\route.ts",
      "title": "Create Notifications Push by ID",
      "description": "Create a new notifications push",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "notifications"
      ],
      "summary": "Create a new notifications push"
    },
    {
      "method": "POST",
      "url": "/api/notifications/push/subscribe",
      "file": "src\\app\\api\\notifications\\push\\subscribe\\route.ts",
      "title": "Create Notifications Push by ID",
      "description": "Create a new notifications push",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": false,
          "description": "Bearer token for authentication"
        },
        {
          "name": "Content-Type",
          "required": false,
          "description": "Content type of the request"
        },
        {
          "name": "Accept",
          "required": false,
          "description": "Acceptable response types"
        },
        {
          "name": "User-Agent",
          "required": false,
          "description": "Client user agent"
        },
        {
          "name": "X-API-Key",
          "required": false,
          "description": "API key for authentication"
        },
        {
          "name": "X-Request-ID",
          "required": false,
          "description": "Unique request identifier"
        }
      ],
      "tags": [
        "notifications"
      ],
      "summary": "Create a new notifications push"
    },
    {
      "method": "DELETE",
      "url": "/api/notifications/push/subscribe",
      "file": "src\\app\\api\\notifications\\push\\subscribe\\route.ts",
      "title": "Delete Notifications Push by ID",
      "description": "Remove a notifications push",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": false,
          "description": "Bearer token for authentication"
        },
        {
          "name": "Content-Type",
          "required": false,
          "description": "Content type of the request"
        },
        {
          "name": "Accept",
          "required": false,
          "description": "Acceptable response types"
        },
        {
          "name": "User-Agent",
          "required": false,
          "description": "Client user agent"
        },
        {
          "name": "X-API-Key",
          "required": false,
          "description": "API key for authentication"
        },
        {
          "name": "X-Request-ID",
          "required": false,
          "description": "Unique request identifier"
        }
      ],
      "tags": [
        "notifications"
      ],
      "summary": "Remove a notifications push"
    },
    {
      "method": "OPTIONS",
      "url": "/api/notifications/push/subscribe",
      "file": "src\\app\\api\\notifications\\push\\subscribe\\route.ts",
      "title": "Options Notifications Push by ID",
      "description": "Get available options for notifications push",
      "parameters": [],
      "responses": {},
      "requestHeaders": [
        {
          "name": "Authorization",
          "required": false,
          "description": "Bearer token for authentication"
        },
        {
          "name": "Content-Type",
          "required": false,
          "description": "Content type of the request"
        },
        {
          "name": "Accept",
          "required": false,
          "description": "Acceptable response types"
        },
        {
          "name": "User-Agent",
          "required": false,
          "description": "Client user agent"
        },
        {
          "name": "X-API-Key",
          "required": false,
          "description": "API key for authentication"
        },
        {
          "name": "X-Request-ID",
          "required": false,
          "description": "Unique request identifier"
        }
      ],
      "tags": [
        "notifications"
      ],
      "summary": "Get available options for notifications push"
    },
    {
      "method": "PATCH",
      "url": "/api/posts/{postId}/resolve",
      "file": "src\\app\\api\\posts\\[postId]\\resolve\\route.ts",
      "title": "Update Posts {postId} by ID",
      "description": "Partially update an existing posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Partially update an existing posts {postid}"
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/tasks",
      "file": "src\\app\\api\\posts\\[postId]\\tasks\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information"
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/reactions",
      "file": "src\\app\\api\\posts\\[postId]\\reactions\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information"
    },
    {
      "method": "POST",
      "url": "/api/posts/{postId}/reactions",
      "file": "src\\app\\api\\posts\\[postId]\\reactions\\route.ts",
      "title": "Create Posts {postId} by ID",
      "description": "Create a new posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts {postid}"
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/follow",
      "file": "src\\app\\api\\posts\\[postId]\\follow\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information"
    },
    {
      "method": "POST",
      "url": "/api/posts/{postId}/follow",
      "file": "src\\app\\api\\posts\\[postId]\\follow\\route.ts",
      "title": "Create Posts {postId} by ID",
      "description": "Create a new posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts {postid}"
    },
    {
      "method": "DELETE",
      "url": "/api/posts/{postId}/follow",
      "file": "src\\app\\api\\posts\\[postId]\\follow\\route.ts",
      "title": "Delete Posts {postId} by ID",
      "description": "Remove a posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Remove a posts {postid}"
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/bookmarks",
      "file": "src\\app\\api\\posts\\[postId]\\bookmarks\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information"
    },
    {
      "method": "POST",
      "url": "/api/posts/{postId}/bookmarks",
      "file": "src\\app\\api\\posts\\[postId]\\bookmarks\\route.ts",
      "title": "Create Posts {postId} by ID",
      "description": "Create a new posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts {postid}"
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/comments",
      "file": "src\\app\\api\\posts\\[postId]\\comments\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information"
    },
    {
      "method": "POST",
      "url": "/api/posts/{postId}/comments",
      "file": "src\\app\\api\\posts\\[postId]\\comments\\route.ts",
      "title": "Create Posts {postId} by ID",
      "description": "Create a new posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts {postid}"
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/actions",
      "file": "src\\app\\api\\posts\\[postId]\\actions\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information"
    },
    {
      "method": "PUT",
      "url": "/api/leave/requests/{requestId}",
      "file": "src\\app\\api\\leave\\requests\\[requestId]\\route.ts",
      "title": "Update Leave Requests by ID",
      "description": "PUT /api/leave/requests/[requestId] - Edit leave request (user edits their own pending request)",
      "parameters": [
        {
          "name": "requestId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: requestId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "PUT /api/leave/requests/[requestId] - Edit leave request (user edits their own pending request)"
    },
    {
      "method": "DELETE",
      "url": "/api/leave/requests/{requestId}",
      "file": "src\\app\\api\\leave\\requests\\[requestId]\\route.ts",
      "title": "Delete Leave Requests by ID",
      "description": "DELETE /api/leave/requests/[requestId] - Cancel leave request (user cancels their own pending request)",
      "parameters": [
        {
          "name": "requestId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: requestId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "leave"
      ],
      "summary": "DELETE /api/leave/requests/[requestId] - Cancel leave request (user cancels their own pending request)"
    },
    {
      "method": "PATCH",
      "url": "/api/leave/requests/{requestId}",
      "file": "src\\app\\api\\leave\\requests\\[requestId]\\route.ts",
      "title": "Update Leave Requests by ID",
      "description": "PATCH /api/leave/requests/[requestId] - Update leave request status (approve/reject)",
      "parameters": [
        {
          "name": "requestId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: requestId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "PATCH /api/leave/requests/[requestId] - Update leave request status (approve/reject)"
    },
    {
      "method": "PUT",
      "url": "/api/posts/{postId}/pin",
      "file": "src\\app\\api\\posts\\[postId]\\pin\\route.ts",
      "title": "Update Posts {postId} by ID",
      "description": "Update an existing posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "posts"
      ],
      "summary": "Update an existing posts {postid}"
    },
    {
      "method": "GET",
      "url": "/api/leave/requests/workspace",
      "file": "src\\app\\api\\leave\\requests\\workspace\\route.ts",
      "title": "Get Leave Requests by ID",
      "description": "GET /api/leave/requests/workspace?workspaceId=xxx - Get all leave requests for a workspace (managers only)",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "leave"
      ],
      "summary": "GET /api/leave/requests/workspace?workspaceId=xxx - Get all leave requests for a workspace (managers only)"
    },
    {
      "method": "GET",
      "url": "/api/leave/policies/{policyId}",
      "file": "src\\app\\api\\leave\\policies\\[policyId]\\route.ts",
      "title": "Get Leave Policies by ID",
      "description": "GET /api/leave/policies/[policyId] - Get a specific leave policy",
      "parameters": [
        {
          "name": "policyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: policyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "leave"
      ],
      "summary": "GET /api/leave/policies/[policyId] - Get a specific leave policy"
    },
    {
      "method": "PUT",
      "url": "/api/leave/policies/{policyId}",
      "file": "src\\app\\api\\leave\\policies\\[policyId]\\route.ts",
      "title": "Update Leave Policies by ID",
      "description": "PUT /api/leave/policies/[policyId] - Update a leave policy",
      "parameters": [
        {
          "name": "policyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: policyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "leave"
      ],
      "summary": "PUT /api/leave/policies/[policyId] - Update a leave policy"
    },
    {
      "method": "DELETE",
      "url": "/api/leave/policies/{policyId}",
      "file": "src\\app\\api\\leave\\policies\\[policyId]\\route.ts",
      "title": "Delete Leave Policies by ID",
      "description": "DELETE /api/leave/policies/[policyId] - Delete a leave policy",
      "parameters": [
        {
          "name": "policyId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: policyId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "leave"
      ],
      "summary": "DELETE /api/leave/policies/[policyId] - Delete a leave policy"
    },
    {
      "method": "POST",
      "url": "/api/features/{id}/vote",
      "file": "src\\app\\api\\features\\[id]\\vote\\route.ts",
      "title": "Create Features {id} by ID",
      "description": "Create a new features {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "features"
      ],
      "summary": "Create a new features {id}"
    },
    {
      "method": "GET",
      "url": "/api/features/{id}/comments",
      "file": "src\\app\\api\\features\\[id]\\comments\\route.ts",
      "title": "Get Features {id} by ID",
      "description": "Retrieve features {id} information",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "features"
      ],
      "summary": "Retrieve features {id} information"
    },
    {
      "method": "POST",
      "url": "/api/features/{id}/comments",
      "file": "src\\app\\api\\features\\[id]\\comments\\route.ts",
      "title": "Create Features {id} by ID",
      "description": "Create a new features {id}",
      "parameters": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: id"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "features"
      ],
      "summary": "Create a new features {id}"
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/stop-with-adjustment",
      "file": "src\\app\\api\\issues\\[issueId]\\stop-with-adjustment\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}"
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/request-help",
      "file": "src\\app\\api\\issues\\[issueId]\\request-help\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}"
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/stop",
      "file": "src\\app\\api\\issues\\[issueId]\\stop\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}"
    },
    {
      "method": "GET",
      "url": "/api/issues/{issueId}/playtime",
      "file": "src\\app\\api\\issues\\[issueId]\\playtime\\route.ts",
      "title": "Get Issues {issueId} by ID",
      "description": "Retrieve issues {issueid} information",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues {issueid} information"
    },
    {
      "method": "GET",
      "url": "/api/issues/{issueId}/helpers",
      "file": "src\\app\\api\\issues\\[issueId]\\helpers\\route.ts",
      "title": "Get Issues {issueId} by ID",
      "description": "Retrieve issues {issueid} information",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues {issueid} information"
    },
    {
      "method": "GET",
      "url": "/api/issues/{issueId}/follow",
      "file": "src\\app\\api\\issues\\[issueId]\\follow\\route.ts",
      "title": "Get Issues {issueId} by ID",
      "description": "Retrieve issues {issueid} information",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues {issueid} information"
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/follow",
      "file": "src\\app\\api\\issues\\[issueId]\\follow\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}"
    },
    {
      "method": "DELETE",
      "url": "/api/issues/{issueId}/follow",
      "file": "src\\app\\api\\issues\\[issueId]\\follow\\route.ts",
      "title": "Delete Issues {issueId} by ID",
      "description": "Remove a issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Remove a issues {issueid}"
    },
    {
      "method": "GET",
      "url": "/api/issues/{issueId}/comments",
      "file": "src\\app\\api\\issues\\[issueId]\\comments\\route.ts",
      "title": "Get Issues {issueId} by ID",
      "description": "Retrieve issues {issueid} information",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "issues"
      ],
      "summary": "Retrieve issues {issueid} information"
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/comments",
      "file": "src\\app\\api\\issues\\[issueId]\\comments\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}"
    },
    {
      "method": "POST",
      "url": "/api/issues/{issueId}/approve-help",
      "file": "src\\app\\api\\issues\\[issueId]\\approve-help\\route.ts",
      "title": "Create Issues {issueId} by ID",
      "description": "Create a new issues {issueid}",
      "parameters": [
        {
          "name": "issueId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "issues"
      ],
      "summary": "Create a new issues {issueid}"
    },
    {
      "method": "DELETE",
      "url": "/api/notes/tags/{tagId}",
      "file": "src\\app\\api\\notes\\tags\\[tagId]\\route.ts",
      "title": "Delete Notes Tags by ID",
      "description": "Remove a notes tags",
      "parameters": [
        {
          "name": "tagId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: tagId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "notes"
      ],
      "summary": "Remove a notes tags"
    },
    {
      "method": "GET",
      "url": "/api/conversations/{conversationId}/messages",
      "file": "src\\app\\api\\conversations\\[conversationId]\\messages\\route.ts",
      "title": "Get Conversations {conversationId} by ID",
      "description": "Retrieve conversations {conversationid} information",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: conversationId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "conversations"
      ],
      "summary": "Retrieve conversations {conversationid} information"
    },
    {
      "method": "POST",
      "url": "/api/conversations/{conversationId}/messages",
      "file": "src\\app\\api\\conversations\\[conversationId]\\messages\\route.ts",
      "title": "Create Conversations {conversationId} by ID",
      "description": "Create a new conversations {conversationid}",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: conversationId"
        },
        {
          "name": "body",
          "type": "object",
          "required": true,
          "location": "body",
          "description": "Request body"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "conversations"
      ],
      "summary": "Create a new conversations {conversationid}"
    },
    {
      "method": "GET",
      "url": "/api/boards/{boardId}/follow",
      "file": "src\\app\\api\\boards\\[boardId]\\follow\\route.ts",
      "title": "Get Boards {boardId} by ID",
      "description": "Retrieve boards {boardid} information",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "boards"
      ],
      "summary": "Retrieve boards {boardid} information"
    },
    {
      "method": "POST",
      "url": "/api/boards/{boardId}/follow",
      "file": "src\\app\\api\\boards\\[boardId]\\follow\\route.ts",
      "title": "Create Boards {boardId} by ID",
      "description": "Create a new boards {boardid}",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "boards"
      ],
      "summary": "Create a new boards {boardid}"
    },
    {
      "method": "DELETE",
      "url": "/api/boards/{boardId}/follow",
      "file": "src\\app\\api\\boards\\[boardId]\\follow\\route.ts",
      "title": "Delete Boards {boardId} by ID",
      "description": "Remove a boards {boardid}",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "boards"
      ],
      "summary": "Remove a boards {boardid}"
    },
    {
      "method": "GET",
      "url": "/api/boards/{boardId}/columns",
      "file": "src\\app\\api\\boards\\[boardId]\\columns\\route.ts",
      "title": "Get Boards {boardId} by ID",
      "description": "Retrieve boards {boardid} information",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "boards"
      ],
      "summary": "Retrieve boards {boardid} information"
    },
    {
      "method": "POST",
      "url": "/api/ai/create-tasks/start",
      "file": "src\\app\\api\\ai\\create-tasks\\start\\route.ts",
      "title": "Create Ai Create-tasks by ID",
      "description": "Create a new ai create-tasks",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai create-tasks"
    },
    {
      "method": "GET",
      "url": "/api/ai/create-tasks/jobs",
      "file": "src\\app\\api\\ai\\create-tasks\\jobs\\route.ts",
      "title": "Get Ai Create-tasks by ID",
      "description": "Retrieve ai create-tasks information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai create-tasks information"
    },
    {
      "method": "POST",
      "url": "/api/ai/create-stories/start",
      "file": "src\\app\\api\\ai\\create-stories\\start\\route.ts",
      "title": "Create Ai Create-stories by ID",
      "description": "Create a new ai create-stories",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai create-stories"
    },
    {
      "method": "GET",
      "url": "/api/ai/create-stories/jobs",
      "file": "src\\app\\api\\ai\\create-stories\\jobs\\route.ts",
      "title": "Get Ai Create-stories by ID",
      "description": "Retrieve ai create-stories information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai create-stories information"
    },
    {
      "method": "GET",
      "url": "/api/ai/board-generation/status",
      "file": "src\\app\\api\\ai\\board-generation\\status\\route.ts",
      "title": "Get Ai Board-generation by ID",
      "description": "Retrieve ai board-generation information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai board-generation information"
    },
    {
      "method": "POST",
      "url": "/api/ai/board-generation/start",
      "file": "src\\app\\api\\ai\\board-generation\\start\\route.ts",
      "title": "Create Ai Board-generation by ID",
      "description": "Create a new ai board-generation",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "ai"
      ],
      "summary": "Create a new ai board-generation"
    },
    {
      "method": "GET",
      "url": "/api/ai/board-generation/jobs",
      "file": "src\\app\\api\\ai\\board-generation\\jobs\\route.ts",
      "title": "Get Ai Board-generation by ID",
      "description": "Retrieve ai board-generation information",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai board-generation information"
    },
    {
      "method": "POST",
      "url": "/api/activities/timesheet/export",
      "file": "src\\app\\api\\activities\\timesheet\\export\\route.ts",
      "title": "Create Activities Timesheet by ID",
      "description": "Create a new activities timesheet",
      "parameters": [],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "activities"
      ],
      "summary": "Create a new activities timesheet"
    },
    {
      "method": "PATCH",
      "url": "/api/activities/sessions/{sessionId}",
      "file": "src\\app\\api\\activities\\sessions\\[sessionId]\\route.ts",
      "title": "Update Activities Sessions by ID",
      "description": "Partially update an existing activities sessions",
      "parameters": [
        {
          "name": "sessionId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: sessionId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "activities"
      ],
      "summary": "Partially update an existing activities sessions"
    },
    {
      "method": "PUT",
      "url": "/api/workspaces/{workspaceId}/views/{viewId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\views\\[viewId]\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Update an existing workspaces {workspaceid}"
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/views/{viewId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\views\\[viewId]\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/projects/{projectSlug}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\[projectSlug]\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "projectSlug",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectSlug"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "PATCH",
      "url": "/api/workspaces/{workspaceId}/projects/{projectSlug}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\[projectSlug]\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Partially update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "projectSlug",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectSlug"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Partially update an existing workspaces {workspaceid}"
    },
    {
      "method": "PATCH",
      "url": "/api/workspaces/{workspaceId}/members/{memberId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\members\\[memberId]\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Partially update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "memberId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: memberId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Partially update an existing workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/members/role",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\members\\role\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/custom-roles/{roleId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\custom-roles\\[roleId]\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "roleId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: roleId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "PUT",
      "url": "/api/workspaces/{workspaceId}/custom-roles/{roleId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\custom-roles\\[roleId]\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "roleId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: roleId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Update an existing workspaces {workspaceid}"
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/custom-roles/{roleId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\custom-roles\\[roleId]\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "roleId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: roleId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}"
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/{taskId}/sessions/{sessionId}",
      "file": "src\\app\\api\\tasks\\[taskId]\\sessions\\[sessionId]\\route.ts",
      "title": "Update Tasks {taskId} by ID",
      "description": "Partially update an existing tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        },
        {
          "name": "sessionId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: sessionId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks {taskid}"
    },
    {
      "method": "GET",
      "url": "/api/tasks/boards/{boardId}/columns",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\columns\\route.ts",
      "title": "Get Tasks Boards by ID",
      "description": "Retrieve tasks boards information",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks boards information"
    },
    {
      "method": "POST",
      "url": "/api/tasks/boards/{boardId}/columns",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\columns\\route.ts",
      "title": "Create Tasks Boards by ID",
      "description": "Create a new tasks boards",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks boards"
    },
    {
      "method": "GET",
      "url": "/api/tasks/boards/{boardId}/tasks",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\tasks\\route.ts",
      "title": "Get Tasks Boards by ID",
      "description": "Retrieve tasks boards information",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks boards information"
    },
    {
      "method": "GET",
      "url": "/api/realtime/workspace/{workspaceId}/stream",
      "file": "src\\app\\api\\realtime\\workspace\\[workspaceId]\\stream\\route.ts",
      "title": "Get Realtime Workspace by ID",
      "description": "Retrieve realtime workspace information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "realtime"
      ],
      "summary": "Retrieve realtime workspace information"
    },
    {
      "method": "GET",
      "url": "/api/realtime/view/{viewId}/stream",
      "file": "src\\app\\api\\realtime\\view\\[viewId]\\stream\\route.ts",
      "title": "Get Realtime View by ID",
      "description": "Retrieve realtime view information",
      "parameters": [
        {
          "name": "viewId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: viewId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "realtime"
      ],
      "summary": "Retrieve realtime view information"
    },
    {
      "method": "PATCH",
      "url": "/api/projects/{projectId}/statuses/reorder",
      "file": "src\\app\\api\\projects\\[projectId]\\statuses\\reorder\\route.ts",
      "title": "Update Projects {projectId} by ID",
      "description": "Partially update an existing projects {projectid}",
      "parameters": [
        {
          "name": "projectId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "order": {
              "type": "number"
            }
          },
          "required": []
        },
        "description": "Request body for PATCH patching resource",
        "example": {
          "order": 0
        }
      },
      "tags": [
        "projects"
      ],
      "summary": "Partially update an existing projects {projectid}"
    },
    {
      "method": "GET",
      "url": "/api/ai/create-tasks/status/{jobId}",
      "file": "src\\app\\api\\ai\\create-tasks\\status\\[jobId]\\route.ts",
      "title": "Get Ai Create-tasks by ID",
      "description": "Retrieve ai create-tasks information",
      "parameters": [
        {
          "name": "jobId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: jobId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "ai"
      ],
      "summary": "Retrieve ai create-tasks information"
    },
    {
      "method": "GET",
      "url": "/api/board-items/{itemType}/{itemId}/activities",
      "file": "src\\app\\api\\board-items\\[itemType]\\[itemId]\\activities\\route.ts",
      "title": "Get Board-items {itemType} by ID",
      "description": "Retrieve board-items {itemtype} information",
      "parameters": [
        {
          "name": "itemType",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: itemType"
        },
        {
          "name": "itemId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: itemId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "board-items"
      ],
      "summary": "Retrieve board-items {itemtype} information"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/tasks/{taskId}/relations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\tasks\\[taskId]\\relations\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/tasks/{taskId}/relations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\tasks\\[taskId]\\relations\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {
          "type": "object",
          "properties": {
            "params": {
              "type": "object"
            },
            "workspaceId": {
              "type": "string"
            },
            "taskId": {
              "type": "string"
            }
          },
          "required": []
        },
        "description": "Request body for POST creating resource",
        "example": {
          "params": {},
          "workspaceId": "example_workspaceId",
          "taskId": "example_taskId"
        }
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/tasks/{taskId}/relations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\tasks\\[taskId]\\relations\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}"
    },
    {
      "method": "PUT",
      "url": "/api/workspaces/{workspaceId}/members/{memberId}/role",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\members\\[memberId]\\role\\route.ts",
      "title": "Update Workspaces {workspaceId} by ID",
      "description": "Update an existing workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "memberId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: memberId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PUT updating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Update an existing workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/issues/{issueKey}/relations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\issues\\[issueKey]\\relations\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "issueKey",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueKey"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/issues/{issueKey}/relations",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\issues\\[issueKey]\\relations\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "issueKey",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueKey"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/tasks/{taskId}/comments/{commentId}/like",
      "file": "src\\app\\api\\tasks\\[taskId]\\comments\\[commentId]\\like\\route.ts",
      "title": "Get Tasks {taskId} by ID",
      "description": "Retrieve tasks {taskid} information",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Retrieve tasks {taskid} information"
    },
    {
      "method": "POST",
      "url": "/api/tasks/{taskId}/comments/{commentId}/like",
      "file": "src\\app\\api\\tasks\\[taskId]\\comments\\[commentId]\\like\\route.ts",
      "title": "Create Tasks {taskId} by ID",
      "description": "Create a new tasks {taskid}",
      "parameters": [
        {
          "name": "taskId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: taskId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "tasks"
      ],
      "summary": "Create a new tasks {taskid}"
    },
    {
      "method": "PATCH",
      "url": "/api/tasks/boards/{boardId}/columns/reorder",
      "file": "src\\app\\api\\tasks\\boards\\[boardId]\\columns\\reorder\\route.ts",
      "title": "Update Tasks Boards by ID",
      "description": "Partially update an existing tasks boards",
      "parameters": [
        {
          "name": "boardId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: boardId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for PATCH patching resource",
        "example": {}
      },
      "tags": [
        "tasks"
      ],
      "summary": "Partially update an existing tasks boards"
    },
    {
      "method": "GET",
      "url": "/api/posts/{postId}/comments/{commentId}/like",
      "file": "src\\app\\api\\posts\\[postId]\\comments\\[commentId]\\like\\route.ts",
      "title": "Get Posts {postId} by ID",
      "description": "Retrieve posts {postid} information",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Retrieve posts {postid} information"
    },
    {
      "method": "POST",
      "url": "/api/posts/{postId}/comments/{commentId}/like",
      "file": "src\\app\\api\\posts\\[postId]\\comments\\[commentId]\\like\\route.ts",
      "title": "Create Posts {postId} by ID",
      "description": "Create a new posts {postid}",
      "parameters": [
        {
          "name": "postId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: postId"
        },
        {
          "name": "commentId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: commentId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "posts"
      ],
      "summary": "Create a new posts {postid}"
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/projects/{projectSlug}/statuses/{statusId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\[projectSlug]\\statuses\\[statusId]\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "projectSlug",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectSlug"
        },
        {
          "name": "statusId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: statusId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}"
    },
    {
      "method": "DELETE",
      "url": "/api/workspaces/{workspaceId}/issues/{issueKey}/relations/{relationId}",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\issues\\[issueKey]\\relations\\[relationId]\\route.ts",
      "title": "Delete Workspaces {workspaceId} by ID",
      "description": "Remove a workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "issueKey",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueKey"
        },
        {
          "name": "relationId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: relationId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Remove a workspaces {workspaceid}"
    },
    {
      "method": "POST",
      "url": "/api/workspaces/{workspaceId}/issues/{issueKey}/relations/bulk",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\issues\\[issueKey]\\relations\\bulk\\route.ts",
      "title": "Create Workspaces {workspaceId} by ID",
      "description": "Create a new workspaces {workspaceid}",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "issueKey",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: issueKey"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "success": true
          }
        },
        "201": {
          "statusCode": "201",
          "description": "Created",
          "example": {
            "id": "123",
            "success": true
          }
        },
        "400": {
          "statusCode": "400",
          "description": "Bad request",
          "example": {
            "error": "Invalid input"
          }
        }
      },
      "requestHeaders": [],
      "requestBody": {
        "type": "application/json",
        "schema": {},
        "description": "Request body for POST creating resource",
        "example": {}
      },
      "tags": [
        "workspaces"
      ],
      "summary": "Create a new workspaces {workspaceid}"
    },
    {
      "method": "GET",
      "url": "/api/workspaces/{workspaceId}/projects/{projectSlug}/statuses/{statusId}/issues-count",
      "file": "src\\app\\api\\workspaces\\[workspaceId]\\projects\\[projectSlug]\\statuses\\[statusId]\\issues-count\\route.ts",
      "title": "Get Workspaces {workspaceId} by ID",
      "description": "Retrieve workspaces {workspaceid} information",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: workspaceId"
        },
        {
          "name": "projectSlug",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: projectSlug"
        },
        {
          "name": "statusId",
          "type": "string",
          "required": true,
          "location": "path",
          "description": "Path parameter: statusId"
        }
      ],
      "responses": {
        "200": {
          "statusCode": "200",
          "description": "Success",
          "example": {
            "data": []
          }
        },
        "404": {
          "statusCode": "404",
          "description": "Not found",
          "example": {
            "error": "Resource not found"
          }
        }
      },
      "requestHeaders": [],
      "tags": [
        "workspaces"
      ],
      "summary": "Retrieve workspaces {workspaceid} information"
    }
  ],
  "totalEndpoints": 262,
  "generatedAt": "2025-09-15T15:09:12.849Z"
}