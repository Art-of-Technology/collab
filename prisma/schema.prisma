generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  hashedPassword         String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  role                   String                  @default("developer")
  team                   String?
  currentFocus           String?
  expertise              String[]
  slackId                String?
  avatarAccessory        Int?                    @default(0)
  avatarBrows            Int?                    @default(1)
  avatarEyes             Int?                    @default(1)
  avatarEyewear          Int?                    @default(0)
  avatarHair             Int?                    @default(1)
  avatarMouth            Int?                    @default(1)
  avatarNose             Int?                    @default(1)
  avatarSkinTone         Int?                    @default(1)
  useCustomAvatar        Boolean                 @default(false)
  accounts               Account[]
  bookmarks              Bookmark[]
  comments               Comment[]
  commentLikes           CommentLike[]
  assignedEpics          Epic[]                  @relation("AssignedEpics")
  reportedEpics          Epic[]                  @relation("ReportedEpics")
  featureRequests        FeatureRequest[]
  featureRequestComments FeatureRequestComment[]
  featureVotes           FeatureVote[]
  mentions               Mention[]
  receivedMessages       Message[]               @relation("ReceivedMessages")
  sentMessages           Message[]               @relation("SentMessages")
  assignedMilestones     Milestone[]             @relation("AssignedMilestones")
  reportedMilestones     Milestone[]             @relation("ReportedMilestones")
  notes                  Note[]
  noteTags               NoteTag[]
  sentNotifications      Notification[]          @relation("NotificationSender")
  notifications          Notification[]          @relation("NotificationReceiver")
  posts                  Post[]
  postActions            PostAction[]            @relation("PostActions")
  resolvedPosts          Post[]                  @relation("PostResolvedBy")
  reactions              Reaction[]
  assignedStories        Story[]                 @relation("AssignedStories")
  reportedStories        Story[]                 @relation("ReportedStories")
  assignedTasks          Task[]                  @relation("AssignedTasks")
  reportedTasks          Task[]                  @relation("ReportedTasks")
  taskActivities         TaskActivity[]
  approvedTaskHelpers    TaskAssignee[]          @relation("TaskAssigneeApprover")
  taskAssignees          TaskAssignee[]          @relation("TaskAssignee")
  taskAttachments        TaskAttachment[]
  taskComments           TaskComment[]
  taskCommentReactions   TaskCommentReaction[]
  userEvents             UserEvent[]
  userStatus             UserStatus?
  ownedWorkspaces        Workspace[]             @relation("WorkspaceOwner")
  workspaceInvitations   WorkspaceInvitation[]
  workspaceMemberships   WorkspaceMember[]
  conversations          Conversation[]          @relation("UserConversations")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id            String         @id @default(cuid())
  type          PostType
  message       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String
  isAutomated   Boolean        @default(false)
  priority      PostPriority   @default(normal)
  html          String?
  workspaceId   String?
  resolvedAt    DateTime?      // Track when the post was resolved
  resolvedById  String?        // Track who resolved the post
  bookmarks     Bookmark[]
  comments      Comment[]
  mentions      Mention[]
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  resolvedBy    User?          @relation("PostResolvedBy", fields: [resolvedById], references: [id])
  workspace     Workspace?     @relation(fields: [workspaceId], references: [id])
  reactions     Reaction[]
  tasks         Task[]
  tags          Tag[]          @relation("PostToTag")
  actions       PostAction[]   // Track all actions on this post

  @@index([workspaceId])
  @@index([resolvedAt])
  @@index([resolvedById])
}

model PostAction {
  id          String           @id @default(cuid())
  postId      String
  userId      String
  action      PostActionType
  oldValue    String?          // Store old value for changes (JSON)
  newValue    String?          // Store new value for changes (JSON)
  metadata    Json?            // Additional metadata
  createdAt   DateTime         @default(now())
  
  post        Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User             @relation("PostActions", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Tag {
  id          String     @id @default(cuid())
  name        String
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  posts       Post[]     @relation("PostToTag")

  @@unique([name, workspaceId])
  @@index([workspaceId])
}

model Comment {
  id               String         @id @default(cuid())
  message          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  postId           String?
  authorId         String
  parentId         String?
  featureRequestId String?
  html             String?
  author           User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent           Comment?       @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  children         Comment[]      @relation("CommentToComment")
  post             Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes            CommentLike[]
  notifications    Notification[]
  reactions        Reaction[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

model Reaction {
  id        String   @id @default(cuid())
  type      String
  postId    String?
  commentId String?
  authorId  String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([authorId, postId, type, commentId])
}

model Mention {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Bookmark {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model GitHubIntegration {
  id            String @id @default(cuid())
  repositoryUrl String
  accessToken   String
}

model Message {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  read           Boolean      @default(false)
  senderId       String
  receiverId     String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  participants User[]    @relation("UserConversations")

  @@index([createdAt])
}

model FeatureRequest {
  id            String                  @id @default(cuid())
  title         String
  description   String
  status        String                  @default("pending")
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  authorId      String
  html          String?
  workspaceId   String?
  author        User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  workspace     Workspace?              @relation(fields: [workspaceId], references: [id])
  comments      FeatureRequestComment[]
  votes         FeatureVote[]
  notifications Notification[]

  @@index([authorId])
  @@index([workspaceId])
}

model FeatureVote {
  id               String         @id @default(cuid())
  value            Int
  userId           String
  featureRequestId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, featureRequestId])
  @@index([userId])
  @@index([featureRequestId])
}

model FeatureRequestComment {
  id               String         @id @default(cuid())
  content          String
  userId           String
  featureRequestId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id], onDelete: Cascade)
  author           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([featureRequestId])
}

model Workspace {
  id                  String                @id @default(cuid())
  name                String
  slug                String                @unique
  description         String?
  logoUrl             String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ownerId             String
  dockEnabled         Boolean               @default(true)
  timeTrackingEnabled Boolean               @default(true)
  epics               Epic[]
  featureRequests     FeatureRequest[]
  milestones          Milestone[]
  notes               Note[]
  noteTags            NoteTag[]
  posts               Post[]
  stories             Story[]
  tags                Tag[]
  tasks               Task[]
  taskBoards          TaskBoard[]
  taskLabels          TaskLabel[]
  owner               User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  invitations         WorkspaceInvitation[]
  members             WorkspaceMember[]
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        String    @default("member")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model WorkspaceInvitation {
  id          String    @id @default(cuid())
  email       String
  workspaceId String
  invitedById String
  token       String    @unique
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  invitedBy   User      @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([email, workspaceId])
}

model TaskBoard {
  id              String       @id @default(cuid())
  name            String
  description     String?
  workspaceId     String
  isDefault       Boolean      @default(false)
  issuePrefix     String?
  nextIssueNumber Int          @default(1)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  epics           Epic[]
  milestones      Milestone[]
  stories         Story[]
  tasks           Task[]
  workspace       Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  columns         TaskColumn[]

  @@unique([name, workspaceId])
  @@index([workspaceId])
}

model TaskColumn {
  id          String      @id @default(cuid())
  name        String
  description String?
  order       Int         @default(0)
  color       String?
  taskBoardId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  epics       Epic[]
  milestones  Milestone[]
  stories     Story[]
  tasks       Task[]
  taskBoard   TaskBoard   @relation(fields: [taskBoardId], references: [id], onDelete: Cascade)

  @@unique([name, taskBoardId])
  @@index([taskBoardId])
}

model Task {
  id            String           @id @default(cuid())
  title         String
  description   String?
  status        String?
  priority      String           @default("medium")
  type          String           @default("task")
  issueKey      String?
  storyPoints   Int?
  dueDate       DateTime?
  columnId      String?
  taskBoardId   String?
  workspaceId   String
  assigneeId    String?
  reporterId    String?
  parentTaskId  String?
  storyId       String?
  epicId        String?
  milestoneId   String?
  postId        String?
  position      Int?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  notifications Notification[]
  assignee      User?            @relation("AssignedTasks", fields: [assigneeId], references: [id])
  column        TaskColumn?      @relation(fields: [columnId], references: [id])
  epic          Epic?            @relation(fields: [epicId], references: [id])
  parentTask    Task?            @relation("TaskToSubtasks", fields: [parentTaskId], references: [id])
  subtasks      Task[]           @relation("TaskToSubtasks")
  post          Post?            @relation(fields: [postId], references: [id])
  reporter      User?            @relation("ReportedTasks", fields: [reporterId], references: [id], onDelete: Cascade)
  story         Story?           @relation(fields: [storyId], references: [id])
  taskBoard     TaskBoard?       @relation(fields: [taskBoardId], references: [id])
  workspace     Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  activity      TaskActivity[]
  assignees     TaskAssignee[]
  attachments   TaskAttachment[]
  comments      TaskComment[]
  userEvents    UserEvent[]
  userStatuses  UserStatus[]
  labels        TaskLabel[]      @relation("TaskToLabel")

  @@index([columnId])
  @@index([taskBoardId])
  @@index([workspaceId])
  @@index([assigneeId])
  @@index([reporterId])
  @@index([parentTaskId])
  @@index([postId])
  @@index([issueKey])
  @@index([storyId])
  @@index([epicId])
  @@index([milestoneId])
}

model TaskComment {
  id            String                @id @default(cuid())
  content       String
  html          String?
  taskId        String
  authorId      String
  parentId      String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  notifications Notification[]
  author        User                  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent        TaskComment?          @relation("TaskCommentToTaskComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies       TaskComment[]         @relation("TaskCommentToTaskComment")
  task          Task                  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  reactions     TaskCommentReaction[]

  @@index([taskId])
  @@index([authorId])
  @@index([parentId])
}

model TaskCommentReaction {
  id            String      @id @default(cuid())
  type          String
  taskCommentId String
  authorId      String
  createdAt     DateTime    @default(now())
  author        User        @relation(fields: [authorId], references: [id])
  taskComment   TaskComment @relation(fields: [taskCommentId], references: [id], onDelete: Cascade)

  @@unique([authorId, taskCommentId, type])
  @@index([taskCommentId])
  @@index([authorId])
}

model TaskAttachment {
  id         String   @id @default(cuid())
  fileName   String
  fileUrl    String
  fileSize   Int?
  fileType   String?
  taskId     String
  uploaderId String
  createdAt  DateTime @default(now())
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader   User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([uploaderId])
}

model TaskLabel {
  id          String    @id @default(cuid())
  name        String
  color       String    @default("#6366F1")
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]    @relation("TaskToLabel")

  @@unique([name, workspaceId])
  @@index([workspaceId])
}

model TaskActivity {
  id        String   @id @default(cuid())
  action    String
  details   String?
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

model Milestone {
  id            String         @id @default(cuid())
  title         String
  description   String?
  status        String         @default("planned")
  startDate     DateTime?
  dueDate       DateTime?
  taskBoardId   String
  workspaceId   String
  columnId      String?
  color         String?        @default("#6366F1")
  issueKey      String?
  position      Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  assigneeId    String?
  reporterId    String?
  epics         Epic[]
  assignee      User?          @relation("AssignedMilestones", fields: [assigneeId], references: [id])
  column        TaskColumn?    @relation(fields: [columnId], references: [id])
  reporter      User?          @relation("ReportedMilestones", fields: [reporterId], references: [id])
  taskBoard     TaskBoard      @relation(fields: [taskBoardId], references: [id], onDelete: Cascade)
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([workspaceId])
  @@index([taskBoardId])
  @@index([columnId])
  @@index([issueKey])
  @@index([assigneeId])
  @@index([reporterId])
}

model Epic {
  id            String         @id @default(cuid())
  title         String
  description   String?
  status        String         @default("backlog")
  priority      String         @default("medium")
  startDate     DateTime?
  dueDate       DateTime?
  milestoneId   String?
  taskBoardId   String
  workspaceId   String
  columnId      String?
  color         String?        @default("#6366F1")
  progress      Int            @default(0)
  issueKey      String?
  position      Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  assigneeId    String?
  reporterId    String?
  assignee      User?          @relation("AssignedEpics", fields: [assigneeId], references: [id])
  column        TaskColumn?    @relation(fields: [columnId], references: [id])
  milestone     Milestone?     @relation(fields: [milestoneId], references: [id])
  reporter      User?          @relation("ReportedEpics", fields: [reporterId], references: [id])
  taskBoard     TaskBoard      @relation(fields: [taskBoardId], references: [id], onDelete: Cascade)
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  notifications Notification[]
  stories       Story[]
  tasks         Task[]

  @@index([workspaceId])
  @@index([taskBoardId])
  @@index([milestoneId])
  @@index([issueKey])
  @@index([columnId])
  @@index([assigneeId])
  @@index([reporterId])
}

model Story {
  id            String         @id @default(cuid())
  title         String
  description   String?
  status        String         @default("backlog")
  priority      String         @default("medium")
  type          String         @default("user-story")
  storyPoints   Int?
  epicId        String?
  taskBoardId   String?
  workspaceId   String
  columnId      String?
  issueKey      String?
  color         String?        @default("#3B82F6")
  position      Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  assigneeId    String?
  reporterId    String?
  notifications Notification[]
  assignee      User?          @relation("AssignedStories", fields: [assigneeId], references: [id])
  column        TaskColumn?    @relation(fields: [columnId], references: [id])
  epic          Epic?          @relation(fields: [epicId], references: [id])
  reporter      User?          @relation("ReportedStories", fields: [reporterId], references: [id])
  taskBoard     TaskBoard?     @relation(fields: [taskBoardId], references: [id])
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks         Task[]

  @@index([workspaceId])
  @@index([taskBoardId])
  @@index([epicId])
  @@index([issueKey])
  @@index([columnId])
  @@index([assigneeId])
  @@index([reporterId])
}

model Notification {
  id               String          @id @default(cuid())
  type             String
  content          String
  read             Boolean         @default(false)
  createdAt        DateTime        @default(now())
  userId           String
  senderId         String
  postId           String?
  commentId        String?
  taskCommentId    String?
  featureRequestId String?
  taskId           String?
  epicId           String?
  storyId          String?
  milestoneId      String?
  comment          Comment?        @relation(fields: [commentId], references: [id], onDelete: Cascade)
  epic             Epic?           @relation(fields: [epicId], references: [id], onDelete: Cascade)
  featureRequest   FeatureRequest? @relation(fields: [featureRequestId], references: [id], onDelete: Cascade)
  milestone        Milestone?      @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  post             Post?           @relation(fields: [postId], references: [id], onDelete: Cascade)
  sender           User            @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  story            Story?          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  taskComment      TaskComment?    @relation(fields: [taskCommentId], references: [id], onDelete: Cascade)
  task             Task?           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user             User            @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([commentId])
  @@index([taskCommentId])
  @@index([taskId])
  @@index([featureRequestId])
  @@index([epicId])
  @@index([storyId])
  @@index([milestoneId])
}

model UserEvent {
  id          String    @id @default(cuid())
  userId      String
  eventType   EventType
  taskId      String?
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  duration    Int?
  description String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  task        Task?     @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([taskId])
  @@index([eventType])
  @@index([startedAt])
}

model UserStatus {
  id              String         @id @default(cuid())
  userId          String         @unique
  currentStatus   UserStatusType @default(AVAILABLE)
  currentTaskId   String?
  statusStartedAt DateTime       @default(now())
  statusText      String?
  isAvailable     Boolean        @default(true)
  autoEndAt       DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  currentTask     Task?          @relation(fields: [currentTaskId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([currentStatus])
}

model Note {
  id          String     @id @default(cuid())
  title       String
  content     String
  isPublic    Boolean    @default(false)
  isFavorite  Boolean    @default(false)
  authorId    String
  workspaceId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  tags        NoteTag[]  @relation("NoteToTag")

  @@index([authorId])
  @@index([workspaceId])
  @@index([createdAt])
  @@index([isFavorite])
}

model NoteTag {
  id          String     @id @default(cuid())
  name        String
  color       String     @default("#6366F1")
  authorId    String
  workspaceId String?
  createdAt   DateTime   @default(now())
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  notes       Note[]     @relation("NoteToTag")

  @@unique([name, authorId, workspaceId])
  @@index([authorId])
  @@index([workspaceId])
}

model TaskAssignee {
  id              String             @id @default(cuid())
  taskId          String
  userId          String
  role            TaskAssigneeRole   @default(ASSIGNEE)
  status          TaskAssigneeStatus @default(PENDING)
  assignedAt      DateTime           @default(now())
  approvedAt      DateTime?
  approvedBy      String?
  totalTimeWorked Int                @default(0)
  lastWorkedAt    DateTime?
  approver        User?              @relation("TaskAssigneeApprover", fields: [approvedBy], references: [id])
  task            Task               @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user            User               @relation("TaskAssignee", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
  @@index([role])
  @@index([status])
}

enum EventType {
  TASK_START
  TASK_PAUSE
  TASK_STOP
  TASK_COMPLETE
  LUNCH_START
  LUNCH_END
  BREAK_START
  BREAK_END
  MEETING_START
  MEETING_END
  TRAVEL_START
  TRAVEL_END
  REVIEW_START
  REVIEW_END
  RESEARCH_START
  RESEARCH_END
  OFFLINE
  AVAILABLE
}

enum UserStatusType {
  WORKING
  LUNCH
  BREAK
  MEETING
  TRAVEL
  REVIEW
  RESEARCH
  OFFLINE
  AVAILABLE
}

enum TaskAssigneeRole {
  ASSIGNEE
  HELPER
}

enum TaskAssigneeStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PostType {
  UPDATE
  BLOCKER
  IDEA
  QUESTION
  RESOLVED
}

enum PostPriority {
  normal
  high
  critical
}

enum PostActionType {
  CREATED
  EDITED
  TYPE_CHANGED
  PRIORITY_CHANGED
  RESOLVED
  REOPENED
  DELETED
}
