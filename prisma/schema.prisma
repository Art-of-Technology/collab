generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  hashedPassword         String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  role                   String                  @default("developer")
  team                   String?
  currentFocus           String?
  expertise              String[]
  slackId                String?
  avatarAccessory        Int?                    @default(0)
  avatarBrows            Int?                    @default(1)
  avatarEyes             Int?                    @default(1)
  avatarEyewear          Int?                    @default(0)
  avatarHair             Int?                    @default(1)
  avatarMouth            Int?                    @default(1)
  avatarNose             Int?                    @default(1)
  avatarSkinTone         Int?                    @default(1)
  useCustomAvatar        Boolean                 @default(false)
  accounts               Account[]
  bookmarks              Bookmark[]
  comments               Comment[]
  commentLikes           CommentLike[]
  featureRequests        FeatureRequest[]
  featureRequestComments FeatureRequestComment[]
  featureVotes           FeatureVote[]
  mentions               Mention[]
  receivedMessages       Message[]               @relation("ReceivedMessages")
  sentMessages           Message[]               @relation("SentMessages")
  posts                  Post[]
  reactions              Reaction[]
  conversations          Conversation[]          @relation("UserConversations")
  
  // Workspace-related fields
  ownedWorkspaces      Workspace[]             @relation("WorkspaceOwner")
  workspaceMemberships WorkspaceMember[]
  workspaceInvitations WorkspaceInvitation[]
  
  // Task-related fields
  assignedTasks        Task[]                  @relation("AssignedTasks")
  reportedTasks        Task[]                  @relation("ReportedTasks")
  taskComments         TaskComment[]
  taskAttachments      TaskAttachment[]
  taskActivities       TaskActivity[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id          String     @id @default(cuid())
  type        String
  message     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String
  isAutomated Boolean    @default(false)
  priority    String     @default("normal")
  html        String?
  workspaceId String?
  
  bookmarks   Bookmark[]
  comments    Comment[]
  mentions    Mention[]
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions   Reaction[]
  tags        Tag[]      @relation("PostToTag")
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  tasks       Task[]     // Tasks associated with this post

  @@index([workspaceId])
}

model Tag {
  id          String @id @default(cuid())
  name        String
  workspaceId String?
  
  posts     Post[]    @relation("PostToTag")
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)

  @@unique([name, workspaceId])
  @@index([workspaceId])
}

model Comment {
  id               String        @id @default(cuid())
  message          String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  postId           String?
  authorId         String
  parentId         String?
  featureRequestId String?
  html             String?
  author           User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent           Comment?      @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  children         Comment[]     @relation("CommentToComment")
  post             Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes            CommentLike[]
  reactions        Reaction[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

model Reaction {
  id        String   @id @default(cuid())
  type      String
  postId    String?
  commentId String?
  authorId  String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([authorId, postId, type, commentId])
}

model Mention {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Bookmark {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model GitHubIntegration {
  id            String @id @default(cuid())
  repositoryUrl String
  accessToken   String
}

model Message {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  read           Boolean      @default(false)
  senderId       String
  receiverId     String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  participants User[]    @relation("UserConversations")

  @@index([createdAt])
}

model FeatureRequest {
  id          String                  @id @default(cuid())
  title       String
  description String
  status      String                  @default("pending")
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  authorId    String
  html        String?
  workspaceId String?
  
  author      User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    FeatureRequestComment[]
  votes       FeatureVote[]
  workspace   Workspace?              @relation(fields: [workspaceId], references: [id], onDelete: SetNull)

  @@index([authorId])
  @@index([workspaceId])
}

model FeatureVote {
  id               String         @id @default(cuid())
  value            Int
  userId           String
  featureRequestId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, featureRequestId])
  @@index([userId])
  @@index([featureRequestId])
}

model FeatureRequestComment {
  id               String         @id @default(cuid())
  content          String
  userId           String
  featureRequestId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id], onDelete: Cascade)
  author           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([featureRequestId])
}

// Workspace models
model Workspace {
  id          String                @id @default(cuid())
  name        String
  slug        String                @unique
  description String?
  logoUrl     String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  ownerId     String
  
  owner           User                  @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members         WorkspaceMember[]
  invitations     WorkspaceInvitation[]
  posts           Post[]
  tags            Tag[]
  featureRequests FeatureRequest[]
  taskBoards      TaskBoard[]
  tasks           Task[]
  taskLabels      TaskLabel[]
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  role        String   @default("member") // owner, admin, member
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model WorkspaceInvitation {
  id          String   @id @default(cuid())
  email       String
  workspaceId String
  invitedById String
  token       String   @unique
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy User      @relation(fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([email, workspaceId])
}

// Task Management models
model TaskBoard {
  id          String        @id @default(cuid())
  name        String
  description String?
  workspaceId String
  isDefault   Boolean       @default(false)
  issuePrefix String?       // For generating issue keys like WZB-123
  nextIssueNumber Int       @default(1) // To keep track of incremental issue numbers
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  workspace Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  columns   TaskColumn[]
  tasks     Task[]

  @@unique([name, workspaceId])
  @@index([workspaceId])
}

model TaskColumn {
  id          String   @id @default(cuid())
  name        String
  order       Int
  color       String?  @default("#6366F1") // Default indigo color
  taskBoardId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  taskBoard TaskBoard @relation(fields: [taskBoardId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@unique([name, taskBoardId])
  @@index([taskBoardId])
}

model Task {
  id           String        @id @default(cuid())
  title        String
  description  String?
  status       String?       // For list view filtering (e.g., "To Do", "In Progress", "Done")
  priority     String        @default("medium") // low, medium, high, urgent
  type         String        @default("task") // task, bug, feature, improvement, etc.
  issueKey     String?       // Stored issue key like WZB-123
  storyPoints  Int?
  dueDate      DateTime?
  columnId     String?
  taskBoardId  String?
  workspaceId  String
  assigneeId   String?
  reporterId   String
  parentTaskId String?       // For subtasks
  postId       String?       // For tasks linked to posts
  position     Int?          // Position within a column for ordering
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  column      TaskColumn?      @relation(fields: [columnId], references: [id], onDelete: SetNull)
  taskBoard   TaskBoard?       @relation(fields: [taskBoardId], references: [id], onDelete: SetNull)
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  assignee    User?            @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  reporter    User             @relation("ReportedTasks", fields: [reporterId], references: [id], onDelete: Cascade)
  parentTask  Task?            @relation("TaskToSubtasks", fields: [parentTaskId], references: [id], onDelete: SetNull)
  subtasks    Task[]           @relation("TaskToSubtasks")
  post        Post?            @relation(fields: [postId], references: [id], onDelete: SetNull)
  comments    TaskComment[]
  attachments TaskAttachment[]
  labels      TaskLabel[]      @relation("TaskToLabel")
  activity    TaskActivity[]

  @@index([columnId])
  @@index([taskBoardId])
  @@index([workspaceId])
  @@index([assigneeId])
  @@index([reporterId])
  @@index([parentTaskId])
  @@index([postId])
  @@index([issueKey])
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([authorId])
}

model TaskAttachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileSize  Int?
  fileType  String?
  taskId    String
  uploaderId String
  createdAt DateTime @default(now())
  
  task     Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader User @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([uploaderId])
}

model TaskLabel {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("#6366F1") // Default indigo color
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks     Task[]    @relation("TaskToLabel")

  @@unique([name, workspaceId])
  @@index([workspaceId])
}

model TaskActivity {
  id        String   @id @default(cuid())
  action    String   // created, updated, commented, etc.
  details   String?  // JSON string with details of the activity
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}
