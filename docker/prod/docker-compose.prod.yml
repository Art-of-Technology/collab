version: '3.8'

# Production Docker Compose configuration for Collab
# Uses external AWS RDS PostgreSQL and Cloud Redis
services:
  # Collab Application - Production Mode  
  collab-prod:
    build:
      context: ../../
      dockerfile: docker/prod/Dockerfile.prod
    restart: unless-stopped
    environment:
      # External Database Configuration (AWS RDS)
      DATABASE_URL: ${DATABASE_URL}
      
      # Production Settings
      NODE_ENV: production
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      
      # External Redis Configuration (Cloud Redis)
      REDIS_URL: ${REDIS_URL}
      
      # Production URLs
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      
      # External Services (Production keys)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}
      
      # GitHub Integration (Production)
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      
      # Email Configuration (Production SMTP)
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_SECURE: ${EMAIL_SECURE}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}
      
      # Push Notifications (Production)
      NEXT_PUBLIC_ONESIGNAL_APP_ID: ${NEXT_PUBLIC_ONESIGNAL_APP_ID_PROD}
      ONESIGNAL_API_KEY: ${ONESIGNAL_API_KEY_PROD}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
      VAPID_EMAIL: ${VAPID_EMAIL}
      
      # Real-time Features (Production)
      PUSHER_APP_ID: ${PUSHER_APP_ID}
      PUSHER_KEY: ${PUSHER_KEY}
      PUSHER_SECRET: ${PUSHER_SECRET}
      PUSHER_CLUSTER: ${PUSHER_CLUSTER}
      NEXT_PUBLIC_HOCUSPOCUS_URL: ${NEXT_PUBLIC_HOCUSPOCUS_URL}
      
      # AI Integration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Security & Encryption
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # Webhook Configuration
      WEBHOOK_BASE_URL: ${WEBHOOK_BASE_URL}
      
      # Chat Integration
      CHAT_PROJECT_API_KEY: ${CHAT_PROJECT_API_KEY}
      
      # Production database seeding (usually false)
      SEED_DATABASE: ${SEED_DATABASE:-false}
      
    ports:
      - "3002:3000"
    volumes:
      # Mount logs and uploads for production
      - prod_uploads:/app/uploads
      - prod_logs:/app/logs
    networks:
      - collab-prod-network
    # Security and performance: limit resources
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    # Health check for the application
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # pgAdmin for external database management (Production - admin profile only)
  pgadmin-prod:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@collab.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
    ports:
      - "5052:80"
    volumes:
      - pgadmin_prod_data:/var/lib/pgadmin
    networks:
      - collab-prod-network
    profiles:
      - admin

  # Redis Commander for external Cloud Redis management (Production - admin profile only)
  redis-commander-prod:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      # Parse Redis URL for connection (will need manual setup in UI)
      REDIS_HOSTS: external-redis:external-redis:${REDIS_PORT:-6379}:0:${REDIS_PASSWORD:-""}
    ports:
      - "8083:8081"
    networks:
      - collab-prod-network
    profiles:
      - admin

volumes:
  pgadmin_prod_data:
    driver: local
  prod_uploads:
    driver: local
  prod_logs:
    driver: local

networks:
  collab-prod-network:
    driver: bridge
