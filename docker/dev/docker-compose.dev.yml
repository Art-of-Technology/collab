# Development Docker Compose configuration for Collab
# Uses external NeonDB PostgreSQL and Cloud Redis
services:
  # Collab Application - Development Mode
  collab-dev:
    build:
      context: ../../
      dockerfile: docker/dev/Dockerfile.dev
      # Pass all NEXT_PUBLIC_ variables as build args
      args:
        # All environment variables from .env.dev.local are available here
        # We explicitly list NEXT_PUBLIC_ ones for the build
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        NEXT_PUBLIC_API_URL: http://localhost:3000/api
        NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}
        NEXT_PUBLIC_HOCUSPOCUS_URL: ${NEXT_PUBLIC_HOCUSPOCUS_URL}
        NEXT_PUBLIC_ONESIGNAL_APP_ID: ${NEXT_PUBLIC_ONESIGNAL_APP_ID_DEV}
        NEXT_PUBLIC_VAPID_PUBLIC_KEY: ${NEXT_PUBLIC_VAPID_PUBLIC_KEY}
        # Database URL needed for Prisma generate during build
        DATABASE_URL: ${DATABASE_URL}
    restart: unless-stopped
    environment:
      # External Database Configuration (NeonDB)
      DATABASE_URL: ${DATABASE_URL}
      
      # Development Settings
      NODE_ENV: development
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-dev-secret-not-for-production-please-change}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      
      # External Redis Configuration (Cloud Redis)
      REDIS_URL: ${REDIS_URL}
      
      # Development URLs
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NEXT_PUBLIC_API_URL: http://localhost:3000/api
      
      # External Services (can use test/development keys)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}
      
      # GitHub Integration
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      
      # Email Configuration (development - use external SMTP)
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_SECURE: ${EMAIL_SECURE:-false}
      EMAIL_USER: ${EMAIL_USER:-""}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-""}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@collab.local}
      
      # Push Notifications (development)
      NEXT_PUBLIC_ONESIGNAL_APP_ID: ${NEXT_PUBLIC_ONESIGNAL_APP_ID_DEV}
      ONESIGNAL_API_KEY: ${ONESIGNAL_API_KEY_DEV}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
      NEXT_PUBLIC_VAPID_PUBLIC_KEY: ${NEXT_PUBLIC_VAPID_PUBLIC_KEY}
      VAPID_EMAIL: ${VAPID_EMAIL}
      
      # Real-time Features
      PUSHER_APP_ID: ${PUSHER_APP_ID}
      PUSHER_KEY: ${PUSHER_KEY}
      PUSHER_SECRET: ${PUSHER_SECRET}
      PUSHER_CLUSTER: ${PUSHER_CLUSTER}
      NEXT_PUBLIC_HOCUSPOCUS_URL: ${NEXT_PUBLIC_HOCUSPOCUS_URL}
      
      # AI Integration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Security & Encryption
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # Auto-seed database in development
      SEED_DATABASE: true
      
      # Development debugging
      DEBUG: ${DEBUG:-collab:*}
      
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js debugger port
    volumes:
      # Mount source code for hot-reload
      - ../../:/app
      - /app/node_modules
      - /app/.next
      # Mount uploads and logs as named volumes  
      - dev_uploads:/app/uploads
      - dev_logs:/app/logs
    networks:
      - collab-dev-network
    # Override command for development - fix permissions and start
    user: root
    entrypoint: ["sh", "-c"]
    command: |
      "echo 'üöÄ Starting Collab Development...' &&
       echo 'üîß Fixing permissions for Next.js directories and files...' &&
       mkdir -p .next && chown -R nextjs:nodejs .next &&
       chown nextjs:nodejs /app/next-env.d.ts 2>/dev/null || touch /app/next-env.d.ts && chown nextjs:nodejs /app/next-env.d.ts &&
       chown nextjs:nodejs /app/tsconfig.json 2>/dev/null || true &&
       chown -R nextjs:nodejs /app/uploads || true &&
       chown -R nextjs:nodejs /app/logs || true &&
       echo 'üîß Switching to nextjs user and generating Prisma client...' &&
       su -s /bin/sh nextjs -c 'npx prisma generate' &&
       echo 'üè¢ Starting development server as nextjs user...' &&
       exec su -s /bin/sh nextjs -c 'npm run dev'"

  # Redis Commander - View/manage Redis keys, memory usage, performance
  redis-commander-dev:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    networks:
      - collab-dev-network

  # Uptime Kuma - Monitor app health, response times, API endpoints
  uptime-kuma:
    image: louislam/uptime-kuma:1
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - uptime_kuma_data:/app/data
    networks:
      - collab-dev-network
    environment:
      UPTIME_KUMA_PORT: 3001

  # Portainer - Docker container management & monitoring
  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - collab-dev-network

volumes:
  uptime_kuma_data:
    driver: local
  portainer_data:
    driver: local
  dev_uploads:
    driver: local
  dev_logs:
    driver: local

networks:
  collab-dev-network:
    driver: bridge
